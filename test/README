= Notes on the test machinery = 

A .fi extension means it's a git fast-import stream.  
An .svn extension means it's a Subversion repo dump.
A .chk extension means it's expected output from a test
A .tst extension means it's a test driver script

== The scripts ==

=== fi-to-fi ===

Builds a repo from a fast-import stream on stdin, or streams an exsting 
repo to stdout.

=== svn-to-svn ===

Build a Subversion repo from a Subversion stream dump on stdin, or
dump an existing repo as a stream to stdout.  Can also be used to edit
a Subversion terst load, regenerating its checksums.

== The tests ==

Keeping live Subversion repos under version control doesn't work very well; 
in particular, things like the entries file change too often.  So what we 
do is keep Subversion dump files and rebuild the repo before each test.

In general, a file named foo.chk is the expected output from a test involving
either some operation test on an input stream in foo.fi or a repo conversion
from foo.svn.  Here is a summary of the test sources:

|=============================================================================
|agito.svn       |Simon Howard's tag-mangling test case (see below)
|argtest.tst     |Test argument substitution in scripts
|bzr.fi          |Test for processing and round-tripping of bzr extensions.
|divide.tst      |Test for divide operation; uses bzr repo
|deletion.svn    |Tests translation of file deletions
|delignore.svn   |Tests correct cleanup of gitignore on directory delete
|deepdirs.svn    |Branchy repo with directory copy and delete
|deleteall.fi    |Tests roundtripping of deleteall operation 
|emptybranch.svn |Branchy repo with empty branch at top level
|exiguous.svn    |Branchy repo with exiguous branch at top level
|filecopy.svn	 |Test to make sure file copies don't confuse branch detection.
|graft.tst       |Grafts together the bzr and testrepo repositories
|ignores.fi      |Flat repo.  Tests for turning svn:ignore into .gitignore
|mergeinfo.svn   |Test processing of Subversion mergeinfo properties.  
|mergeinfo-with-split.svn|Test processing of mergeinfo with split commits
|mkignore.svn    |Test simultaneous directory creation and ignore setting.
|nontipcopy.svn  |Two branches, with the creation right after a tag copy
|nut.svn         |Head segment of NUT-UPS repo with lots of cvs2svn cruft in it
|references.tst  |Test author mapping and reference lifting 
|rootfile.svn    |Branchy layout with a file at the root level.
|roundup.fi      |Early segment of the Roundup tracker repo
|roundup.tst     |Test to see how it renders the two different botched starts
|samplebranch.svn|Two-branch history with interleaved commits.
|simple.fi       |Earlier version of the reposurgeon repo, kept as a test
|simple.tst      |Test expression interpreter and basic operations
|simpletag.svn   |Standard layout. Linear. A couple of tags and no branches.
|testrepo.fi     |Synthetic repo made to check deletion results
|testdelete.tst  |Exercises all the deletion cases, with coverage checks
|uncoalesced.fi  |Repo with unsquashed squashable commits from the SNG project
|uncoalesced.tst |Exercises all the deletion cases, with coverage checks
|unite.tst       |Test unite on bzr and testrepo
|vanilla.svn     |Standard layout. Linear. Simplest case, no tags or branches.
|=============================================================================

=== Making new Subversion test loads ===

1. To create a new Subversion test repo, 'make svn-flat' or 'make svn-branchy'.

2. To clone an existing test load foo.svn into the test repo,
'svn-to-svn -n <foo.svn'

3. To copy trunk, creating a tag named 'foo'

   svn copy file://${PWD}/test-repo/trunk file://${PWD}/test-repo/tags/foo

4. To delete a branch foo

   svn delete file://${PWD}/test-repo/branches/foo

5. 'make svn-dump' will dump the new test load to stdout.

== The agito test case ==

Samuel Howard had this to say:

git-svn's handling of tags is broken.

In this demonstration repository, a trunk directory of /trunk/proj exists,
containing some code.  This is improperly tagged by doing:

	svn cp trunk tags/proj-1.0

Where as what should have been done is this:

	svn cp trunk/proj tags/proj-1.0

This is significant because this is exactly what the CVS to SVN conversion
script (cvs2svn) does, to handle the fact that a CVS repository can contain
multiple modules.  Fixing a "mistake" like this is therefore necessary when
converting to SVN, to get tags stored properly.

In the SVN repository, this is fixed by deleting the branch and recreating
it properly (ie. the second command above).  To verify that this has been
done successfully, try this:

	svn log file://$PWD/myrepo/tags/proj-1.0

outputs:

	-----------------------------------------------------------------------
	r4 | fraggle | 2009-10-02 23:37:42 +0100 (Fri, 02 Oct 2009) | 2 lines

	Recreating the tag properly.

	-----------------------------------------------------------------------
	r1 | fraggle | 2009-10-02 23:36:41 +0100 (Fri, 02 Oct 2009) | 2 lines

	Initial import.

	-----------------------------------------------------------------------

Only the history of the directory being tagged and the commit that created the
tag are shown.  The "mistake" is kept in the history of /tags, but not in
the history of the tag itself.

The repository is then converted to git, using git-svn (see the shell script).
Two tags are created (proj-1.0@1 is the older, broken tag).  However, the
newer tag retains the history of the broken tag:

	git log tags/proj-1.0

outputs:

	Author: fraggle <fraggle@f01c4a58-e860-4891-ae86-76464917f484>
	Date:   Fri Oct 2 22:37:42 2009 +0000

	    Recreating the tag properly.

	commit 4aeb0a415e5be12d28a8af1128315e44d44a10d7
	Author: fraggle <fraggle@f01c4a58-e860-4891-ae86-76464917f484>
	Date:   Fri Oct 2 22:37:07 2009 +0000

	    Creating a tag in a BROKEN way, like how cvs2svn does it.

	commit 866f94c91de7628d7251098efcc133e6b5900f88
	Author: fraggle <fraggle@f01c4a58-e860-4891-ae86-76464917f484>
	Date:   Fri Oct 2 22:36:41 2009 +0000

	    Initial import.

	commit e8a2ee18774e319d33cb5bd418e03a5281b75268
	Author: fraggle <fraggle@f01c4a58-e860-4891-ae86-76464917f484>
	Date:   Fri Oct 2 22:36:41 2009 +0000

	    Initial import.


