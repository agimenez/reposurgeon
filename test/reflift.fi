# This is a syntehetic terst load for CVS and Subversion reference cookies,
# pieced together from a couple of different repos and hand-hacked.
blob
mark :9021
data 88783
# Russian message file for Roundup Issue Tracker
# alexander smishlajev <alex@tycobka.lv>, 2004
#
# $Id: ru.po,v 1.6 2004-07-03 13:51:03 a1s Exp $
#
# roundup.pot revision 1.6
#
msgid ""
msgstr ""
"Project-Id-Version: Roundup 0.7.0\n"
"Report-Msgid-Bugs-To: roundup-devel@lists.sourceforge.net\n"
"POT-Creation-Date: 2004-07-02 11:55+0300\n"
"PO-Revision-Date: 2004-07-03 16:49+0300\n"
"Last-Translator: alexander smishlajev <alex@tycobka.lv>\n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=koi8-r\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%"
"10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"

#: ../roundup/admin.py:83 ../roundup/admin.py:932 ../roundup/admin.py:981
#: ../roundup/admin.py:1003
#, python-format
msgid "no such class \"%(classname)s\""
msgstr "Класс \"%(classname)s\" не существует"

#: ../roundup/admin.py:93 ../roundup/admin.py:97
#, python-format
msgid "argument \"%(arg)s\" not propname=value"
msgstr "аргумент \"%(arg)s\" должен иметь вид имя=значение"

#: ../roundup/admin.py:110
#, python-format
msgid ""
"Problem: %(message)s\n"
"\n"
msgstr ""
"Ошибка: %(message)s\n"
"\n"

#: ../roundup/admin.py:111
#, python-format
msgid ""
"%(message)sUsage: roundup-admin [options] [<command> <arguments>]\n"
"\n"
"Options:\n"
" -i instance home  -- specify the issue tracker \"home directory\" to "
"administer\n"
" -u                -- the user[:password] to use for commands\n"
" -d                -- print full designators not just class id numbers\n"
" -c                -- when outputting lists of data, comma-separate them.\n"
"                      Same as '-S \",\"'.\n"
" -S <string>       -- when outputting lists of data, string-separate them\n"
" -s                -- when outputting lists of data, space-separate them.\n"
"                      Same as '-S \" \"'.\n"
"\n"
" Only one of -s, -c or -S can be specified.\n"
"\n"
"Help:\n"
" roundup-admin -h\n"
" roundup-admin help                       -- this help\n"
" roundup-admin help <command>             -- command-specific help\n"
" roundup-admin help all                   -- all available help\n"
msgstr ""
"%(message)sВызов: roundup-admin [ключи] [<команда> <аргументы>]\n"
"\n"
"Ключи:\n"
" -i <каталог>  -- указывает \"домашний каталог\" трекера.\n"
" -u            -- имя пользователя.  Можно указать пароль через двоеточие.\n"
" -d            -- вместо идентификаторов выдавать описатели объектов.\n"
" -c            -- при выдаче списков разделять значения запятыми.\n"
"                  То же, что '-S \",\"'.\n"
" -S <строка>   -- при выдаче списков разделять значения указанной строкой.\n"
" -s            -- при выдаче списков разделять значения пробелами.\n"
"                  То же, что '-S \" \"'.\n"
"\n"
" Одновременно можно использовать только один из ключей -s, -c и -S.\n"
"\n"
"Справки:\n"
" roundup-admin -h\n"
" roundup-admin help                       -- это сообщение\n"
" roundup-admin help <command>             -- справка по команде\n"
" roundup-admin help all                   -- все справочные сообщения\n"

#: ../roundup/admin.py:136
msgid "Commands:"
msgstr "Команды:"

#: ../roundup/admin.py:143
msgid ""
"Commands may be abbreviated as long as the abbreviation\n"
"matches only one command, e.g. l == li == lis == list."
msgstr ""
"Можно использовать только начальные буквы имени команды,\n"
"если этих букв достаточно для определения команды.\n"
"Например, l, li и lis вызывают команду list."

#: ../roundup/admin.py:159
#, python-format
msgid ""
"\n"
"<tr><td valign=top><strong>%(name)s</strong></td>\n"
"    <td><tt>%(usage)s</tt><p>\n"
"<pre>"
msgstr ""

#: ../roundup/admin.py:170
msgid "</pre></td></tr>\n"
msgstr ""

# прошу прощения, не могу придумать, как по-русски называется
# backslash escape.  я написал "заэкранировать обратной косой чертой",
# но мне это совсем не нравится.
#  
# что лучше написать вместо "ввести с терминала"?
#: ../roundup/admin.py:173
msgid ""
"\n"
"All commands (except help) require a tracker specifier. This is just\n"
"the path to the roundup tracker you're working with. A roundup tracker\n"
"is where roundup keeps the database and configuration file that defines\n"
"an issue tracker. It may be thought of as the issue tracker's \"home\n"
"directory\". It may be specified in the environment variable TRACKER_HOME\n"
"or on the command line as \"-i tracker\".\n"
"\n"
"A designator is a classname and a nodeid concatenated, eg. bug1, "
"user10, ...\n"
"\n"
"Property values are represented as strings in command arguments and in the\n"
"printed results:\n"
" . Strings are, well, strings.\n"
" . Date values are printed in the full date format in the local time zone,\n"
"   and accepted in the full format or any of the partial formats explained\n"
"   below.\n"
" . Link values are printed as node designators. When given as an argument,\n"
"   node designators and key strings are both accepted.\n"
" . Multilink values are printed as lists of node designators joined\n"
"   by commas.  When given as an argument, node designators and key\n"
"   strings are both accepted; an empty string, a single node, or a list\n"
"   of nodes joined by commas is accepted.\n"
"\n"
"When property values must contain spaces, just surround the value with\n"
"quotes, either ' or \". A single space may also be backslash-quoted. If a\n"
"value must contain a quote character, it must be backslash-quoted or inside\n"
"quotes. Examples:\n"
"           hello world      (2 tokens: hello, world)\n"
"           \"hello world\"    (1 token: hello world)\n"
"           \"Roch'e\" Compaan (2 tokens: Roch'e Compaan)\n"
"           Roch\\'e Compaan  (2 tokens: Roch'e Compaan)\n"
"           address=\"1 2 3\"  (1 token: address=1 2 3)\n"
"           \\\\               (1 token: \\)\n"
"           \\n\\r\\t           (1 token: a newline, carriage-return and "
"tab)\n"
"\n"
"When multiple nodes are specified to the roundup get or roundup set\n"
"commands, the specified properties are retrieved or set on all the listed\n"
"nodes.\n"
"\n"
"When multiple results are returned by the roundup get or roundup find\n"
"commands, they are printed one per line (default) or joined by commas (with\n"
"the -c) option.\n"
"\n"
"Where the command changes data, a login name/password is required. The\n"
"login may be specified as either \"name\" or \"name:password\".\n"
" . ROUNDUP_LOGIN environment variable\n"
" . the -u command-line option\n"
"If either the name or password is not supplied, they are obtained from the\n"
"command-line.\n"
"\n"
"Date format examples:\n"
"  \"2000-04-17.03:45\" means <Date 2000-04-17.08:45:00>\n"
"  \"2000-04-17\" means <Date 2000-04-17.00:00:00>\n"
"  \"01-25\" means <Date yyyy-01-25.00:00:00>\n"
"  \"08-13.22:13\" means <Date yyyy-08-14.03:13:00>\n"
"  \"11-07.09:32:43\" means <Date yyyy-11-07.14:32:43>\n"
"  \"14:25\" means <Date yyyy-mm-dd.19:25:00>\n"
"  \"8:47:11\" means <Date yyyy-mm-dd.13:47:11>\n"
"  \".\" means \"right now\"\n"
"\n"
"Command help:\n"
msgstr ""
"\n"
"Все команды (кроме команды 'help') требуют указания трекера.\n"
"Вы должны сообщить имя каталога, в котором roundup хранит базу данных\n"
"и настроечный файл, описывающий конфигурацию трекера.  Этот каталог\n"
"называется \"домашним каталогом\" трекера.  Путь к этому каталогу может\n"
"задаваться переменной окружения TRACKER_HOME или ключом командной строки\n"
"\"-i <путь>\".\n"
"\n"
"Описатель объекта составляется из имени класса и идентификатора объекта\n"
"Например: bug1, user10 итп.\n"
"\n"
"Значения атрибутов в аргументах команды и при печати результатов\n"
"представляются строками:\n"
" . Строковые значения - строки и есть.\n"
" . Значения дат печатаются в местном часовом поясе, используя полное\n"
"   представление даты.  В аргументах команд даты могут указываться полным\n"
"   представлением или любым из нижеописанных частичных представлений.\n"
" . Значения ссылок (Link) печатаются в виде описателей объектов.\n"
"   В аргументах команд могут использоваться описатели объектов\n"
"   или значения ключевых атрибутов.\n"
" . Множественные ссылки (Multilink) печатаются в виде списка описателей\n"
"   объектов, через запятую.  В аргументах команд принимаются как описатели\n"
"   объектов, так и значения ключевых атрибутов; список ссылок может быть\n"
"   пустой строкой, обозначением (описателем или ключевым значением) объекта\n"
"   или списком обозначений, разделенных запятыми.\n"
"\n"
"Если в значениях атрибутов встречаются пробелы, такие значения должны быть\n"
"заключены в кавычки (одинарные или двойные - все равно).  Одиночный пробел\n"
"можно \"заэкранировать\" обратной косой чертой.  Если в значении "
"встречается\n"
"кавычка, она должна быть заэкранирована обратной косой чертой.  Примеры:\n"
"           hello world      (2 слова: hello, world)\n"
"           \"hello world\"    (1 слово: hello world)\n"
"           \"Roch'e\" Compaan (2 слова: Roch'e Compaan)\n"
"           Roch'e Compaan   (2 слова: Roch'e Compaan)\n"
"           address=\"1 2 3\"  (1 слово: address=1 2 3)\n"
"           \\\\               (1 слово: \\)\n"
"           \\n\\r\\t           (1 слово: перевод строки, возврат каретки и "
"табуляция)\n"
"\n"
"Если в команде get или set указаны несколько объектов, запрошенные атрибуты\n"
"будут выданы или уставновлены для каждого объекта в списке.\n"
"\n"
"Если команда get или find возврачает несколько результатов, они обычно\n"
"печатаются по одному в каждой строке.  Если указан ключ \"-c\", результаты\n"
"печатаются через запятую.\n"
"\n"
"Команды, изменяющие базу данных, требуют указания имени пользователя\n"
"и пароля.  Они могут быть указаны в виде \"имя\" или \"имя:пароль\":\n"
" . в переменной окружения ROUNDUP_LOGIN\n"
" . в параметре ключа командной строки \"-u\"\n"
"Если имя или пароль не указаны, программа попросит ввести их с терминала.\n"
"\n"
"Примеры записи дат:\n"
"  \"2000-04-17.03:45\" означает <Date 2000-04-17.08:45:00>\n"
"  \"2000-04-17\" означает <Date 2000-04-17.00:00:00>\n"
"  \"01-25\" означает <Date yyyy-01-25.00:00:00>\n"
"  \"08-13.22:13\" означает <Date yyyy-08-14.03:13:00>\n"
"  \"11-07.09:32:43\" означает <Date yyyy-11-07.14:32:43>\n"
"  \"14:25\" означает <Date yyyy-mm-dd.19:25:00>\n"
"  \"8:47:11\" означает <Date yyyy-mm-dd.13:47:11>\n"
"  \".\" означает \"сейчас\"\n"
"\n"
"Справка по командам:\n"

#: ../roundup/admin.py:236
#, python-format
msgid "%s:"
msgstr ""

#: ../roundup/admin.py:237
msgid "   "
msgstr ""

#: ../roundup/admin.py:241
msgid ""
"Usage: help topic\n"
"        Give help about topic.\n"
"\n"
"        commands  -- list commands\n"
"        <command> -- help specific to a command\n"
"        initopts  -- init command options\n"
"        all       -- all available help\n"
"        "
msgstr ""
"Вызов: help <тема>\n"
"        Выдать справку по указанной теме.\n"
"\n"
"        commands  -- список команд\n"
"        <команда> -- справка по указанной команде\n"
"        initopts  -- ключи команды 'init'\n"
"        all       -- все справки\n"
"        "

#: ../roundup/admin.py:264
#, python-format
msgid "Sorry, no help for \"%(topic)s\""
msgstr "Ивините, справка \"%(topic)s\" не существует."

#: ../roundup/admin.py:336 ../roundup/admin.py:382
msgid "Templates:"
msgstr "Шаблоны:"

#: ../roundup/admin.py:339 ../roundup/admin.py:393
msgid "Back ends:"
msgstr "Серверы:"

#: ../roundup/admin.py:342
msgid ""
"Usage: install [template [backend [admin password]]]\n"
"        Install a new Roundup tracker.\n"
"\n"
"        The command will prompt for the tracker home directory\n"
"        (if not supplied through TRACKER_HOME or the -i option).\n"
"        The template, backend and admin password may be specified\n"
"        on the command-line as arguments, in that order.\n"
"\n"
"        The initialise command must be called after this command in order\n"
"        to initialise the tracker's database. You may edit the tracker's\n"
"        initial database contents before running that command by editing\n"
"        the tracker's dbinit.py module init() function.\n"
"\n"
"        See also initopts help.\n"
"        "
msgstr ""
"Вызов: install [шаблон [сервер [пароль администратора]]]\n"
"        Установить новый трекер Roundup.\n"
"\n"
"        Вам надо будет указать \"домашний каталог\" трекера (если он\n"
"        не задан переменной окружения TRACKER_HOME или ключом командной\n"
"        строки '-i').  Шаблон трекера, тип базы данных и пароль\n"
"        администратора можно указать в параметрах командной строки\n"
"        или ввести в ответ на соответствующие подсказки программы.\n"
"\n"
"        После этой команды нужно вызвать команду 'initialise', чтобы\n"
"        создать базу данных трекера.  Вы можете предварительно изменить\n"
"        схему базы данных, которая описана в функции init() модуля\n"
"        dbinit.py.\n"
"\n"
"        См.также \"help initopts\".\n"
"        "

#: ../roundup/admin.py:358 ../roundup/admin.py:483 ../roundup/admin.py:562
#: ../roundup/admin.py:612 ../roundup/admin.py:665 ../roundup/admin.py:686
#: ../roundup/admin.py:714 ../roundup/admin.py:785 ../roundup/admin.py:852
#: ../roundup/admin.py:923 ../roundup/admin.py:971 ../roundup/admin.py:993
#: ../roundup/admin.py:1020 ../roundup/admin.py:1082 ../roundup/admin.py:1148
msgid "Not enough arguments supplied"
msgstr "Недостаточно аргументов"

#: ../roundup/admin.py:364
#, python-format
msgid "Instance home parent directory \"%(parent)s\" does not exist"
msgstr "Каталог \"%(parent)s\" не существует"

#: ../roundup/admin.py:369
#, python-format
msgid ""
"WARNING: There appears to be a tracker in \"%(tracker_home)s\"!\n"
"If you re-install it, you will lose all the data!\n"
"Erase it? Y/N: "
msgstr ""
"ВНИМАНИЕ: в каталоге \"%(tracker_home)s\" обнаружен существующий трекер!\n"
"Повторная установка уничтожит все ваши данные!\n"
"Удалить существующий трекер? Y/N: "

#: ../roundup/admin.py:384
msgid "Select template [classic]: "
msgstr "Выберите шаблон [classic]: "

#: ../roundup/admin.py:395
msgid "Select backend [anydbm]: "
msgstr "Выберите сервер [anydbm]: "

# Указано английское название документа
#: ../roundup/admin.py:404
#, python-format
msgid ""
"\n"
" You should now edit the tracker configuration file:\n"
"   %(config_file)s\n"
" ... at a minimum, you must set MAILHOST, TRACKER_WEB, MAIL_DOMAIN and\n"
" ADMIN_EMAIL.\n"
"\n"
" If you wish to modify the default schema, you should also edit\n"
" the database initialisation file:\n"
"   %(database_config_file)s\n"
" ... see the documentation on customizing for more information.\n"
msgstr ""
"\n"
" Теперь вам нужно исправить настроечный файл трекера:\n"
"   %(config_file)s\n"
" Необходимо указать правильные значения параметров MAILHOST,\n"
" TRACKER_WEB, MAIL_DOMAIN и ADMIN_EMAIL.\n"
"\n"
" Если вы хотите изменить стандартную схему базы данных,\n"
" внесите изменения в файл конфигурации базы:\n"
"   %(database_config_file)s\n"
" О том, как это делать, рассказано в документе \"Customising Roundup\".\n"

#  password
#. password
#: ../roundup/admin.py:422
msgid ""
"Usage: initialise [adminpw]\n"
"        Initialise a new Roundup tracker.\n"
"\n"
"        The administrator details will be set at this step.\n"
"\n"
"        Execute the tracker's initialisation function dbinit.init()\n"
"        "
msgstr ""
"Вызов: initialise [пароль]\n"
"        Проинициализировать новый трекер Roundup.\n"
"\n"
"        На этом шаге заполняется учетная карточка администратора.\n"
"\n"
"        Инициализация трекера делается функцией dbinit.init()\n"
"        "

#: ../roundup/admin.py:436
msgid "Admin Password: "
msgstr "Пароль администратора: "

#: ../roundup/admin.py:437
msgid "       Confirm: "
msgstr "              Еще раз: "

#: ../roundup/admin.py:441
msgid "Instance home does not exist"
msgstr "Домашний каталог трекера не существует"

#: ../roundup/admin.py:445
msgid "Instance has not been installed"
msgstr "Трекер не установлен"

#: ../roundup/admin.py:455
msgid ""
"WARNING: The database is already initialised!\n"
"If you re-initialise it, you will lose all the data!\n"
"Erase it? Y/N: "
msgstr ""
"ВНИМАНИЕ: база данных уже была проинициализирована!\n"
"Повторная инициализация уничтожит все ваши данные!\n"
"Удалить существующую базу? Y/N: "

#: ../roundup/admin.py:476
msgid ""
"Usage: get property designator[,designator]*\n"
"        Get the given property of one or more designator(s).\n"
"\n"
"        Retrieves the property value of the nodes specified\n"
"        by the designators.\n"
"        "
msgstr ""
"Вызов: get атрибут описатель[,описатель]*\n"
"        Получить значение указанного атрибута одного или нескольких\n"
"        объектов.\n"
"\n"
"        Выдает значение указанного атрибута для всех объектов,\n"
"        перечисленных в списке описателей.\n"
"        "

#: ../roundup/admin.py:516 ../roundup/admin.py:531
#, python-format
msgid "property %s is not of type Multilink or Link so -d flag does not apply."
msgstr ""
"Ключ '-d' неприменим, потому что тип атрибута %s - не Link и не Multilink"

#: ../roundup/admin.py:539 ../roundup/admin.py:934 ../roundup/admin.py:983
#: ../roundup/admin.py:1005
#, python-format
msgid "no such %(classname)s node \"%(nodeid)s\""
msgstr "В классе %(classname)s нет объекта \"%(nodeid)s\""

#: ../roundup/admin.py:541
#, python-format
msgid "no such %(classname)s property \"%(propname)s\""
msgstr "У класса %(classname)s нет атрибута \"%(propname)s\""

#: ../roundup/admin.py:550
msgid ""
"Usage: set items property=value property=value ...\n"
"        Set the given properties of one or more items(s).\n"
"\n"
"        The items are specified as a class or as a comma-separated\n"
"        list of item designators (ie \"designator[,designator,...]\").\n"
"\n"
"        This command sets the properties to the values for all designators\n"
"        given. If the value is missing (ie. \"property=\") then the "
"property\n"
"        is un-set. If the property is a multilink, you specify the linked\n"
"        ids for the multilink as comma-separated numbers (ie \"1,2,3\").\n"
"        "
msgstr ""
"Вызов: set items атрибут=значение атрибут=значение ...\n"
"        Установить указанные атрибуты одного или нескольких объектов.\n"
"\n"
"        Объекты задаются именем класса или списком описателей, разделенных\n"
"        запятыми.  (Например, \"user1,user5\".)\n"
"\n"
"        Эта команда присваивает указанные значения атрибутам всех указанных\n"
"        объектов.  Если значение не указано (т.е. указано \"атрибут=\"),\n"
"        атрибут очищается.  Если атрибут является списком ссылок на объекты\n"
"        другого класса (Multilink), в значении должны быть через запятую\n"
"        перечислены идентификаторы объектов, на которые ссылается этот\n"
"        атрибут.  (Например, \"1,2,3\".)\n"
"        "

#: ../roundup/admin.py:604
msgid ""
"Usage: find classname propname=value ...\n"
"        Find the nodes of the given class with a given link property value.\n"
"\n"
"        Find the nodes of the given class with a given link property value.\n"
"        The value may be either the nodeid of the linked node, or its key\n"
"        value.\n"
"        "
msgstr ""
"Вызов: find класс атрибут=значение ...\n"
"        Найти объекты класса с данным значением ссылочного атрибута.\n"
"\n"
"        Найти объекты указанного класса с данным значением ссылочного\n"
"        атрибута.  Значение может быть идентификатором объекта, на\n"
"        который ссылается атрибут, или ключом этого объекта.\n"
"        "

#: ../roundup/admin.py:652 ../roundup/admin.py:805 ../roundup/admin.py:817
#: ../roundup/admin.py:871
#, python-format
msgid "%(classname)s has no property \"%(propname)s\""
msgstr "Класс %(classname)s не имеет атрибута \"%(propname)s\""

#: ../roundup/admin.py:659
msgid ""
"Usage: specification classname\n"
"        Show the properties for a classname.\n"
"\n"
"        This lists the properties for a given class.\n"
"        "
msgstr ""
"Вызов: specification класс\n"
"        Показать атрибуты класса.\n"
"\n"
"        Выдает список атрибутов указанного класса.\n"
"        "

#: ../roundup/admin.py:674
#, python-format
msgid "%(key)s: %(value)s (key property)"
msgstr "%(key)s: %(value)s (ключевой атрибут)"

#: ../roundup/admin.py:676
#, python-format
msgid "%(key)s: %(value)s"
msgstr ""

#: ../roundup/admin.py:679
msgid ""
"Usage: display designator[,designator]*\n"
"        Show the property values for the given node(s).\n"
"\n"
"        This lists the properties and their associated values for the given\n"
"        node.\n"
"        "
msgstr ""
"Вызов: display описатель[,описатель]*\n"
"        Показать значения атрибутов указанных объектов.\n"
"\n"
"        Выдает список атрибутов и их значений для объектов,\n"
"        заданных описателями.\n"
"        "

#: ../roundup/admin.py:703
#, python-format
msgid "%(key)s: %(value)r"
msgstr ""

#: ../roundup/admin.py:706
msgid ""
"Usage: create classname property=value ...\n"
"        Create a new entry of a given class.\n"
"\n"
"        This creates a new entry of the given class using the property\n"
"        name=value arguments provided on the command line after the \"create"
"\"\n"
"        command.\n"
"        "
msgstr ""
"Вызов: create класс атрибут=значение ...\n"
"        Создать новый объект указанного класса.\n"
"\n"
"        Создает новый объект указанного класса и заполняет атрибуты\n"
"        этого объекта указанными значениями.\n"
"        "

#: ../roundup/admin.py:733
#, python-format
msgid "%(propname)s (Password): "
msgstr " %(propname)s (пароль): "

#: ../roundup/admin.py:735
#, python-format
msgid "   %(propname)s (Again): "
msgstr "%(propname)s (еще раз): "

#: ../roundup/admin.py:737
msgid "Sorry, try again..."
msgstr "Пароли не совпали.  Попробуйте еще раз."

#: ../roundup/admin.py:741
#, python-format
msgid "%(propname)s (%(proptype)s): "
msgstr ""

#: ../roundup/admin.py:759
#, python-format
msgid "you must provide the \"%(propname)s\" property."
msgstr "Атрибут \"%(propname)s\" должен быть заполнен."

#: ../roundup/admin.py:770
msgid ""
"Usage: list classname [property]\n"
"        List the instances of a class.\n"
"\n"
"        Lists all instances of the given class. If the property is not\n"
"        specified, the  \"label\" property is used. The label property is\n"
"        tried in order: the key, \"name\", \"title\" and then the first\n"
"        property, alphabetically.\n"
"\n"
"        With -c, -S or -s print a list of item id's if no property\n"
"        specified.  If property specified, print list of that property\n"
"        for every class instance.\n"
"        "
msgstr ""
"Вызов: list класс [атрибут]\n"
"        Выдать список объектов класса.\n"
"\n"
"        Печатает список всех объектов указанного класса.\n"
"        Если атрибут не указан, используется \"титульный\" атрибут.\n"
"        В качестве \"титульного\" атрибута используется первый найденный\n"
"        из следующих атрибутов: ключ, \"name\", \"title\" или первый\n"
"        из атрибутов класса в алфавитном порядке.\n"
"\n"
"        С ключами -c, -S или -s, если не указано имя атрибута, печатает\n"
"        список идентификаторов объектов.  Если имя атрибута указано,\n"
"        выдает список значений этого атрибута.\n"
"        "

#: ../roundup/admin.py:783
msgid "Too many arguments supplied"
msgstr "Подано слишком много параметров"

#: ../roundup/admin.py:819
#, python-format
msgid "%(nodeid)4s: %(value)s"
msgstr ""

#: ../roundup/admin.py:823
msgid ""
"Usage: table classname [property[,property]*]\n"
"        List the instances of a class in tabular form.\n"
"\n"
"        Lists all instances of the given class. If the properties are not\n"
"        specified, all properties are displayed. By default, the column\n"
"        widths are the width of the largest value. The width may be\n"
"        explicitly defined by defining the property as \"name:width\".\n"
"        For example::\n"
"\n"
"          roundup> table priority id,name:10\n"
"          Id Name\n"
"          1  fatal-bug\n"
"          2  bug\n"
"          3  usability\n"
"          4  feature\n"
"\n"
"        Also to make the width of the column the width of the label,\n"
"        leave a trailing : without a width on the property. For example::\n"
"\n"
"          roundup> table priority id,name:\n"
"          Id Name\n"
"          1  fata\n"
"          2  bug\n"
"          3  usab\n"
"          4  feat\n"
"\n"
"        will result in a the 4 character wide \"Name\" column.\n"
"        "
msgstr ""
"Вызов: table класс [атрибут[,атрибут]*]\n"
"        Получить список объектов класса в виде таблицы.\n"
"\n"
"        Выдает список всех объектов указанного класса.  Если список\n"
"        атрибутов не указан, печатает все атрибуты.  По умолчанию,\n"
"        столбцы имеют ширину самого длинного значения в этом столбце.\n"
"        Можно явно указывать ширины столбцов в виде \"атрибут:ширина\".\n"
"        Например::\n"
"\n"
"          roundup> table priority id,name:10\n"
"          Id Name\n"
"          1  fatal-bug\n"
"          2  bug\n"
"          3  usability\n"
"          4  feature\n"
"\n"
"        Для того, чтобы столбец имел ширину заголовка, нужно к имени\n"
"        атрибута добавить двоеточие, но не указывать ширину.  Например::\n"
"\n"
"          roundup> table priority id,name:\n"
"          Id Name\n"
"          1  fata\n"
"          2  bug\n"
"          3  usab\n"
"          4  feat\n"
"\n"
"        обрезает значения столбца \"Name\" до четырех символов.\n"
"        "

#: ../roundup/admin.py:867
#, python-format
msgid "\"%(spec)s\" not name:width"
msgstr "Значение \"%(spec)s\" должно быть задано как имя:ширина"

#: ../roundup/admin.py:917
msgid ""
"Usage: history designator\n"
"        Show the history entries of a designator.\n"
"\n"
"        Lists the journal entries for the node identified by the "
"designator.\n"
"        "
msgstr ""
"Вызов: history описатель\n"
"        Показать историю объекта.\n"
"\n"
"        Выдает список протокольных сообщений для объекта,\n"
"        заданного описателем.\n"
"        "

#: ../roundup/admin.py:938
msgid ""
"Usage: commit\n"
"        Commit changes made to the database during an interactive session.\n"
"\n"
"        The changes made during an interactive session are not\n"
"        automatically written to the database - they must be committed\n"
"        using this command.\n"
"\n"
"        One-off commands on the command-line are automatically committed if\n"
"        they are successful.\n"
"        "
msgstr ""
"Вызов: commit\n"
"        Сохранить изменения базы данных, сделанные в интерактивном режиме.\n"
"\n"
"        Изменения, внесенные в интерактивном режиме, не записываются в базу\n"
"        данных автоматически.  Они должны быть принудительно сохранены\n"
"        при помощи этой команды.\n"
"\n"
"        Результаты выполнения командной строки записываются в базу данных\n"
"        автоматически, если при выполнении команды не произошло ошибки.\n"
"        "

#: ../roundup/admin.py:952
msgid ""
"Usage: rollback\n"
"        Undo all changes that are pending commit to the database.\n"
"\n"
"        The changes made during an interactive session are not\n"
"        automatically written to the database - they must be committed\n"
"        manually. This command undoes all those changes, so a commit\n"
"        immediately after would make no changes to the database.\n"
"        "
msgstr ""
"Вызов: rollback\n"
"        Отменить изменения базы данных, сделанные в интерактивном режиме.\n"
"\n"
"        Изменения, внесенные в интерактивном режиме, не записываются в базу\n"
"        данных автоматически.  Они должны быть принудительно сохранены\n"
"        при помощи команды commit.  Команда rollback отменяет все эти\n"
"        изменения, так что база данных возвращается в состояние, которое\n"
"        было в момент последней записи.\n"
"        "

#: ../roundup/admin.py:964
msgid ""
"Usage: retire designator[,designator]*\n"
"        Retire the node specified by designator.\n"
"\n"
"        This action indicates that a particular node is not to be retrieved\n"
"        by the list or find commands, and its key value may be re-used.\n"
"        "
msgstr ""
"Вызов: retire описатель[,описатель]*\n"
"        Удалить указанные объекты.\n"
"\n"
"        Эта команда помечает указанные объекты как удаленные.\n"
"        Удаленные объекты не показываются в списках, выдаваемых\n"
"        командами list и find, и их ключевые значения могут быть\n"
"        использованы в других объектах.\n"
"        "

#: ../roundup/admin.py:987
msgid ""
"Usage: restore designator[,designator]*\n"
"        Restore the retired node specified by designator.\n"
"\n"
"        The given nodes will become available for users again.\n"
"        "
msgstr ""
"Вызов: restore описатель[,описатель]*\n"
"        Восстановить удаленные объекты.\n"
"\n"
"        С заданных объектов снимается пометка удаления, и этими объектами\n"
"        можно пользоваться снова.\n"
"        "

#. grab the directory to export to
#: ../roundup/admin.py:1009
msgid ""
"Usage: export [class[,class]] export_dir\n"
"        Export the database to colon-separated-value files.\n"
"\n"
"        Optionally limit the export to just the names classes.\n"
"\n"
"        This action exports the current data from the database into\n"
"        colon-separated-value files that are placed in the nominated\n"
"        destination directory.\n"
"        "
msgstr ""
"Вызов: export [класс[,класс]] каталог\n"
"        Экспортировать базу данных в текстовые файлы.\n"
"\n"
"        Если список классов не задан, экспортируются все классы\n"
"        базы данных.\n"
"\n"
"        Эта команда экспортирует данные из базы трекера в текстовые файлы\n"
"        в указанном каталоге.  Для каждого экспортируемого класса создается\n"
"        отдельный экспортный файл.  Для каждого объекта класса создается\n"
"        строка экспортного файла.  Значения атрибутов разделяются\n"
"        двоеточиями.\n"
"        "

#: ../roundup/admin.py:1062
msgid ""
"Usage: import import_dir\n"
"        Import a database from the directory containing CSV files,\n"
"        two per class to import.\n"
"\n"
"        The files used in the import are:\n"
"\n"
"        <class>.csv\n"
"          This must define the same properties as the class (including\n"
"          having a \"header\" line with those property names.)\n"
"        <class>-journals.csv\n"
"          This defines the journals for the items being imported.\n"
"\n"
"        The imported nodes will have the same nodeid as defined in the\n"
"        import file, thus replacing any existing content.\n"
"\n"
"        The new nodes are added to the existing database - if you want to\n"
"        create a new database using the imported data, then create a new\n"
"        database (or, tediously, retire all the old data.)\n"
"        "
msgstr ""
"Вызов: import каталог\n"
"        Импортировать базу данных из каталога, содержащего файлы\n"
"        в формате CSV (Comma Separated Values), по два файла на класс.\n"
"\n"
"        В импорте участвуют следующие файлы:\n"
"\n"
"        <класс>.csv\n"
"          Этот файл должен содержать данные класса (с указанием имен\n"
"          атрибутов в первой строке.)\n"
"        <класс>-journals.csv\n"
"          Содержит протоколы изменений объектов класса.\n"
"\n"
"        Импортируемые объекты имеют идентификаторы, указанные в\n"
"        импортном файле и замещают объекты с такими же идентификаторами,\n"
"        существующие в базе данных.\n"
"\n"
"        Новые объекты добавляются к существующей базе данных.\n"
"        Если вы хотите заполнить базу только импортируемыми объектами,\n"
"        вам нужно создать новую базу данных (или, если не лень, удалить\n"
"        из существующей базы все объекты).\n"
"        "

#: ../roundup/admin.py:1130
msgid ""
"Usage: pack period | date\n"
"\n"
"        Remove journal entries older than a period of time specified or\n"
"        before a certain date.\n"
"\n"
"        A period is specified using the suffixes \"y\", \"m\", and \"d\". "
"The\n"
"        suffix \"w\" (for \"week\") means 7 days.\n"
"\n"
"              \"3y\" means three years\n"
"              \"2y 1m\" means two years and one month\n"
"              \"1m 25d\" means one month and 25 days\n"
"              \"2w 3d\" means two weeks and three days\n"
"\n"
"        Date format is \"YYYY-MM-DD\" eg:\n"
"            2001-01-01\n"
"\n"
"        "
msgstr ""
"Вызов: pack период | дата\n"
"\n"
"        Удалить протокольные сообщения, хранящиеся дольше указанного\n"
"        периода или созданные до указанной даты.\n"
"\n"
"        Период задается числами, к которым добавлены буквы \"y\"\n"
"        (year - год), \"m\" (month - месяц), \"d\" (day - день)\n"
"        или \"w\" (week - неделя, семь дней).\n"
"\n"
"              \"3y\" означает три года\n"
"              \"2y 1m\" означает два года и один месяц\n"
"              \"1m 25d\" означает один месяц и 25 дней\n"
"              \"2w 3d\" означает две недели и три дня\n"
"\n"
"        Дата задается в формате \"YYYY-MM-DD\", например:\n"
"            2001-01-01\n"
"\n"
"        "

#: ../roundup/admin.py:1158
msgid "Invalid format"
msgstr "Неправильный формат"

#: ../roundup/admin.py:1168
msgid ""
"Usage: reindex\n"
"        Re-generate a tracker's search indexes.\n"
"\n"
"        This will re-generate the search indexes for a tracker.\n"
"        This will typically happen automatically.\n"
"        "
msgstr ""
"Вызов: reindex\n"
"        Переиндексировать базу данных.\n"
"\n"
"        Эта команда перестраивает индексы, используемые для поиска в базе\n"
"        данных.  Обычно построение индексов происходит автоматически.\n"
"        "

#: ../roundup/admin.py:1179
msgid ""
"Usage: security [Role name]\n"
"        Display the Permissions available to one or all Roles.\n"
"        "
msgstr ""
"Вызов: security [роль]\n"
"        Показать права, выданные указанной роли или всем существующим\n"
"        ролям.\n"
"        "

#: ../roundup/admin.py:1187
#, python-format
msgid "No such Role \"%(role)s\""
msgstr "Роль \"%(role)s\" не существует"

#: ../roundup/admin.py:1193
#, python-format
msgid "New Web users get the Roles \"%(role)s\""
msgstr "Новые пользователи web получают роли \"%(role)s\""

#: ../roundup/admin.py:1195
#, python-format
msgid "New Web users get the Role \"%(role)s\""
msgstr "Новые пользователи web получают роль \"%(role)s\""

#: ../roundup/admin.py:1198
#, python-format
msgid "New Email users get the Roles \"%(role)s\""
msgstr "Новые пользователи email получают роли \"%(role)s\""

#: ../roundup/admin.py:1200
#, python-format
msgid "New Email users get the Role \"%(role)s\""
msgstr "Новые пользователи email получают роль \"%(role)s\""

#: ../roundup/admin.py:1203
#, python-format
msgid "Role \"%(name)s\":"
msgstr "Роль \"%(name)s\":"

#: ../roundup/admin.py:1206
#, python-format
msgid " %(description)s (%(name)s for \"%(klass)s\" only)"
msgstr " %(description)s (%(name)s только для класса \"%(klass)s\")"

#: ../roundup/admin.py:1209
#, python-format
msgid " %(description)s (%(name)s)"
msgstr ""

#: ../roundup/admin.py:1235
#, python-format
msgid "Unknown command \"%(command)s\" (\"help commands\" for a list)"
msgstr ""
"Команда \"%(command)s\" неизвестна. (\"help commands\" выдает список команд)"

#: ../roundup/admin.py:1241
#, python-format
msgid "Multiple commands match \"%(command)s\": %(list)s"
msgstr "\"%(command)s\" соответствует нескольким командам: %(list)s"

#: ../roundup/admin.py:1248
msgid "Enter tracker home: "
msgstr "Домашний каталог трекера: "

#: ../roundup/admin.py:1255 ../roundup/admin.py:1261 ../roundup/admin.py:1281
#, python-format
msgid "Error: %(message)s"
msgstr "Ошибка: %(message)s"

#: ../roundup/admin.py:1269
#, python-format
msgid "Error: Couldn't open tracker: %(message)s"
msgstr "Ошибка: Трекер не открывается: %(message)s"

#: ../roundup/admin.py:1294
#, python-format
msgid ""
"Roundup %s ready for input.\n"
"Type \"help\" for help."
msgstr ""
"Roundup %s к вашим услугам.\n"
"Введите \"help\" для справки."

#: ../roundup/admin.py:1299
msgid "Note: command history and editing not available"
msgstr "Примечание: работает редактор и история команд"

#: ../roundup/admin.py:1303
msgid "roundup> "
msgstr ""

#: ../roundup/admin.py:1305
msgid "exit..."
msgstr "приходите к нам еще..."

#: ../roundup/admin.py:1315
msgid "There are unsaved changes. Commit them (y/N)? "
msgstr "Ой, тут несохраненные изменения. Записать в базу данных (y/N)? "

#: ../roundup/cgi/actions.py:53
#, python-format
msgid "You do not have permission to %(action)s the %(classname)s class."
msgstr "У вас нет разрешения %(action)s для класса %(classname)s."

#: ../roundup/cgi/actions.py:79
msgid "No type specified"
msgstr "Не указан тип"

#: ../roundup/cgi/actions.py:81
msgid "No ID entered"
msgstr "Не указан идентификатор"

#: ../roundup/cgi/actions.py:87
#, python-format
msgid "\"%(input)s\" is not an ID (%(classname)s ID required)"
msgstr ""
"\"%(input)s\" - не идентификатор (требуется идентификатор класса %(classname)"
"s)"

#: ../roundup/cgi/actions.py:107
msgid "You may not retire the admin or anonymous user"
msgstr "Нельзя удалять пользователей admin и anonymous."

#: ../roundup/cgi/actions.py:114
#, python-format
msgid "%(classname)s %(itemid)s has been retired"
msgstr "%(classname)s %(itemid)s удален"

#: ../roundup/cgi/actions.py:269
#, python-format
msgid "Not enough values on line %(line)s"
msgstr "В строке %(line)s не хватает значений"

#: ../roundup/cgi/actions.py:316
msgid "Items edited OK"
msgstr "Объекты изменены успешно"

#: ../roundup/cgi/actions.py:335
msgid "You do not have permission to edit user roles"
msgstr "У вас нет разрешения на изменение ролей пользователей"

#: ../roundup/cgi/actions.py:515
#, python-format
msgid "Edit Error: %s"
msgstr "Ошибка редактирования: %s"

#: ../roundup/cgi/actions.py:546 ../roundup/cgi/actions.py:556
#, python-format
msgid "Error: %s"
msgstr "Ошибка: %s"

#: ../roundup/cgi/actions.py:695
msgid "You are now registered, welcome!"
msgstr "Вы зарегистрированы.  Добро пожаловать!"

#: ../roundup/cgi/actions.py:722
msgid "It is not permitted to supply roles at registration."
msgstr "Нельзя указывать роли при регистрации"

#: ../roundup/cgi/actions.py:727
#, python-format
msgid "Error: A user with the username \"%(username)s\" already exists"
msgstr "Ошибка: Имя \"%(username)s\" уже занято"

#: ../roundup/cgi/actions.py:790
msgid "You are logged out"
msgstr "Сеанс работы завершен"

#: ../roundup/cgi/actions.py:801
msgid "Username required"
msgstr "Не указано имя пользователя"

#: ../roundup/cgi/actions.py:816
#, python-format
msgid "No such user \"%(name)s\""
msgstr "Пользователь \"%(name)s\" не существует"

#: ../roundup/cgi/actions.py:824
msgid "Incorrect password"
msgstr "Неправильный пароль"

#: ../roundup/cgi/actions.py:832
msgid "You do not have permission to login"
msgstr "У вас нет разрешения на работу с системой"

#: ../roundup/cgi/cgitb.py:93
msgid ""
"<p>A problem occurred while running a Python script. Here is the sequence of "
"function calls leading up to the error, with the most recent (innermost) "
"call first. The exception attributes are:"
msgstr ""
"<p>При выполнении программы произошла ошибка.  Ниже приведена "
"последовательность вызовов функций, которая привела к ошибке.  Функция, в "
"которой произошла ошибка, - последняя вызванная функция - показана первой.  "
"Информация об ошибке:"

#: ../roundup/cgi/cgitb.py:145 ../roundup/cgi/cgitb.py:151
msgid "<em>undefined</em>"
msgstr "<em>неопределено</em>"

#: ../roundup/cgi/client.py:274
msgid "Form Error: "
msgstr "Ошибка формы: "

#: ../roundup/cgi/client.py:324
#, python-format
msgid "Unrecognized charset: %r"
msgstr "Кодировка %r не распознана"

#: ../roundup/cgi/form_parser.py:283
#, python-format
msgid "link \"%(key)s\" value \"%(value)s\" not a designator"
msgstr "Значение \"%(value)s ссылки \"%(key)s\" не указывает на объект"

#: ../roundup/cgi/form_parser.py:290
#, python-format
msgid "%(class)s %(property)s is not a link or multilink property"
msgstr "Атрибут %(property)s класса %(class)s не является ссылочным"

#: ../roundup/cgi/form_parser.py:312
#, python-format
msgid ""
"You have submitted a %(action)s action for the property \"%(property)s\" "
"which doesn't exist"
msgstr ""
"Вы запросили действие \"%(action)s\" для атрибута \"%(property)s\", который "
"не существует"

#: ../roundup/cgi/form_parser.py:331 ../roundup/cgi/form_parser.py:357
#, python-format
msgid "You have submitted more than one value for the %s property"
msgstr "Вы ввели несколько значений для атрибута %s"

# ../roundup/cgi/form_parser.py:354 :360
#: ../roundup/cgi/form_parser.py:354 ../roundup/cgi/form_parser.py:360
msgid "Password and confirmation text do not match"
msgstr "Пароли не совпали"

#: ../roundup/cgi/form_parser.py:395
#, python-format
msgid "property \"%(propname)s\": \"%(value)s\" not currently in list"
msgstr "атрибут \"%(propname)s\": значение \"%(value)s\" отсутствует в списке"

#: ../roundup/cgi/form_parser.py:509
#, python-format
msgid "Required %(class)s property %(property)s not supplied"
msgid_plural "Required %(class)s properties %(property)s not supplied"
msgstr[0] "Обязательный атрибут %(property)s класса %(class)s не заполнен"
msgstr[1] "Обязательные атрибуты %(property)s класса %(class)s не заполнены"
msgstr[2] "Обязательные атрибуты %(property)s класса %(class)s не заполнены"

#: ../roundup/cgi/form_parser.py:529
msgid "File is empty"
msgstr "Файл пуст"

#: ../roundup/cgi/templating.py:98
#, python-format
msgid "You are not allowed to %(action)s items of class %(class)s"
msgstr "У вас нет разрешения %(action)s для класса %(class)s"

#: ../roundup/cgi/templating.py:649
msgid "(list)"
msgstr "(список)"

#: ../roundup/cgi/templating.py:677
msgid "Submit New Entry"
msgstr "Добавить"

#: ../roundup/cgi/templating.py:689
msgid "New node - no history"
msgstr "Новая карточка - нет истории"

#: ../roundup/cgi/templating.py:770
msgid "Submit Changes"
msgstr "Изменить"

#: ../roundup/cgi/templating.py:791
msgid "History"
msgstr "История"

#: ../roundup/cgi/templating.py:793
msgid "<th>Date</th>"
msgstr "<th>Дата</th>"

#: ../roundup/cgi/templating.py:794
msgid "<th>User</th>"
msgstr "<th>Пользователь</th>"

#: ../roundup/cgi/templating.py:795
msgid "<th>Action</th>"
msgstr "<th>Действие</th>"

#: ../roundup/cgi/templating.py:796
msgid "<th>Args</th>"
msgstr "<th>Параметры</th>"

#: ../roundup/cgi/templating.py:858
msgid "<em>The indicated property no longer exists</em>"
msgstr "<em>Указанный атрибут уже не существует.</em>"

#: ../roundup/cgi/templating.py:859
#, python-format
msgid "<em>%s: %s</em>\n"
msgstr ""

#: ../roundup/cgi/templating.py:872
#, python-format
msgid "The linked class %(classname)s no longer exists"
msgstr "Связянный класс %(classname)s уже не существует"

# :823
#: ../roundup/cgi/templating.py:905 ../roundup/cgi/templating.py:926
msgid "<strike>The linked node no longer exists</strike>"
msgstr "<strike>Связанный объект уже не существует</strike>"

#: ../roundup/cgi/templating.py:986
msgid ""
"<strong><em>This event is not handled by the history display!</em></strong>"
msgstr "<strong><em>Неизвестный тип события!</em></strong>"

#: ../roundup/cgi/templating.py:998
msgid "<tr><td colspan=4><strong>Note:</strong></td></tr>"
msgstr "<tr><td colspan=4><strong>Примечание:</strong></td></tr>"

#: ../roundup/cgi/templating.py:1279
msgid "*encrypted*"
msgstr "*зашифрован*"

#: ../roundup/cgi/templating.py:1444
msgid ""
"default value for DateHTMLProperty must be either DateHTMLProperty or string "
"date representation."
msgstr ""
"значение по умолчанию для DateHTMLProperty должно быть объектом "
"DateHTMLProperty или строковым представлением даты."

#: ../roundup/cgi/templating.py:1631
#, python-format
msgid "<option %svalue=\"-1\">- no selection -</option>"
msgstr "<option %svalue=\"-1\">- не указано -</option>"

#: ../roundup/date.py:167
#, python-format
msgid "Not a date spec: %s"
msgstr "Дата должна быть в формате %s"

#: ../roundup/date.py:218
#, python-format
msgid "%r not a date spec (%s)"
msgstr "%r не соответствует формату даты (%s)"

#: ../roundup/date.py:506
msgid ""
"Not an interval spec: [+-] [#y] [#m] [#w] [#d] [[[H]H:MM]:SS] [date spec]"
msgstr ""
"Интервал должен быть в формате [+-] [#y] [#m] [#w] [#d] [[[H]H:MM]:SS] [дата]"

#: ../roundup/date.py:525
msgid "Not an interval spec: [+-] [#y] [#m] [#w] [#d] [[[H]H:MM]:SS]"
msgstr "Интервал должен быть в формате [+-] [#y] [#m] [#w] [#d] [[[H]H:MM]:SS]"

#: ../roundup/date.py:662
#, python-format
msgid "%(number)s year"
msgid_plural "%(number)s years"
msgstr[0] "%(number)s год"
msgstr[1] "%(number)s года"
msgstr[2] "%(number)s лет"

#: ../roundup/date.py:666
#, python-format
msgid "%(number)s month"
msgid_plural "%(number)s months"
msgstr[0] "%(number)s месяц"
msgstr[1] "%(number)s месяца"
msgstr[2] "%(number)s месяцев"

#: ../roundup/date.py:670
#, python-format
msgid "%(number)s week"
msgid_plural "%(number)s weeks"
msgstr[0] "%(number)s неделя"
msgstr[1] "%(number)s недели"
msgstr[2] "%(number)s недель"

#: ../roundup/date.py:674
#, python-format
msgid "%(number)s day"
msgid_plural "%(number)s days"
msgstr[0] "%(number)s день"
msgstr[1] "%(number)s дня"
msgstr[2] "%(number)s дней"

#: ../roundup/date.py:678
msgid "tomorrow"
msgstr "завтра"

#: ../roundup/date.py:680
msgid "yesterday"
msgstr "вчера"

#: ../roundup/date.py:683
#, python-format
msgid "%(number)s hour"
msgid_plural "%(number)s hours"
msgstr[0] "%(number)s час"
msgstr[1] "%(number)s часа"
msgstr[2] "%(number)s часов"

#: ../roundup/date.py:687
msgid "an hour"
msgstr "час"

#: ../roundup/date.py:689
msgid "1 1/2 hours"
msgstr "полтора часа"

# third form ain't used
#: ../roundup/date.py:691
#, python-format
msgid "1 %(number)s/4 hours"
msgid_plural "1 %(number)s/4 hours"
msgstr[0] "час с четвертью"
msgstr[1] "час и %(number)s четверти"
msgstr[2] "час и %(number)s четвертей"

#: ../roundup/date.py:695
msgid "in a moment"
msgstr "сейчас"

#: ../roundup/date.py:697
msgid "just now"
msgstr "только что"

# используется в выражениях "через минуту" или "минуту назад"
#: ../roundup/date.py:700
msgid "1 minute"
msgstr "минуту"

# используется в выражениях "через 2 минуты" или "2 минуты назад"
#: ../roundup/date.py:703
#, python-format
msgid "%(number)s minute"
msgid_plural "%(number)s minutes"
msgstr[0] "%(number)s минуту"
msgstr[1] "%(number)s минуты"
msgstr[2] "%(number)s минут"

#: ../roundup/date.py:706
msgid "1/2 an hour"
msgstr "полчаса"

#: ../roundup/date.py:708
#, python-format
msgid "%(number)s/4 hour"
msgid_plural "%(number)s/4 hours"
msgstr[0] "четверть часа"
msgstr[1] "%(number)s четверти часа"
msgstr[2] "%(number)s четвертей часа"

#: ../roundup/date.py:712
#, python-format
msgid "%s ago"
msgstr "%s назад"

#: ../roundup/date.py:714
#, python-format
msgid "in %s"
msgstr "через %s"

#: ../roundup/roundupdb.py:119
msgid "files"
msgstr "файлы"

#: ../roundup/roundupdb.py:119
msgid "messages"
msgstr "сообщения"

#: ../roundup/roundupdb.py:119
msgid "nosy"
msgstr "извещения"

#: ../roundup/roundupdb.py:119
msgid "superseder"
msgstr "замещение"

#: ../roundup/roundupdb.py:119
msgid "title"
msgstr "заглавие"

#: ../roundup/roundupdb.py:120
msgid "assignedto"
msgstr "назначено"

#: ../roundup/roundupdb.py:120
msgid "priority"
msgstr "приоритет"

#: ../roundup/roundupdb.py:120
msgid "status"
msgstr "статус"

#: ../roundup/roundupdb.py:120
msgid "topic"
msgstr "тема"

#: ../roundup/scripts/roundup_mailgw.py:36
#, python-format
msgid ""
"Usage: %(program)s [-v] [[-C class] -S field=value]* <instance home> "
"[method]\n"
"\n"
"Options:\n"
" -v: print version and exit\n"
" -C / -S: see below\n"
"\n"
"The roundup mail gateway may be called in one of four ways:\n"
" . with an instance home as the only argument,\n"
" . with both an instance home and a mail spool file,\n"
" . with both an instance home and a POP/APOP server account, or\n"
" . with both an instance home and a IMAP/IMAPS server account.\n"
"\n"
"It also supports optional -C and -S arguments that allows you to set a\n"
"fields for a class created by the roundup-mailgw. The default class if\n"
"not specified is msg, but the other classes: issue, file, user can\n"
"also be used. The -S or --set options uses the same\n"
"property=value[;property=value] notation accepted by the command line\n"
"roundup command or the commands that can be given on the Subject line\n"
"of an email message.\n"
"\n"
"It can let you set the type of the message on a per email address basis.\n"
"\n"
"PIPE:\n"
" In the first case, the mail gateway reads a single message from the\n"
" standard input and submits the message to the roundup.mailgw module.\n"
"\n"
"UNIX mailbox:\n"
" In the second case, the gateway reads all messages from the mail spool\n"
" file and submits each in turn to the roundup.mailgw module. The file is\n"
" emptied once all messages have been successfully handled. The file is\n"
" specified as:\n"
"   mailbox /path/to/mailbox\n"
"\n"
"POP:\n"
" In the third case, the gateway reads all messages from the POP server\n"
" specified and submits each in turn to the roundup.mailgw module. The\n"
" server is specified as:\n"
"    pop username:password@server\n"
" The username and password may be omitted:\n"
"    pop username@server\n"
"    pop server\n"
" are both valid. The username and/or password will be prompted for if\n"
" not supplied on the command-line.\n"
"\n"
"APOP:\n"
" Same as POP, but using Authenticated POP:\n"
"    apop username:password@server\n"
"\n"
"IMAP:\n"
" Connect to an IMAP server. This supports the same notation as that of\n"
" POP mail.\n"
"    imap username:password@server\n"
" It also allows you to specify a specific mailbox other than INBOX using\n"
" this format:\n"
"    imap username:password@server mailbox\n"
"\n"
"IMAPS:\n"
" Connect to an IMAP server over ssl.\n"
" This supports the same notation as IMAP.\n"
"    imaps username:password@server [mailbox]\n"
"\n"
msgstr ""
"Вызов: %(program)s [-v] [[-C класс] -S поле=значение]* <каталог трекера> "
"[почтовый ящик]\n"
"\n"
"Ключи:\n"
" -v: показать номер версии и выйти\n"
" -C / -S: см.ниже\n"
"\n"
"Почтовый шлюз roundup может быть вызван одним из четырех способов:\n"
" . с единственным аргументом - \"домашним\" каталогом трекера,\n"
" . с указанием каталога трекера и почтового файла в формате mailbox,\n"
" . с указанием каталога трекера и почтового ящика POP или APOP,\n"
" . с указанием каталога трекера и почтового ящика IMAP или IMAPS.\n"
"\n"
"Почтовый шлюз позволяет указать также параметры -C и -S, при помощи\n"
"которых можно заполнить дополнительные поля класса, объекты которого\n"
"создает roundup-mailgw.  Если класс не указан, создаются объекты msg,\n"
"но можно использовать и другие классы: issue, file или user.\n"
"Ключ -S или --set устанавливает атрибуты объекта, используя ту же\n"
"нотацию, что и интерфейс командной строки roundup или команды,\n"
"которые могут быть поданы в строке Subject email-сообщения:\n"
"атрибут=значение[;атрибут=значение].\n"
"\n"
"При помощи этих параметров можно строить разные обработчики сообщений\n"
"для разных адресов почтового шлюза.\n"
"\n"
"Способы получения email-сообщений:\n"
"\n"
"Канал (pipe):\n"
" Если в параметрах вызова не указан почтовый ящик, roundup-mailgw\n"
" читает одно сообщение из стандартного входного потока (stdin).\n"
" Это сообщение передается для обработки модулю roundup.mailgw.\n"
"\n"
"Mailbox:\n"
" В этом случае roundup-mailgw читает все сообщения из почтового файла,\n"
" который должен иметь формат mail spool file.  Каждое сообщение передается\n"
" для обработки модулю roundup.mailgw.  Когда все сообщения успешно\n"
" обработаны, почтовый файл очищается.  Имя почтового файла указывается так:\n"
"   mailbox /path/to/mailbox\n"
"\n"
"POP:\n"
" При таком вызове roundup-mailgs забирает все сообщения, поступившие\n"
" в почтовый ящик на сервере POP3.  Каждое полученное сообщение передается\n"
" для обработки модулю roundup.mailgw.  Почтовый ящик указывается в виде:\n"
"    pop username:password@server\n"
" Имя пользователя и пароль могут быть опущены:\n"
"    pop username@server\n"
"    pop server\n"
" Если имя или пароль не указаны, программа попросит ввести их с терминала.\n"
"\n"
"APOP:\n"
" То же, что и POP, но с использованием протокола Authenticated POP:\n"
"    apop username:password@server\n"
"\n"
"IMAP:\n"
" Получить почту с сервера IMAP.  Почтовый ящик указывается так же,\n"
" как и для POP-сервера:\n"
"    imap username:password@server\n"
" При использовании IMAP можно указать имя папки входной почты,\n"
" если оно отличается от обычного (\"INBOX\"):\n"
"    imap username:password@server folder\n"
"\n"
"IMAPS:\n"
" Получить почту с сервера IMAP, позволяющего шифрованные соединения.\n"
" Почтовый ящик указывается так же, как и для обычного IMAP-сервера:\n"
"    imaps username:password@server [mailbox]\n"
"\n"

#: ../roundup/scripts/roundup_mailgw.py:143
msgid "Error: not enough source specification information"
msgstr "Ошибка: не указан путь к почтовому ящику"

#: ../roundup/scripts/roundup_mailgw.py:153
msgid "Error: pop specification not valid"
msgstr "Ошибка: неправильный адрес pop-сервера"

#: ../roundup/scripts/roundup_mailgw.py:160
msgid "Error: apop specification not valid"
msgstr "Ошибка: неправильный адрес apop-сервера"

#: ../roundup/scripts/roundup_mailgw.py:174
msgid ""
"Error: The source must be either \"mailbox\", \"pop\", \"apop\", \"imap\" or "
"\"imaps\""
msgstr ""
"Ошибка: Тип почтового ящика должен быть \"mailbox\", \"pop\", \"apop\", "
"\"imap\" или \"imaps\""

#: ../roundup/scripts/roundup_server.py:130
msgid ""
"<html><head><title>Roundup trackers index</title></head>\n"
"<body><h1>Roundup trackers index</h1><ol>\n"
msgstr ""
"<html><head><title>Список трекеров Roundup</title></head>\n"
"<body><h1>Список трекеров Roundup</h1><ol>\n"

#: ../roundup/scripts/roundup_server.py:135
#, python-format
msgid "<li><a href=\"%(tracker_url)s/index\">%(tracker_name)s</a>\n"
msgstr ""

#: ../roundup/scripts/roundup_server.py:138
msgid "</ol></body></html>"
msgstr ""

#: ../roundup/scripts/roundup_server.py:239
#, python-format
msgid "Error: %s: %s"
msgstr "Ошибка: %s: %s"

#: ../roundup/scripts/roundup_server.py:347
msgid ""
" -c <Command>  Windows Service options.\n"
"               If you want to run the server as a Windows Service, you\n"
"               must configure the rest of the options by changing the\n"
"               constants of this program.  You will at least configure\n"
"               one tracker in the TRACKER_HOMES variable.  This option\n"
"               is mutually exclusive from the rest.  Typing\n"
"               \"roundup-server -c help\" shows Windows Services\n"
"               specifics."
msgstr ""
" -c <команда>  ключ сервиса Windows.  Если вы собираетесь запускать\n"
"               сервер как сервис Windows, значения всех остальных\n"
"               параметров придется вписать прямо в текст этой программы.\n"
"               Как минимум, вы должны заполнить переменную TRACKER_HOMES.\n"
"               Ключ \"-c\" не совместим со всеми остальными ключами\n"
"               программы.  Если указан этот ключ, другие ключи указывать\n"
"               нельзя.  Команда \"roundup-server -c help\" выдает справку\n"
"               о режиме сервиса Windows."

#: ../roundup/scripts/roundup_server.py:356
msgid ""
" -u <UID>      runs the Roundup web server as this UID\n"
" -g <GID>      runs the Roundup web server as this GID\n"
" -d <PIDfile>  run the server in the background and write the server's PID\n"
"               to the file indicated by PIDfile. The -l option *must* be\n"
"               specified if -d is used."
msgstr ""
" -u <UID>      запустить cервер Roundup с правами пользователя UID\n"
" -g <GID>      запустить сервер Roundup в группе GID\n"
" -d <PIDfile>  записать номер процесса (pid) сервера в файл PIDfile\n"
"               и запустить сервер в фоновом режиме.  Если указано \"-d\",\n"
"               файл протокола *обязательно* должен быть задан ключом \"-l\".\n"

#: ../roundup/scripts/roundup_server.py:364
#, python-format
msgid ""
"%(message)sUsage: roundup-server [options] [name=tracker home]*\n"
"\n"
"Options:\n"
" -v            prints the Roundup version number and exits\n"
" -n <name>     sets the host name of the Roundup web server instance\n"
" -p <port>     sets the port to listen on (default: %(port)s)\n"
" -l <fname>    log to the file indicated by fname instead of stderr/stdout\n"
" -N            log client machine names instead of IP addresses (much "
"slower)\n"
"%(os_part)s\n"
"\n"
"Examples:\n"
" roundup-server support=/var/spool/roundup-trackers/support\n"
"\n"
" roundup-server -d /var/run/roundup.pid -l /var/log/roundup.log \\\n"
"     support=/var/spool/roundup-trackers/support\n"
"\n"
"How to use \"name=tracker home\":\n"
"   These arguments set the tracker home(s) to use. The name is how the\n"
"   tracker is identified in the URL (it's the first part of the URL path).\n"
"   The tracker home is the directory that was identified when you did\n"
"   \"roundup-admin init\". You may specify any number of these name=home\n"
"   pairs on the command-line. For convenience, you may edit the\n"
"   TRACKER_HOMES variable in the roundup-server file instead.\n"
"   Make sure the name part doesn't include any url-unsafe characters like\n"
"   spaces, as these confuse the cookie handling in browsers like IE.\n"
msgstr ""
"%(message)sВызов: roundup-server [ключи] [имя=каталог]*\n"
"\n"
"Ключи:\n"
" -v            показать номер версии и выйти\n"
" -n <адрес>    установить адрес трекера\n"
" -p <порт>     изменить номер порта (по умолчанию - %(port)s)\n"
" -l <файл>     вести протокол в указанном файле (вместо stderr / stdout)\n"
" -N            протоколировать имена машин клиентов вместо IP-адресов\n"
"               (сильно замедляет работу).\n"
"%(os_part)s\n"
"\n"
"Примеры:\n"
" roundup-server support=/var/spool/roundup-trackers/support\n"
"\n"
" roundup-server -d /var/run/roundup.pid -l /var/log/roundup.log \\\n"
"     support=/var/spool/roundup-trackers/support\n"
"\n"
"Параметры \"имя=каталог\"\n"
"   задают трекер (или трекеры), обслуживаемые этим сервером.\n"
"   Имя трекера является частью URL (первая часть пути в URL).\n"
"   Каталог указывает на расположение данных трекера.  Это - тот\n"
"   каталог, который вы указывали при выполнении команды\n"
"   \"roundup-admin init\".\n"
"   Вы можете указать в командной строке сколько угодно пар имя=каталог.\n"
"   Если задание списка трекеров в командной строке неудобно, можно\n"
"   вместо этого исправить переменную TRACKER_HOMES в файле roundup-server.\n"
"   Следите за тем, чтобы в именах трекеров не было символов, которые\n"
"   не могут использоваться в URL (пробелы, русские буквы и проч.),\n"
"   потому что такие имена сбивают с толку некоторые броусеры типа IE.\n"

#: ../roundup/scripts/roundup_server.py:470
msgid "windows service option must be the only one"
msgstr "Ключ сервиса windows должен быть единственным"

#: ../roundup/scripts/roundup_server.py:473
msgid "logfile *must* be specified if pidfile is"
msgstr "Если указан pidfile, требуется указать logfile"

#: ../roundup/scripts/roundup_server.py:484
#, python-format
msgid "Unable to bind to port %s, port already in use."
msgstr "Невозможно установить сервер на порту %s, порт уже занят."

#: ../roundup/scripts/roundup_server.py:493
msgid "Can't change groups - no grp module"
msgstr "Подмена группы невозможна - нужен модуль grp"

#: ../roundup/scripts/roundup_server.py:497
#, python-format
msgid "Group %(group)s doesn't exist"
msgstr "Группа %(group)s не существует"

#: ../roundup/scripts/roundup_server.py:500
msgid "WARNING: ignoring \"-g\" argument, not root"
msgstr ""
"ВНИМАНИЕ: параметр \"-g\" не используется, он разрешен только для "
"пользователя root"

#: ../roundup/scripts/roundup_server.py:508
msgid "Can't change users - no pwd module"
msgstr "Подмена пользователя невозможна - нужен модуль pwd"

#: ../roundup/scripts/roundup_server.py:512
#, python-format
msgid "User %(user)s doesn't exist"
msgstr "Пользователь %(user)s не существует"

#: ../roundup/scripts/roundup_server.py:515
msgid "WARNING: ignoring \"-u\" argument, not root"
msgstr ""
"ВНИМАНИЕ: параметр \"-u\" не используется, он разрешен только для "
"пользователя root"

#: ../roundup/scripts/roundup_server.py:519
msgid "Can't run as root!"
msgstr "Запуск сервера с полномочиями пользователя root запрещен!"

#: ../roundup/scripts/roundup_server.py:528
msgid "Instances must be name=home"
msgstr "Список трекеров должен быть в формате имя=каталог"

#: ../roundup/scripts/roundup_server.py:544
msgid "Sorry, you can't run the server as a daemon on this Operating System"
msgstr ""
"Извините, в этой операционной системе работа в фоновом режиме невозможна"

#: ../roundup/scripts/roundup_server.py:562
#, python-format
msgid "Roundup server started on %(address)s"
msgstr "Сервер Roundup готов к работе по адресу %(address)s"

#: ../templates/classic/html/_generic.collision.html:4
#: ../templates/minimal/html/_generic.collision.html:4
msgid "${class} Edit Collision - ${tracker}"
msgstr "Конфликт редактирования ${class} - ${tracker}"

#: ../templates/classic/html/_generic.collision.html:7
#: ../templates/minimal/html/_generic.collision.html:7
msgid "${class} Edit Collision"
msgstr "Конфликт редактирования ${class}"

#: ../templates/classic/html/_generic.collision.html:14
#: ../templates/minimal/html/_generic.collision.html:14
msgid ""
"\n"
"  There has been a collision. Another user updated this node\n"
"  while you were editing. Please <a href='${context}'>reload</a>\n"
"  the node and review your edits.\n"
msgstr ""
"\n"
"  Обнаружен конфликт редактирования.  Пока вы заполняли эту\n"
"  форму, другой пользователь изменил объект базы данных.\n"
"  <a href='${context}>Перечитайте</a> форму и внесите изменения\n"
"  заново, пожалуйста.\n"

#: ../templates/classic/html/_generic.help.html:9
#: ../templates/minimal/html/_generic.help.html:9
msgid "${property} help - ${tracker}"
msgstr "Справка по ${property} - ${tracker}"

#: ../templates/classic/html/_generic.help.html:31
#: ../templates/minimal/html/_generic.help.html:31
msgid " Cancel "
msgstr " Отменить "

#: ../templates/classic/html/_generic.help.html:34
#: ../templates/minimal/html/_generic.help.html:34
msgid " Apply "
msgstr " Применить "

#: ../templates/classic/html/_generic.help.html:66
#: ../templates/classic/html/issue.index.html:67
#: ../templates/minimal/html/_generic.help.html:66
msgid "&lt;&lt; previous"
msgstr "&lt;&lt; предыдущие"

#: ../templates/classic/html/_generic.help.html:73
#: ../templates/classic/html/issue.index.html:75
#: ../templates/minimal/html/_generic.help.html:73
msgid "${start}..${end} out of ${total}"
msgstr "${start}..${end} из ${total}"

#: ../templates/classic/html/_generic.help.html:76
#: ../templates/classic/html/issue.index.html:78
#: ../templates/minimal/html/_generic.help.html:76
msgid "next &gt;&gt;"
msgstr "следующие &gt;&gt;"

#: ../templates/classic/html/_generic.index.html:6
#: ../templates/classic/html/_generic.item.html:4
#: ../templates/minimal/html/_generic.index.html:6
#: ../templates/minimal/html/_generic.item.html:4
msgid "${class} editing - ${tracker}"
msgstr "Редактирование ${class} - ${tracker}"

#: ../templates/classic/html/_generic.index.html:9
#: ../templates/classic/html/_generic.item.html:7
#: ../templates/minimal/html/_generic.index.html:9
#: ../templates/minimal/html/_generic.item.html:7
msgid "${class} editing"
msgstr "Редактирование ${class}"

#: ../templates/classic/html/_generic.index.html:14
#: ../templates/classic/html/_generic.item.html:12
#: ../templates/classic/html/file.item.html:9
#: ../templates/classic/html/issue.index.html:10
#: ../templates/classic/html/user.index.html:9
#: ../templates/classic/html/user.register.html:14
#: ../templates/minimal/html/_generic.index.html:14
#: ../templates/minimal/html/_generic.item.html:12
#: ../templates/minimal/html/user.index.html:9
#: ../templates/minimal/html/user.item.html:18
#: ../templates/minimal/html/user.register.html:14
msgid "You are not allowed to view this page."
msgstr "У вас нет разрешения на просмотр этой страницы."

#: ../templates/classic/html/_generic.index.html:22
#: ../templates/minimal/html/_generic.index.html:22
msgid ""
"<p class=\"form-help\"> You may edit the contents of the ${classname} class "
"using this form. Commas, newlines and double quotes (\") must be handled "
"delicately. You may include commas and newlines by enclosing the values in "
"double-quotes (\"). Double quotes themselves must be quoted by doubling "
"(\"\"). </p> <p class=\"form-help\"> Multilink properties have their "
"multiple values colon (\":\") separated (... ,\"one:two:three\", ...) </p> "
"<p class=\"form-help\"> Remove entries by deleting their line. Add new "
"entries by appending them to the table - put an X in the id column. </p>"
msgstr ""
"<p class=\"form-help\"> При помощи этой формы вы можете изменить содержимое "
"класса ${classname}. Будьте осторожны с запятыми, переводами строк и "
"двойными кавычками (\"). Значения, содержащие запятые и переводы строк, "
"должны быть заключены в двойные кавычки (\"). Двойные кавычки в значениях "
"должны быть удвоены (\"\"). </p> <p class=\"form-help\"> Значения "
"множественных ссылок (multilink properties) разделяются двоеточием (... ,"
"\"раз:два:три\", ...) </p> <p class=\"form-help\"> Для того, чтобы "
"уничтожить запись, удалите соответствующую строку.  Новые записи "
"дописываются в конец таблицы. Вместо идентификатора (id) новых записей нужно "
"вписывать латинскую букву \"X\". </p>"

#: ../templates/classic/html/_generic.index.html:44
#: ../templates/minimal/html/_generic.index.html:44
msgid "Edit Items"
msgstr "Изменить"

#: ../templates/classic/html/file.index.html:4
msgid "List of files - ${tracker}"
msgstr "Список файлов - ${tracker}"

#: ../templates/classic/html/file.index.html:5
msgid "List of files"
msgstr "Список файлов"

#: ../templates/classic/html/file.index.html:10
msgid "Download"
msgstr "Скачать"

#: ../templates/classic/html/file.index.html:11
#: ../templates/classic/html/file.item.html:23
#: ../templates/classic/html/file.item.html:51
msgid "Content Type"
msgstr "Тип файла"

#: ../templates/classic/html/file.index.html:12
msgid "Uploaded By"
msgstr "Загрузил"

#: ../templates/classic/html/file.index.html:13
#: ../templates/classic/html/msg.item.html:38
msgid "Date"
msgstr "Дата"

#: ../templates/classic/html/file.item.html:2
msgid "File display - ${tracker}"
msgstr "Просмотр файла - ${tracker}"

#: ../templates/classic/html/file.item.html:4
msgid "File display"
msgstr "Просмотр файла"

#: ../templates/classic/html/file.item.html:19
#: ../templates/classic/html/file.item.html:47
#: ../templates/classic/html/user.item.html:34
#: ../templates/classic/html/user.register.html:24
msgid "Name"
msgstr "Имя"

#: ../templates/classic/html/file.item.html:41
msgid "download"
msgstr "скачать"

#: ../templates/classic/html/home.classlist.html:2
#: ../templates/minimal/html/home.classlist.html:2
msgid "List of classes - ${tracker}"
msgstr "Список классов - ${tracker}"

#: ../templates/classic/html/home.classlist.html:4
#: ../templates/minimal/html/home.classlist.html:4
msgid "List of classes"
msgstr "Список классов"

#: ../templates/classic/html/issue.index.html:4
msgid "List of issues - ${tracker}"
msgstr "Список задач - ${tracker}"

#: ../templates/classic/html/issue.index.html:6
msgid "List of issues"
msgstr "Список задач"

#: ../templates/classic/html/issue.index.html:17
#: ../templates/classic/html/issue.item.html:38
msgid "Priority"
msgstr "Приоритет"

#: ../templates/classic/html/issue.index.html:18
msgid "ID"
msgstr ""

#: ../templates/classic/html/issue.index.html:19
msgid "Creation"
msgstr "Дата создания"

#: ../templates/classic/html/issue.index.html:20
msgid "Activity"
msgstr "Действие"

#: ../templates/classic/html/issue.index.html:21
msgid "Actor"
msgstr "Выполнил"

#: ../templates/classic/html/issue.index.html:22
msgid "Topic"
msgstr "Тема"

#: ../templates/classic/html/issue.index.html:23
#: ../templates/classic/html/issue.item.html:33
msgid "Title"
msgstr "Заглавие"

#: ../templates/classic/html/issue.index.html:24
#: ../templates/classic/html/issue.item.html:40
msgid "Status"
msgstr "Статус"

#: ../templates/classic/html/issue.index.html:25
msgid "Creator"
msgstr "Автор"

#: ../templates/classic/html/issue.index.html:26
msgid "Assigned&nbsp;To"
msgstr "Назначено"

#: ../templates/classic/html/issue.index.html:90
msgid "Download as CSV"
msgstr "Скачать CSV"

#: ../templates/classic/html/issue.index.html:98
msgid "Sort on:"
msgstr "Сортировка:"

#: ../templates/classic/html/issue.index.html:101
#: ../templates/classic/html/issue.index.html:118
msgid "- nothing -"
msgstr "- нет -"

#: ../templates/classic/html/issue.index.html:109
#: ../templates/classic/html/issue.index.html:126
msgid "Descending:"
msgstr "По убыванию:"

#: ../templates/classic/html/issue.index.html:115
msgid "Group on:"
msgstr "Группировка:"

#: ../templates/classic/html/issue.index.html:132
msgid "Redisplay"
msgstr "Обновить"

#: ../templates/classic/html/issue.item.html:7
msgid "Issue ${id}: ${title} - ${tracker}"
msgstr "Задача ${id}: ${title} - ${tracker}"

#: ../templates/classic/html/issue.item.html:10
msgid "New Issue - ${tracker}"
msgstr "Новая задача - ${tracker}"

#: ../templates/classic/html/issue.item.html:14
msgid "New Issue"
msgstr "Новая задача"

#: ../templates/classic/html/issue.item.html:16
msgid "New Issue Editing"
msgstr "Регистрация новой задачи"

#: ../templates/classic/html/issue.item.html:19
msgid "Issue${id}"
msgstr "Задача ${id}"

#: ../templates/classic/html/issue.item.html:22
msgid "Issue${id} Editing"
msgstr "Редактирование задачи ${id}"

#: ../templates/classic/html/issue.item.html:45
msgid "Superseder"
msgstr "Замещение"

#: ../templates/classic/html/issue.item.html:50
msgid "View: ${link}"
msgstr "Просмотр: ${link}"

#: ../templates/classic/html/issue.item.html:54
msgid "Nosy List"
msgstr "Рассылка извещений"

#: ../templates/classic/html/issue.item.html:63
msgid "Assigned To"
msgstr "Назначено"

#: ../templates/classic/html/issue.item.html:65
msgid "Topics"
msgstr "Темы"

#: ../templates/classic/html/issue.item.html:73
msgid "Change Note"
msgstr "Заметки"

#: ../templates/classic/html/issue.item.html:81
msgid "File"
msgstr "Файл"

#: ../templates/classic/html/issue.item.html:100
msgid ""
"<table class=\"form\"> <tr> <td>Note:&nbsp;</td> <th class=\"required"
"\">highlighted</th> <td>&nbsp;fields are required.</td> </tr> </table>"
msgstr ""
"<table class=\"form\"> <tr> <td>Примечание:&nbsp;</td><th class=\"required"
"\">выделенные</th><td>&nbsp;поля должны быть заполнены.</td> </tr> </table>"

#: ../templates/classic/html/issue.item.html:116
#: ../templates/classic/html/msg.item.html:51
msgid "Files"
msgstr "Файлы"

#: ../templates/classic/html/issue.item.html:118
#: ../templates/classic/html/msg.item.html:53
msgid "File name"
msgstr "Имя файла"

#: ../templates/classic/html/issue.item.html:119
#: ../templates/classic/html/msg.item.html:54
msgid "Uploaded"
msgstr "Загружен"

#: ../templates/classic/html/issue.item.html:120
msgid "Type"
msgstr "Тип"

#: ../templates/classic/html/issue.item.html:121
#: ../templates/classic/html/query.edit.html:30
msgid "Edit"
msgstr "Редактировать"

#: ../templates/classic/html/issue.item.html:122
msgid "Remove"
msgstr "Удалить"

#: ../templates/classic/html/issue.item.html:149
#: ../templates/classic/html/msg.index.html:9
msgid "Messages"
msgstr "Сообщения"

#: ../templates/classic/html/issue.search.html:2
msgid "Issue searching - ${tracker}"
msgstr "Поиск - ${tracker}"

#: ../templates/classic/html/issue.search.html:4
msgid "Issue searching"
msgstr "Поиск"

#: ../templates/classic/html/issue.search.html:24
msgid "Filter on"
msgstr "Что искать"

#: ../templates/classic/html/issue.search.html:25
msgid "Display"
msgstr "Показать"

#: ../templates/classic/html/issue.search.html:26
msgid "Sort on"
msgstr "Сортировать"

#: ../templates/classic/html/issue.search.html:27
msgid "Group on"
msgstr "Группировать"

#: ../templates/classic/html/issue.search.html:31
msgid "All text*:"
msgstr "во всем тексте*:"

#: ../templates/classic/html/issue.search.html:39
msgid "Title:"
msgstr "в заголовке:"

#: ../templates/classic/html/issue.search.html:49
msgid "Topic:"
msgstr "Тема:"

#: ../templates/classic/html/issue.search.html:57
msgid "ID:"
msgstr ""

#: ../templates/classic/html/issue.search.html:65
msgid "Creation Date:"
msgstr "Дата создания:"

#: ../templates/classic/html/issue.search.html:75
msgid "Creator:"
msgstr "Автор:"

#: ../templates/classic/html/issue.search.html:77
msgid "created by me"
msgstr "создано мной"

#: ../templates/classic/html/issue.search.html:86
msgid "Activity:"
msgstr "Действие:"

#: ../templates/classic/html/issue.search.html:94
msgid "Actor:"
msgstr "Выполнил:"

#: ../templates/classic/html/issue.search.html:96
msgid "done by me"
msgstr "выполнено мной"

#: ../templates/classic/html/issue.search.html:107
msgid "Priority:"
msgstr "Приоритет:"

#: ../templates/classic/html/issue.search.html:109
#: ../templates/classic/html/issue.search.html:125
msgid "not selected"
msgstr "не установлен"

#: ../templates/classic/html/issue.search.html:120
msgid "Status:"
msgstr "Статус:"

#: ../templates/classic/html/issue.search.html:123
msgid "not resolved"
msgstr "не закрыт"

#: ../templates/classic/html/issue.search.html:137
msgid "Assigned to:"
msgstr "Назначено:"

#: ../templates/classic/html/issue.search.html:140
msgid "assigned to me"
msgstr "назначено мне"

#: ../templates/classic/html/issue.search.html:142
msgid "unassigned"
msgstr "неназначено"

#: ../templates/classic/html/issue.search.html:152
msgid "Pagesize:"
msgstr "Размер страницы:"

#: ../templates/classic/html/issue.search.html:158
msgid "Start With:"
msgstr "Начать с:"

#: ../templates/classic/html/issue.search.html:164
msgid "Sort Descending:"
msgstr "Сортировать по убыванию:"

#: ../templates/classic/html/issue.search.html:171
msgid "Group Descending:"
msgstr "Группировать по убыванию"

#: ../templates/classic/html/issue.search.html:178
msgid "Query name**:"
msgstr "Имя запроса**:"

#: ../templates/classic/html/issue.search.html:188
#: ../templates/classic/html/page.html:46
msgid "Search"
msgstr "Поиск"

#: ../templates/classic/html/issue.search.html:192
msgid ""
"*: The \"all text\" field will look in message bodies and issue titles<br> "
"**: If you supply a name, the query will be saved off and available as a "
"link in the sidebar"
msgstr ""
"*: Поиск по всему тексту ищет введенную строку в заголовках и в теле "
"сообщений.<br />**: Если указано имя, запрос будет сохранен под этим именем "
"и появится в списке запросов в меню."

#: ../templates/classic/html/keyword.item.html:3
msgid "Keyword editing - ${tracker}"
msgstr "Редактирование ключевых слов - ${tracker}"

#: ../templates/classic/html/keyword.item.html:5
msgid "Keyword editing"
msgstr "Редактирование ключевых слов"

#: ../templates/classic/html/keyword.item.html:11
msgid "Existing Keywords"
msgstr "Существующие ключевые слова"

#: ../templates/classic/html/keyword.item.html:20
msgid ""
"To edit an existing keyword (for spelling or typing errors), click on its "
"entry above."
msgstr ""
"Для того, чтобы исправить ошибки или опечатки в ключевом слове, вызовите "
"редактор по ссылке в этом списке."

#: ../templates/classic/html/keyword.item.html:27
msgid "To create a new keyword, enter it below and click \"Submit New Entry\"."
msgstr ""
"Чтобы создать новое ключевое слово, заполните поле ввода и нажмите кнопку "
"\"Добавить\"."

#: ../templates/classic/html/keyword.item.html:37
msgid "Keyword"
msgstr "Ключевое слово"

#: ../templates/classic/html/msg.index.html:3
msgid "List of messages - ${tracker}"
msgstr "Список сообщений - ${tracker}"

#: ../templates/classic/html/msg.index.html:5
msgid "Message listing"
msgstr "Список сообщений"

#: ../templates/classic/html/msg.item.html:6
msgid "Message ${id} - ${tracker}"
msgstr "Сообщение ${id} - ${tracker}"

#: ../templates/classic/html/msg.item.html:9
msgid "New Message - ${tracker}"
msgstr "Новое сообщение - ${tracker}"

#: ../templates/classic/html/msg.item.html:13
msgid "New Message"
msgstr "Новое сообщение"

#: ../templates/classic/html/msg.item.html:15
msgid "New Message Editing"
msgstr "Редактирование нового сообщения"

#: ../templates/classic/html/msg.item.html:18
msgid "Message${id}"
msgstr "Сообщение ${id}"

#: ../templates/classic/html/msg.item.html:21
msgid "Message${id} Editing"
msgstr "Редактирование сообщения ${id}"

#: ../templates/classic/html/msg.item.html:28
msgid "Author"
msgstr "Автор"

#: ../templates/classic/html/msg.item.html:33
msgid "Recipients"
msgstr "Адресаты"

#: ../templates/classic/html/msg.item.html:44
msgid "Content"
msgstr "Содержание"

#: ../templates/classic/html/page.html:28
msgid "<b>Your Queries</b> (<a href=\"query?@template=edit\">edit</a>)"
msgstr "<b>Ваши запросы</b> (<a href=\"query?@template=edit\">редактор</a>)"

#: ../templates/classic/html/page.html:39
msgid "Issues"
msgstr "Задачи"

#: ../templates/classic/html/page.html:40
#: ../templates/classic/html/page.html:57
msgid "Create New"
msgstr "Добавить"

#: ../templates/classic/html/page.html:42
msgid "Show Unassigned"
msgstr "Неназначенные"

#: ../templates/classic/html/page.html:44
msgid "Show All"
msgstr "Показать все"

#: ../templates/classic/html/page.html:47
msgid "Show issue:"
msgstr "Показать:"

#: ../templates/classic/html/page.html:56
msgid "Keywords"
msgstr "Ключевые&nbsp;слова"

#: ../templates/classic/html/page.html:58
msgid "Edit Existing"
msgstr "Редактировать"

#: ../templates/classic/html/page.html:64
#: ../templates/minimal/html/page.html:48
msgid "Administration"
msgstr "Администрирование"

#: ../templates/classic/html/page.html:66
#: ../templates/minimal/html/page.html:49
msgid "Class List"
msgstr "Список классов"

#: ../templates/classic/html/page.html:68
#: ../templates/minimal/html/page.html:51
msgid "User List"
msgstr "Список пользователей"

#: ../templates/classic/html/page.html:71
#: ../templates/minimal/html/page.html:54
msgid "Add User"
msgstr "Добавить пользователя"

#: ../templates/classic/html/page.html:78
#: ../templates/classic/html/page.html:82
#: ../templates/minimal/html/page.html:30
msgid "Login"
msgstr "Вход"

#: ../templates/classic/html/page.html:84
#: ../templates/classic/html/user.register.html:70
#: ../templates/minimal/html/page.html:33
#: ../templates/minimal/html/user.register.html:58
msgid "Register"
msgstr "Зарегистрироваться"

#: ../templates/classic/html/page.html:87
msgid "Lost&nbsp;your&nbsp;login?"
msgstr "Забыли&nbsp;пароль?"

#: ../templates/classic/html/page.html:92
msgid "Hello, ${user}"
msgstr "Здравствуйте, ${user}!"

#: ../templates/classic/html/page.html:94
msgid "My Issues"
msgstr "Мои задачи"

#: ../templates/classic/html/page.html:95
#: ../templates/minimal/html/page.html:40
msgid "My Details"
msgstr "Моя карточка"

#: ../templates/classic/html/page.html:97
#: ../templates/minimal/html/page.html:42
msgid "Logout"
msgstr "Выход"

#: ../templates/classic/html/page.html:101
msgid "Help"
msgstr "Помощь"

#: ../templates/classic/html/page.html:102
msgid "Roundup docs"
msgstr "Документация Roundup"

#: ../templates/classic/html/page.html:153
msgid "don't care"
msgstr "неважно"

#: ../templates/classic/html/page.html:155
msgid "------------"
msgstr ""

#: ../templates/classic/html/page.html:173
msgid "no value"
msgstr "нет значения"

#: ../templates/classic/html/query.edit.html:4
msgid "\"Your Queries\" Editing - ${tracker}"
msgstr "Редактирование \"Ваших запросов\" - ${tracker}"

#: ../templates/classic/html/query.edit.html:6
msgid "\"Your Queries\" Editing"
msgstr "Редактирование \"Ваших запросов\""

#: ../templates/classic/html/query.edit.html:11
msgid "You are not allowed to edit queries."
msgstr "У вас нет разрешения на редактирование запросов"

#: ../templates/classic/html/query.edit.html:28
msgid "Query"
msgstr "Запрос"

#: ../templates/classic/html/query.edit.html:29
msgid "Include in \"Your Queries\""
msgstr "Включить в \"Ваши запросы\""

#: ../templates/classic/html/query.edit.html:31
msgid "Private to you?"
msgstr "Личный?"

#: ../templates/classic/html/query.edit.html:44
msgid "leave out"
msgstr "не включать"

#: ../templates/classic/html/query.edit.html:45
msgid "include"
msgstr "включить"

#: ../templates/classic/html/query.edit.html:49
msgid "leave in"
msgstr "оставить"

#: ../templates/classic/html/query.edit.html:50
msgid "remove"
msgstr "исключить"

#: ../templates/classic/html/query.edit.html:54
msgid "[query is retired]"
msgstr "[запрос удален]"

#: ../templates/classic/html/query.edit.html:67
msgid "edit"
msgstr "редактировать"

#: ../templates/classic/html/query.edit.html:71
msgid "yes"
msgstr "да"

#: ../templates/classic/html/query.edit.html:73
msgid "no"
msgstr "нет"

#: ../templates/classic/html/query.edit.html:79
msgid "Delete"
msgstr "Удалить"

#: ../templates/classic/html/query.edit.html:90
msgid "[not yours to edit]"
msgstr "[чужой запрос - редактировать нельзя]"

#: ../templates/classic/html/query.edit.html:96
msgid "Save Selection"
msgstr "Сохранить изменения"

#: ../templates/classic/html/user.forgotten.html:3
msgid "Password reset request - ${tracker}"
msgstr "Сброс пароля - ${tracker}"

#: ../templates/classic/html/user.forgotten.html:5
msgid "Password reset request"
msgstr "Сброс пароля"

#: ../templates/classic/html/user.forgotten.html:9
msgid ""
"You have two options if you have forgotten your password. If you know the "
"email address you registered with, enter it below."
msgstr ""
"Если вы забыли пароль, у вас есть две возможности. Если вы помните адрес "
"электронной почты, с которым вы зарегистрированы, введите его в этом поле."

#: ../templates/classic/html/user.forgotten.html:16
msgid "Email Address:"
msgstr "Адрес email:"

#: ../templates/classic/html/user.forgotten.html:24
#: ../templates/classic/html/user.forgotten.html:34
msgid "Request password reset"
msgstr "Очистить пароль"

#: ../templates/classic/html/user.forgotten.html:30
msgid "Or, if you know your username, then enter it below."
msgstr "Или, если вы помните ваше имя пользователя, укажите его здесь"

#: ../templates/classic/html/user.forgotten.html:33
msgid "Username:"
msgstr "Имя пользователя:"

#: ../templates/classic/html/user.forgotten.html:39
msgid ""
"A confirmation email will be sent to you - please follow the instructions "
"within it to complete the reset process."
msgstr ""
"Для подтверждения этой операции вам будет послано сообщение по электронной "
"почте. В этом письме будет написано, что вы должны сделать, чтобы очистить "
"пароль Roundup."

#: ../templates/classic/html/user.index.html:3
#: ../templates/minimal/html/user.index.html:3
msgid "User listing - ${tracker}"
msgstr "Список пользователей - ${tracker}"

#: ../templates/classic/html/user.index.html:5
#: ../templates/minimal/html/user.index.html:5
msgid "User listing"
msgstr "Список пользователей"

#: ../templates/classic/html/user.index.html:14
#: ../templates/minimal/html/user.index.html:14
msgid "Username"
msgstr "Пользователь"

#: ../templates/classic/html/user.index.html:15
msgid "Real name"
msgstr "Имя, фамилия"

#: ../templates/classic/html/user.index.html:16
#: ../templates/classic/html/user.item.html:65
#: ../templates/classic/html/user.register.html:52
msgid "Organisation"
msgstr "Организация"

#: ../templates/classic/html/user.index.html:17
#: ../templates/minimal/html/user.index.html:15
msgid "Email address"
msgstr "Адрес email"

#: ../templates/classic/html/user.index.html:18
msgid "Phone number"
msgstr "Телефон"

#: ../templates/classic/html/user.index.html:19
msgid "Retire"
msgstr "Уволить"

#: ../templates/classic/html/user.index.html:32
msgid "retire"
msgstr "уволить"

#: ../templates/classic/html/user.item.html:7
msgid "User ${id}: ${title} - ${tracker}"
msgstr "Пользователь ${id}: ${title} - ${tracker}"

#: ../templates/classic/html/user.item.html:10
msgid "New User - ${tracker}"
msgstr "Новый пользователь - ${tracker}"

#: ../templates/classic/html/user.item.html:14
#: ../templates/minimal/html/user.item.html:6
msgid "New User"
msgstr "Новый пользователь"

#: ../templates/classic/html/user.item.html:16
#: ../templates/minimal/html/user.item.html:8
msgid "New User Editing"
msgstr "Регистрация нового пользователя"

#: ../templates/classic/html/user.item.html:19
#: ../templates/minimal/html/user.item.html:11
msgid "User${id}"
msgstr "Пользователь ${id}"

#: ../templates/classic/html/user.item.html:22
#: ../templates/minimal/html/user.item.html:14
msgid "User${id} Editing"
msgstr "Редактирование карточки пользователя ${id}"

#: ../templates/classic/html/user.item.html:38
#: ../templates/classic/html/user.register.html:28
#: ../templates/minimal/html/user.item.html:27
#: ../templates/minimal/html/user.item.html:67
#: ../templates/minimal/html/user.register.html:26
msgid "Login Name"
msgstr "Учетное имя"

#: ../templates/classic/html/user.item.html:42
#: ../templates/classic/html/user.register.html:32
#: ../templates/minimal/html/user.item.html:31
#: ../templates/minimal/html/user.register.html:30
msgid "Login Password"
msgstr "Пароль"

#: ../templates/classic/html/user.item.html:46
#: ../templates/classic/html/user.register.html:36
#: ../templates/minimal/html/user.item.html:35
#: ../templates/minimal/html/user.register.html:34
msgid "Confirm Password"
msgstr "(еще раз)"

#: ../templates/classic/html/user.item.html:50
#: ../templates/classic/html/user.register.html:40
#: ../templates/minimal/html/user.item.html:39
#: ../templates/minimal/html/user.register.html:38
msgid "Roles"
msgstr "Роли"

#: ../templates/classic/html/user.item.html:56
msgid "(to give the user more than one role, enter a comma,separated,list)"
msgstr "(если ролей несколько, перечислите их через запятую)"

#: ../templates/classic/html/user.item.html:61
#: ../templates/classic/html/user.register.html:48
msgid "Phone"
msgstr "Телефон"

#: ../templates/classic/html/user.item.html:69
msgid "Timezone"
msgstr "Часовой пояс"

#: ../templates/classic/html/user.item.html:73
msgid "(this is a numeric hour offset, the default is ${zone})"
msgstr ""
"(число - разница между местным и гринвичским временем, по умолчанию - "
"${zone})"

#: ../templates/classic/html/user.item.html:78
#: ../templates/classic/html/user.register.html:56
#: ../templates/minimal/html/user.item.html:47
#: ../templates/minimal/html/user.item.html:71
#: ../templates/minimal/html/user.register.html:46
msgid "E-mail address"
msgstr "Адрес email"

#: ../templates/classic/html/user.item.html:82
#: ../templates/classic/html/user.register.html:60
#: ../templates/minimal/html/user.item.html:51
#: ../templates/minimal/html/user.register.html:50
msgid "Alternate E-mail addresses<br>One address per line"
msgstr "Дополнительные адреса email<br />По одному адресу в строке"

#: ../templates/classic/html/user.register.html:4
#: ../templates/classic/html/user.register.html:7
#: ../templates/minimal/html/user.register.html:4
#: ../templates/minimal/html/user.register.html:7
msgid "Registering with ${tracker}"
msgstr "Регистрация в ${tracker}"

#: ../templates/classic/html/user.rego_progress.html:4
#: ../templates/minimal/html/user.rego_progress.html:4
msgid "Registration in progress - ${tracker}"
msgstr "Выполняется регистрация - ${tracker}"

#: ../templates/classic/html/user.rego_progress.html:6
#: ../templates/minimal/html/user.rego_progress.html:6
msgid "Registration in progress..."
msgstr "Выполняется регистрация..."

#: ../templates/classic/html/user.rego_progress.html:10
#: ../templates/minimal/html/user.rego_progress.html:10
msgid ""
"You will shortly receive an email to confirm your registration. To complete "
"the registration process, visit the link indicated in the email."
msgstr ""
"Скоро вы получите письмо с подтверждением вашей регистрации. Для того, чтобы "
"закончить регистрацию, вызовите указанную в письме ссылку."

#: ../templates/minimal/html/home.html:2
msgid "Tracker home - ${tracker}"
msgstr "Центр управления заданиями - ${tracker}"

#: ../templates/minimal/html/home.html:4
msgid "Tracker home"
msgstr "Центр управления заданиями"

#: ../templates/minimal/html/home.html:16
msgid "Please select from one of the menu options on the left."
msgstr "Выберите действие из меню слева."

#: ../templates/minimal/html/home.html:19
msgid "Please log in or register."
msgstr "Пожалуйста, входите или зарегистрируйтесь"

#: ../templates/minimal/html/page.html:38
msgid "Hello,<br>${user}"
msgstr "Привет,<br>${user}"

#: ../templates/minimal/html/user.item.html:3
msgid "User editing - ${tracker}"
msgstr "Редактирование карточки пользователя - ${tracker}"

commit refs/tags/0.8.0-b1
mark :9022
author Alexander Smishlajev <a1s@users.sourceforge.net> 1088862663 +0000
committer Alexander Smishlajev <a1s@users.sourceforge.net> 1088862663 +0000
data 79
updated to roundup.pot at [[CVS:locale/ru.po:1.6]] use better term for "issue"
from :9020
M 100644 :9021 locale/ru.po

blob
mark :613
data 5155
#! /usr/bin/env python
#
# Copyright (c) 2003 Richard Jones (richard@mechanicalcat.net)
#

import errno
import os
import socket
import sys
import urlparse
from glob import glob
import getopt

from roundup import configuration
from roundup.scripts import roundup_server

def install_demo(home, backend, template):
    """Install a demo tracker

    Parameters:
        home:
            tracker home directory path
        backend:
            database backend name
        template:
            tracker template

    """

    from roundup import init, instance, password, backends

    # set up the config for this tracker
    config = configuration.CoreConfig()
    config['TRACKER_HOME'] = home
    config['MAIL_DOMAIN'] = 'localhost'
    config['DATABASE'] = 'db'
    config['WEB_DEBUG'] = True
    if backend in ('mysql', 'postgresql'):
        config['RDBMS_HOST'] = 'localhost'
        config['RDBMS_USER'] = 'rounduptest'
        config['RDBMS_PASSWORD'] = 'rounduptest'
        config['RDBMS_NAME'] = 'rounduptest'

    # see if we have further db nuking to perform
    module = backends.get_backend(backend)
    if module.db_exists(config):
        module.db_nuke(config)

    template_dir = os.path.join('share', 'roundup', 'templates', template)
    init.install(home, template_dir)
    # don't have email flying around
    os.remove(os.path.join(home, 'detectors', 'nosyreaction.py'))
    try:
        os.remove(os.path.join(home, 'detectors', 'nosyreaction.pyc'))
    except os.error, error:
        if error.errno != errno.ENOENT:
            raise
    init.write_select_db(home, backend)

    # figure basic params for server
    hostname = 'localhost'
    # pick a fairly odd, random port
    port = 8917
    while 1:
        print 'Trying to set up web server on port %d ...'%port,
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        try:
            s.connect((hostname, port))
        except socket.error, e:
            if not hasattr(e, 'args') or e.args[0] != errno.ECONNREFUSED:
                raise
            print 'should be ok.'
            break
        else:
            s.close()
            print 'already in use.'
            port += 100
    config['TRACKER_WEB'] = 'http://%s:%s/demo/'%(hostname, port)

    # write the config
    config['INSTANT_REGISTRATION'] = 1
    config.save(os.path.join(home, config.INI_FILE))

    # open the tracker and initialise
    tracker = instance.open(home)
    tracker.init(password.Password('admin'))

    # add the "demo" user
    db = tracker.open('admin')
    db.user.create(username='demo', password=password.Password('demo'),
        realname='Demo User', roles='User')
    db.commit()
    db.close()

def run_demo(home):
    """Run the demo tracker installed in ``home``"""
    cfg = configuration.CoreConfig(home)
    url = cfg["TRACKER_WEB"]
    hostname, port = urlparse.urlparse(url)[1].split(':')
    port = int(port)
    success_message = '''Server running - connect to:
    %s
1. Log in as "demo"/"demo" or "admin"/"admin".
2. Hit Control-C to stop the server.
3. Re-start the server by running "roundup-demo" again.
4. Re-initialise the server by running "roundup-demo nuke".

Demo tracker is set up to be accessed by localhost browser.  If you
run demo on a server host, please stop the demo, open file
"demo/config.ini" with your editor, change the host name in the "web"
option in section "[tracker]", save the file, then re-run the demo
program.

''' % url

    # disable command line processing in roundup_server
    sys.argv = sys.argv[:1] + ['-p', str(port), 'demo=' + home]
    roundup_server.run(success_message=success_message)


def usage(msg = ''):

    if msg: print msg
    print 'Usage: %s [options] [nuke]'%sys.argv[0]
    print """
Options:
 -h                -- print this help message
 -t template       -- specify the tracker template to use
 -b backend        -- specify the database backend to use
"""


def main():
    """Run a demo server for users to play with for instant gratification.

    Sets up the web service on localhost. Disables nosy lists.
    """

    try:
        opts, args = getopt.getopt(sys.argv[1:], 't:b:h')
    except getopt.GetoptError, e:
        usage(str(e))
        return 1

    home = os.path.abspath('demo')
    nuke = args and args[0] == 'nuke'
    if not os.path.exists(home) or nuke:
        backend = 'anydbm'
        template = 'classic'
        for opt, arg in opts:
            if opt == '-h':
                usage()
                return 0
            elif opt == '-t':
                template = arg
            elif opt == '-b':
                backend = arg
        if (len(args) > 1 or
            (len(args) == 1 and args[0] != 'nuke')):
            usage()
            return 1

        install_demo(home, backend, template)
    elif opts:
        print "Error: Arguments are not allowed when running an existing demo."
        print "       Use the 'nuke' command to start over."
        sys.exit(1)

    run_demo(home)


if __name__ == '__main__':
    sys.exit(main())

# vim: set filetype=python sts=4 sw=4 et si :

commit refs/remotes/svn/gsoc-2009
mark :614
author stefan <stefan@57a73879-2fb5-44c3-a270-3262357dd7e2> 1244859175 +0000
committer stefan <stefan@57a73879-2fb5-44c3-a270-3262357dd7e2> 1244859175 +0000
data 158
Allow options '-t' and '-b'

git-svn-id: https://svn.roundup-tracker.org/svnroot/roundup/roundup/branches/gsoc-2009@4216 57a73879-2fb5-44c3-a270-3262357dd7e2
from :612
M 100644 :613 demo.py

blob
mark :615
data 1818
#
# Copyright (C) 2009 Stefan Seefeld
# All rights reserved.
# For license terms see the file COPYING.txt.
#

from roundup.exceptions import *
from roundup import hyperdb
from roundup.i18n import _

class Action:
    def __init__(self, db, translator):
        self.db = db
        self.translator = translator

    def handle(self, *args):
        """Action handler procedure"""
        raise NotImplementedError

    def execute(self, *args):
        """Execute the action specified by this object."""

        self.permission(*args)
        return self.handle(*args)


    def permission(self, *args):
        """Check whether the user has permission to execute this action.

        If not, raise Unauthorised."""

        pass


    def gettext(self, msgid):
        """Return the localized translation of msgid"""
        return self.translator.gettext(msgid)


    _ = gettext


class Retire(Action):

    def handle(self, designator):

        classname, itemid = hyperdb.splitDesignator(designator)

        # make sure we don't try to retire admin or anonymous
        if (classname == 'user' and
            self.db.user.get(itemid, 'username') in ('admin', 'anonymous')):
            raise ValueError, self._(
                'You may not retire the admin or anonymous user')

        # do the retire
        self.db.getclass(classname).retire(itemid)
        self.db.commit()


    def permission(self, designator):

        classname, itemid = hyperdb.splitDesignator(designator)

        if not self.db.security.hasPermission('Edit', self.db.getuid(),
                                              classname=classname, itemid=itemid):
            raise Unauthorised(self._('You do not have permission to '
                                      'retire the %(classname)s class.')%classname)
            

blob
mark :616
data 42840
import re, cgi, StringIO, urllib, time, random, csv, codecs

from roundup import hyperdb, token, date, password
from roundup.actions import Action as BaseAction
from roundup.i18n import _
import roundup.exceptions
from roundup.cgi import exceptions, templating
from roundup.mailgw import uidFromAddress

__all__ = ['Action', 'ShowAction', 'RetireAction', 'SearchAction',
           'EditCSVAction', 'EditItemAction', 'PassResetAction',
           'ConfRegoAction', 'RegisterAction', 'LoginAction', 'LogoutAction',
           'NewItemAction', 'ExportCSVAction']

# used by a couple of routines
chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'

class Action:
    def __init__(self, client):
        self.client = client
        self.form = client.form
        self.db = client.db
        self.nodeid = client.nodeid
        self.template = client.template
        self.classname = client.classname
        self.userid = client.userid
        self.base = client.base
        self.user = client.user
        self.context = templating.context(client)

    def handle(self):
        """Action handler procedure"""
        raise NotImplementedError

    def execute(self):
        """Execute the action specified by this object."""
        self.permission()
        return self.handle()

    name = ''
    permissionType = None
    def permission(self):
        """Check whether the user has permission to execute this action.

        True by default. If the permissionType attribute is a string containing
        a simple permission, check whether the user has that permission.
        Subclasses must also define the name attribute if they define
        permissionType.

        Despite having this permission, users may still be unauthorised to
        perform parts of actions. It is up to the subclasses to detect this.
        """
        if (self.permissionType and
                not self.hasPermission(self.permissionType)):
            info = {'action': self.name, 'classname': self.classname}
            raise exceptions.Unauthorised, self._(
                'You do not have permission to '
                '%(action)s the %(classname)s class.')%info

    _marker = []
    def hasPermission(self, permission, classname=_marker, itemid=None, property=None):
        """Check whether the user has 'permission' on the current class."""
        if classname is self._marker:
            classname = self.client.classname
        return self.db.security.hasPermission(permission, self.client.userid,
            classname=classname, itemid=itemid, property=property)

    def gettext(self, msgid):
        """Return the localized translation of msgid"""
        return self.client.translator.gettext(msgid)

    _ = gettext

class ShowAction(Action):

    typere=re.compile('[@:]type')
    numre=re.compile('[@:]number')

    def handle(self):
        """Show a node of a particular class/id."""
        t = n = ''
        for key in self.form.keys():
            if self.typere.match(key):
                t = self.form[key].value.strip()
            elif self.numre.match(key):
                n = self.form[key].value.strip()
        if not t:
            raise ValueError, self._('No type specified')
        if not n:
            raise exceptions.SeriousError, self._('No ID entered')
        try:
            int(n)
        except ValueError:
            d = {'input': n, 'classname': t}
            raise exceptions.SeriousError, self._(
                '"%(input)s" is not an ID (%(classname)s ID required)')%d
        url = '%s%s%s'%(self.base, t, n)
        raise exceptions.Redirect, url

class RetireAction(Action):
    name = 'retire'
    permissionType = 'Edit'

    def handle(self):
        """Retire the context item."""
        # ensure modification comes via POST
        if self.client.env['REQUEST_METHOD'] != 'POST':
            raise roundup.exceptions.Reject(self._('Invalid request'))

        # if we want to view the index template now, then unset the itemid
        # context info (a special-case for retire actions on the index page)
        itemid = self.nodeid
        if self.template == 'index':
            self.client.nodeid = None

        # make sure we don't try to retire admin or anonymous
        if self.classname == 'user' and \
                self.db.user.get(itemid, 'username') in ('admin', 'anonymous'):
            raise ValueError, self._(
                'You may not retire the admin or anonymous user')

        # check permission
        if not self.hasPermission('Retire', classname=self.classname,
                itemid=itemid):
            raise exceptions.Unauthorised, self._(
                'You do not have permission to retire %(class)s'
            ) % {'class': self.classname}

        # do the retire
        self.db.getclass(self.classname).retire(itemid)
        self.db.commit()

        self.client.ok_message.append(
            self._('%(classname)s %(itemid)s has been retired')%{
                'classname': self.classname.capitalize(), 'itemid': itemid})


class SearchAction(Action):
    name = 'search'
    permissionType = 'View'

    def handle(self):
        """Mangle some of the form variables.

        Set the form ":filter" variable based on the values of the filter
        variables - if they're set to anything other than "dontcare" then add
        them to :filter.

        Handle the ":queryname" variable and save off the query to the user's
        query list.

        Split any String query values on whitespace and comma.

        """
        self.fakeFilterVars()
        queryname = self.getQueryName()

        # editing existing query name?
        old_queryname = self.getFromForm('old-queryname')

        # handle saving the query params
        if queryname:
            # parse the environment and figure what the query _is_
            req = templating.HTMLRequest(self.client)

            url = self.getCurrentURL(req)

            key = self.db.query.getkey()
            if key:
                # edit the old way, only one query per name
                try:
                    qid = self.db.query.lookup(old_queryname)
                    if not self.hasPermission('Edit', 'query', itemid=qid):
                        raise exceptions.Unauthorised, self._(
                            "You do not have permission to edit queries")
                    self.db.query.set(qid, klass=self.classname, url=url)
                except KeyError:
                    # create a query
                    if not self.hasPermission('Create', 'query'):
                        raise exceptions.Unauthorised, self._(
                            "You do not have permission to store queries")
                    qid = self.db.query.create(name=queryname,
                        klass=self.classname, url=url)
            else:
                # edit the new way, query name not a key any more
                # see if we match an existing private query
                uid = self.db.getuid()
                qids = self.db.query.filter(None, {'name': old_queryname,
                        'private_for': uid})
                if not qids:
                    # ok, so there's not a private query for the current user
                    # - see if there's one created by them
                    qids = self.db.query.filter(None, {'name': old_queryname,
                        'creator': uid})

                if qids and old_queryname:
                    # edit query - make sure we get an exact match on the name
                    for qid in qids:
                        if old_queryname != self.db.query.get(qid, 'name'):
                            continue
                        if not self.hasPermission('Edit', 'query', itemid=qid):
                            raise exceptions.Unauthorised, self._(
                            "You do not have permission to edit queries")
                        self.db.query.set(qid, klass=self.classname,
                            url=url, name=queryname)
                else:
                    # create a query
                    if not self.hasPermission('Create', 'query'):
                        raise exceptions.Unauthorised, self._(
                            "You do not have permission to store queries")
                    qid = self.db.query.create(name=queryname,
                        klass=self.classname, url=url, private_for=uid)

            # and add it to the user's query multilink
            queries = self.db.user.get(self.userid, 'queries')
            if qid not in queries:
                queries.append(qid)
                self.db.user.set(self.userid, queries=queries)

            # commit the query change to the database
            self.db.commit()

    def fakeFilterVars(self):
        """Add a faked :filter form variable for each filtering prop."""
        cls = self.db.classes[self.classname]
        for key in self.form.keys():
            prop = cls.get_transitive_prop(key)
            if not prop:
                continue
            if isinstance(self.form[key], type([])):
                # search for at least one entry which is not empty
                for minifield in self.form[key]:
                    if minifield.value:
                        break
                else:
                    continue
            else:
                if not self.form[key].value:
                    continue
                if isinstance(prop, hyperdb.String):
                    v = self.form[key].value
                    l = token.token_split(v)
                    if len(l) != 1 or l[0] != v:
                        self.form.value.remove(self.form[key])
                        # replace the single value with the split list
                        for v in l:
                            self.form.value.append(cgi.MiniFieldStorage(key, v))

            self.form.value.append(cgi.MiniFieldStorage('@filter', key))

    def getCurrentURL(self, req):
        """Get current URL for storing as a query.

        Note: We are removing the first character from the current URL,
        because the leading '?' is not part of the query string.

        Implementation note:
        But maybe the template should be part of the stored query:
        template = self.getFromForm('template')
        if template:
            return req.indexargs_url('', {'@template' : template})[1:]
        """
        return req.indexargs_url('', {})[1:]

    def getFromForm(self, name):
        for key in ('@' + name, ':' + name):
            if self.form.has_key(key):
                return self.form[key].value.strip()
        return ''

    def getQueryName(self):
        return self.getFromForm('queryname')

class EditCSVAction(Action):
    name = 'edit'
    permissionType = 'Edit'

    def handle(self):
        """Performs an edit of all of a class' items in one go.

        The "rows" CGI var defines the CSV-formatted entries for the class. New
        nodes are identified by the ID 'X' (or any other non-existent ID) and
        removed lines are retired.
        """
        # ensure modification comes via POST
        if self.client.env['REQUEST_METHOD'] != 'POST':
            raise roundup.exceptions.Reject(self._('Invalid request'))

        # figure the properties list for the class
        cl = self.db.classes[self.classname]
        props_without_id = cl.getprops(protected=0).keys()

        # the incoming CSV data will always have the properties in colums
        # sorted and starting with the "id" column
        props_without_id.sort()
        props = ['id'] + props_without_id

        # do the edit
        rows = StringIO.StringIO(self.form['rows'].value)
        reader = csv.reader(rows)
        found = {}
        line = 0
        for values in reader:
            line += 1
            if line == 1: continue
            # skip property names header
            if values == props:
                continue

            # extract the itemid
            itemid, values = values[0], values[1:]
            found[itemid] = 1

            # see if the node exists
            if itemid in ('x', 'X') or not cl.hasnode(itemid):
                exists = 0

                # check permission to create this item
                if not self.hasPermission('Create', classname=self.classname):
                    raise exceptions.Unauthorised, self._(
                        'You do not have permission to create %(class)s'
                    ) % {'class': self.classname}
            else:
                exists = 1

            # confirm correct weight
            if len(props_without_id) != len(values):
                self.client.error_message.append(
                    self._('Not enough values on line %(line)s')%{'line':line})
                return

            # extract the new values
            d = {}
            for name, value in zip(props_without_id, values):
                # check permission to edit this property on this item
                if exists and not self.hasPermission('Edit', itemid=itemid,
                        classname=self.classname, property=name):
                    raise exceptions.Unauthorised, self._(
                        'You do not have permission to edit %(class)s'
                    ) % {'class': self.classname}

                prop = cl.properties[name]
                value = value.strip()
                # only add the property if it has a value
                if value:
                    # if it's a multilink, split it
                    if isinstance(prop, hyperdb.Multilink):
                        value = value.split(':')
                    elif isinstance(prop, hyperdb.Password):
                        value = password.Password(value)
                    elif isinstance(prop, hyperdb.Interval):
                        value = date.Interval(value)
                    elif isinstance(prop, hyperdb.Date):
                        value = date.Date(value)
                    elif isinstance(prop, hyperdb.Boolean):
                        value = value.lower() in ('yes', 'true', 'on', '1')
                    elif isinstance(prop, hyperdb.Number):
                        value = float(value)
                    d[name] = value
                elif exists:
                    # nuke the existing value
                    if isinstance(prop, hyperdb.Multilink):
                        d[name] = []
                    else:
                        d[name] = None

            # perform the edit
            if exists:
                # edit existing
                cl.set(itemid, **d)
            else:
                # new node
                found[cl.create(**d)] = 1

        # retire the removed entries
        for itemid in cl.list():
            if not found.has_key(itemid):
                # check permission to retire this item
                if not self.hasPermission('Retire', itemid=itemid,
                        classname=self.classname):
                    raise exceptions.Unauthorised, self._(
                        'You do not have permission to retire %(class)s'
                    ) % {'class': self.classname}
                cl.retire(itemid)

        # all OK
        self.db.commit()

        self.client.ok_message.append(self._('Items edited OK'))

class EditCommon(Action):
    '''Utility methods for editing.'''

    def _editnodes(self, all_props, all_links):
        ''' Use the props in all_props to perform edit and creation, then
            use the link specs in all_links to do linking.
        '''
        # figure dependencies and re-work links
        deps = {}
        links = {}
        for cn, nodeid, propname, vlist in all_links:
            numeric_id = int (nodeid or 0)
            if not (numeric_id > 0 or all_props.has_key((cn, nodeid))):
                # link item to link to doesn't (and won't) exist
                continue

            for value in vlist:
                if not all_props.has_key(value):
                    # link item to link to doesn't (and won't) exist
                    continue
                deps.setdefault((cn, nodeid), []).append(value)
                links.setdefault(value, []).append((cn, nodeid, propname))

        # figure chained dependencies ordering
        order = []
        done = {}
        # loop detection
        change = 0
        while len(all_props) != len(done):
            for needed in all_props.keys():
                if done.has_key(needed):
                    continue
                tlist = deps.get(needed, [])
                for target in tlist:
                    if not done.has_key(target):
                        break
                else:
                    done[needed] = 1
                    order.append(needed)
                    change = 1
            if not change:
                raise ValueError, 'linking must not loop!'

        # now, edit / create
        m = []
        for needed in order:
            props = all_props[needed]
            cn, nodeid = needed
            if props:
                if nodeid is not None and int(nodeid) > 0:
                    # make changes to the node
                    props = self._changenode(cn, nodeid, props)

                    # and some nice feedback for the user
                    if props:
                        info = ', '.join(map(self._, props.keys()))
                        m.append(
                            self._('%(class)s %(id)s %(properties)s edited ok')
                            % {'class':cn, 'id':nodeid, 'properties':info})
                    else:
                        m.append(self._('%(class)s %(id)s - nothing changed')
                            % {'class':cn, 'id':nodeid})
                else:
                    assert props

                    # make a new node
                    newid = self._createnode(cn, props)
                    if nodeid is None:
                        self.nodeid = newid
                    nodeid = newid

                    # and some nice feedback for the user
                    m.append(self._('%(class)s %(id)s created')
                        % {'class':cn, 'id':newid})

            # fill in new ids in links
            if links.has_key(needed):
                for linkcn, linkid, linkprop in links[needed]:
                    props = all_props[(linkcn, linkid)]
                    cl = self.db.classes[linkcn]
                    propdef = cl.getprops()[linkprop]
                    if not props.has_key(linkprop):
                        if linkid is None or linkid.startswith('-'):
                            # linking to a new item
                            if isinstance(propdef, hyperdb.Multilink):
                                props[linkprop] = [newid]
                            else:
                                props[linkprop] = newid
                        else:
                            # linking to an existing item
                            if isinstance(propdef, hyperdb.Multilink):
                                existing = cl.get(linkid, linkprop)[:]
                                existing.append(nodeid)
                                props[linkprop] = existing
                            else:
                                props[linkprop] = newid

        return '<br>'.join(m)

    def _changenode(self, cn, nodeid, props):
        """Change the node based on the contents of the form."""
        # check for permission
        if not self.editItemPermission(props, classname=cn, itemid=nodeid):
            raise exceptions.Unauthorised, self._(
                'You do not have permission to edit %(class)s'
            ) % {'class': cn}

        # make the changes
        cl = self.db.classes[cn]
        return cl.set(nodeid, **props)

    def _createnode(self, cn, props):
        """Create a node based on the contents of the form."""
        # check for permission
        if not self.newItemPermission(props, classname=cn):
            raise exceptions.Unauthorised, self._(
                'You do not have permission to create %(class)s'
            ) % {'class': cn}

        # create the node and return its id
        cl = self.db.classes[cn]
        return cl.create(**props)

    def isEditingSelf(self):
        """Check whether a user is editing his/her own details."""
        return (self.nodeid == self.userid
                and self.db.user.get(self.nodeid, 'username') != 'anonymous')

    _cn_marker = []
    def editItemPermission(self, props, classname=_cn_marker, itemid=None):
        """Determine whether the user has permission to edit this item."""
        if itemid is None:
            itemid = self.nodeid
        if classname is self._cn_marker:
            classname = self.classname
        # The user must have permission to edit each of the properties
        # being changed.
        for p in props:
            if not self.hasPermission('Edit', itemid=itemid,
                    classname=classname, property=p):
                return 0
        # Since the user has permission to edit all of the properties,
        # the edit is OK.
        return 1

    def newItemPermission(self, props, classname=None):
        """Determine whether the user has permission to create this item.

        Base behaviour is to check the user can edit this class. No additional
        property checks are made.
        """

        if not classname :
            classname = self.client.classname
        
        if not self.hasPermission('Create', classname=classname):
            return 0

        # Check Edit permission for each property, to avoid being able
        # to set restricted ones on new item creation
        for key in props:
            if not self.hasPermission('Edit', classname=classname,
                                      property=key):
                # We restrict by default and special-case allowed properties
                if key == 'date' or key == 'content':
                    continue
                elif key == 'author' and props[key] == self.userid:
                    continue
                return 0
        return 1

class EditItemAction(EditCommon):
    def lastUserActivity(self):
        if self.form.has_key(':lastactivity'):
            d = date.Date(self.form[':lastactivity'].value)
        elif self.form.has_key('@lastactivity'):
            d = date.Date(self.form['@lastactivity'].value)
        else:
            return None
        d.second = int(d.second)
        return d

    def lastNodeActivity(self):
        cl = getattr(self.client.db, self.classname)
        activity = cl.get(self.nodeid, 'activity').local(0)
        activity.second = int(activity.second)
        return activity

    def detectCollision(self, user_activity, node_activity):
        '''Check for a collision and return the list of props we edited
        that conflict.'''
        if user_activity and user_activity < node_activity:
            props, links = self.client.parsePropsFromForm()
            key = (self.classname, self.nodeid)
            # we really only collide for direct prop edit conflicts
            return props[key].keys()
        else:
            return []

    def handleCollision(self, props):
        message = self._('Edit Error: someone else has edited this %s (%s). '
            'View <a target="new" href="%s%s">their changes</a> '
            'in a new window.')%(self.classname, ', '.join(props),
            self.classname, self.nodeid)
        self.client.error_message.append(message)
        return

    def handle(self):
        """Perform an edit of an item in the database.

        See parsePropsFromForm and _editnodes for special variables.

        """
        # ensure modification comes via POST
        if self.client.env['REQUEST_METHOD'] != 'POST':
            raise roundup.exceptions.Reject(self._('Invalid request'))

        user_activity = self.lastUserActivity()
        if user_activity:
            props = self.detectCollision(user_activity, self.lastNodeActivity())
            if props:
                self.handleCollision(props)
                return

        props, links = self.client.parsePropsFromForm()

        # handle the props
        try:
            message = self._editnodes(props, links)
        except (ValueError, KeyError, IndexError,
                roundup.exceptions.Reject), message:
            self.client.error_message.append(
                self._('Edit Error: %s') % str(message))
            return

        # commit now that all the tricky stuff is done
        self.db.commit()

        # redirect to the item's edit page
        # redirect to finish off
        url = self.base + self.classname
        # note that this action might have been called by an index page, so
        # we will want to include index-page args in this URL too
        if self.nodeid is not None:
            url += self.nodeid
        url += '?@ok_message=%s&@template=%s'%(urllib.quote(message),
            urllib.quote(self.template))
        if self.nodeid is None:
            req = templating.HTMLRequest(self.client)
            url += '&' + req.indexargs_url('', {})[1:]
        raise exceptions.Redirect, url

class NewItemAction(EditCommon):
    def handle(self):
        ''' Add a new item to the database.

            This follows the same form as the EditItemAction, with the same
            special form values.
        '''
        # ensure modification comes via POST
        if self.client.env['REQUEST_METHOD'] != 'POST':
            raise roundup.exceptions.Reject(self._('Invalid request'))

        # parse the props from the form
        try:
            props, links = self.client.parsePropsFromForm(create=1)
        except (ValueError, KeyError), message:
            self.client.error_message.append(self._('Error: %s')
                % str(message))
            return

        # handle the props - edit or create
        try:
            # when it hits the None element, it'll set self.nodeid
            messages = self._editnodes(props, links)
        except (ValueError, KeyError, IndexError,
                roundup.exceptions.Reject), message:
            # these errors might just be indicative of user dumbness
            self.client.error_message.append(_('Error: %s') % str(message))
            return

        # commit now that all the tricky stuff is done
        self.db.commit()

        # redirect to the new item's page
        raise exceptions.Redirect, '%s%s%s?@ok_message=%s&@template=%s' % (
            self.base, self.classname, self.nodeid, urllib.quote(messages),
            urllib.quote(self.template))

class PassResetAction(Action):
    def handle(self):
        """Handle password reset requests.

        Presence of either "name" or "address" generates email. Presence of
        "otk" performs the reset.

        """
        otks = self.db.getOTKManager()
        if self.form.has_key('otk'):
            # pull the rego information out of the otk database
            otk = self.form['otk'].value
            uid = otks.get(otk, 'uid', default=None)
            if uid is None:
                self.client.error_message.append(
                    self._("Invalid One Time Key!\n"
                        "(a Mozilla bug may cause this message "
                        "to show up erroneously, please check your email)"))
                return

            # re-open the database as "admin"
            if self.user != 'admin':
                self.client.opendb('admin')
                self.db = self.client.db
                otks = self.db.getOTKManager()

            # change the password
            newpw = password.generatePassword()

            cl = self.db.user
            # XXX we need to make the "default" page be able to display errors!
            try:
                # set the password
                cl.set(uid, password=password.Password(newpw))
                # clear the props from the otk database
                otks.destroy(otk)
                self.db.commit()
            except (ValueError, KeyError), message:
                self.client.error_message.append(str(message))
                return

            # user info
            address = self.db.user.get(uid, 'address')
            name = self.db.user.get(uid, 'username')

            # send the email
            tracker_name = self.db.config.TRACKER_NAME
            subject = 'Password reset for %s'%tracker_name
            body = '''
The password has been reset for username "%(name)s".

Your password is now: %(password)s
'''%{'name': name, 'password': newpw}
            if not self.client.standard_message([address], subject, body):
                return

            self.client.ok_message.append(
                self._('Password reset and email sent to %s') % address)
            return

        # no OTK, so now figure the user
        if self.form.has_key('username'):
            name = self.form['username'].value
            try:
                uid = self.db.user.lookup(name)
            except KeyError:
                self.client.error_message.append(self._('Unknown username'))
                return
            address = self.db.user.get(uid, 'address')
        elif self.form.has_key('address'):
            address = self.form['address'].value
            uid = uidFromAddress(self.db, ('', address), create=0)
            if not uid:
                self.client.error_message.append(
                    self._('Unknown email address'))
                return
            name = self.db.user.get(uid, 'username')
        else:
            self.client.error_message.append(
                self._('You need to specify a username or address'))
            return

        # generate the one-time-key and store the props for later
        otk = ''.join([random.choice(chars) for x in range(32)])
        while otks.exists(otk):
            otk = ''.join([random.choice(chars) for x in range(32)])
        otks.set(otk, uid=uid)
        self.db.commit()

        # send the email
        tracker_name = self.db.config.TRACKER_NAME
        subject = 'Confirm reset of password for %s'%tracker_name
        body = '''
Someone, perhaps you, has requested that the password be changed for your
username, "%(name)s". If you wish to proceed with the change, please follow
the link below:

  %(url)suser?@template=forgotten&@action=passrst&otk=%(otk)s

You should then receive another email with the new password.
'''%{'name': name, 'tracker': tracker_name, 'url': self.base, 'otk': otk}
        if not self.client.standard_message([address], subject, body):
            return

        self.client.ok_message.append(self._('Email sent to %s') % address)

class RegoCommon(Action):
    def finishRego(self):
        # log the new user in
        self.client.userid = self.userid
        user = self.client.user = self.db.user.get(self.userid, 'username')
        # re-open the database for real, using the user
        self.client.opendb(user)

        # update session data
        self.client.session_api.set(user=user)

        # nice message
        message = self._('You are now registered, welcome!')
        url = '%suser%s?@ok_message=%s'%(self.base, self.userid,
            urllib.quote(message))

        # redirect to the user's page (but not 302, as some email clients seem
        # to want to reload the page, or something)
        return '''<html><head><title>%s</title></head>
            <body><p><a href="%s">%s</a></p>
            <script type="text/javascript">
            window.setTimeout('window.location = "%s"', 1000);
            </script>'''%(message, url, message, url)

class ConfRegoAction(RegoCommon):
    def handle(self):
        """Grab the OTK, use it to load up the new user details."""
        try:
            # pull the rego information out of the otk database
            self.userid = self.db.confirm_registration(self.form['otk'].value)
        except (ValueError, KeyError), message:
            self.client.error_message.append(str(message))
            return
        return self.finishRego()

class RegisterAction(RegoCommon, EditCommon):
    name = 'register'
    permissionType = 'Create'

    def handle(self):
        """Attempt to create a new user based on the contents of the form
        and then remember it in session.

        Return 1 on successful login.
        """
        # ensure modification comes via POST
        if self.client.env['REQUEST_METHOD'] != 'POST':
            raise roundup.exceptions.Reject(self._('Invalid request'))

        # parse the props from the form
        try:
            props, links = self.client.parsePropsFromForm(create=1)
        except (ValueError, KeyError), message:
            self.client.error_message.append(self._('Error: %s')
                % str(message))
            return

        # registration isn't allowed to supply roles
        user_props = props[('user', None)]
        if user_props.has_key('roles'):
            raise exceptions.Unauthorised, self._(
                "It is not permitted to supply roles at registration.")

        # skip the confirmation step?
        if self.db.config['INSTANT_REGISTRATION']:
            # handle the create now
            try:
                # when it hits the None element, it'll set self.nodeid
                messages = self._editnodes(props, links)
            except (ValueError, KeyError, IndexError,
                    roundup.exceptions.Reject), message:
                # these errors might just be indicative of user dumbness
                self.client.error_message.append(_('Error: %s') % str(message))
                return

            # fix up the initial roles
            self.db.user.set(self.nodeid,
                roles=self.db.config['NEW_WEB_USER_ROLES'])

            # commit now that all the tricky stuff is done
            self.db.commit()

            # finish off by logging the user in
            self.userid = self.nodeid
            return self.finishRego()

        # generate the one-time-key and store the props for later
        for propname, proptype in self.db.user.getprops().items():
            value = user_props.get(propname, None)
            if value is None:
                pass
            elif isinstance(proptype, hyperdb.Date):
                user_props[propname] = str(value)
            elif isinstance(proptype, hyperdb.Interval):
                user_props[propname] = str(value)
            elif isinstance(proptype, hyperdb.Password):
                user_props[propname] = str(value)
        otks = self.db.getOTKManager()
        otk = ''.join([random.choice(chars) for x in range(32)])
        while otks.exists(otk):
            otk = ''.join([random.choice(chars) for x in range(32)])
        otks.set(otk, **user_props)

        # send the email
        tracker_name = self.db.config.TRACKER_NAME
        tracker_email = self.db.config.TRACKER_EMAIL
        if self.db.config['EMAIL_REGISTRATION_CONFIRMATION']:
            subject = 'Complete your registration to %s -- key %s'%(tracker_name,
                                                                  otk)
            body = """To complete your registration of the user "%(name)s" with
%(tracker)s, please do one of the following:

- send a reply to %(tracker_email)s and maintain the subject line as is (the
reply's additional "Re:" is ok),

- or visit the following URL:

%(url)s?@action=confrego&otk=%(otk)s

""" % {'name': user_props['username'], 'tracker': tracker_name,
        'url': self.base, 'otk': otk, 'tracker_email': tracker_email}
        else:
            subject = 'Complete your registration to %s'%(tracker_name)
            body = """To complete your registration of the user "%(name)s" with
%(tracker)s, please visit the following URL:

%(url)s?@action=confrego&otk=%(otk)s

""" % {'name': user_props['username'], 'tracker': tracker_name,
        'url': self.base, 'otk': otk}
        if not self.client.standard_message([user_props['address']], subject,
                body, (tracker_name, tracker_email)):
            return

        # commit changes to the database
        self.db.commit()

        # redirect to the "you're almost there" page
        raise exceptions.Redirect, '%suser?@template=rego_progress'%self.base

class LogoutAction(Action):
    def handle(self):
        """Make us really anonymous - nuke the session too."""
        # log us out
        self.client.make_user_anonymous()
        self.client.session_api.destroy()

        # Let the user know what's going on
        self.client.ok_message.append(self._('You are logged out'))

        # reset client context to render tracker home page
        # instead of last viewed page (may be inaccessibe for anonymous)
        self.client.classname = None
        self.client.nodeid = None
        self.client.template = None

class LoginAction(Action):
    def handle(self):
        """Attempt to log a user in.

        Sets up a session for the user which contains the login credentials.

        """
        # ensure modification comes via POST
        if self.client.env['REQUEST_METHOD'] != 'POST':
            raise roundup.exceptions.Reject(self._('Invalid request'))

        # we need the username at a minimum
        if not self.form.has_key('__login_name'):
            self.client.error_message.append(self._('Username required'))
            return

        # get the login info
        self.client.user = self.form['__login_name'].value
        if self.form.has_key('__login_password'):
            password = self.form['__login_password'].value
        else:
            password = ''

        try:
            self.verifyLogin(self.client.user, password)
        except exceptions.LoginError, err:
            self.client.make_user_anonymous()
            self.client.error_message.extend(list(err.args))
            return

        # now we're OK, re-open the database for real, using the user
        self.client.opendb(self.client.user)

        # save user in session
        self.client.session_api.set(user=self.client.user)
        if self.form.has_key('remember'):
            self.client.session_api.update(set_cookie=True, expire=24*3600*365)

        # If we came from someplace, go back there
        if self.form.has_key('__came_from'):
            raise exceptions.Redirect, self.form['__came_from'].value

    def verifyLogin(self, username, password):
        # make sure the user exists
        try:
            self.client.userid = self.db.user.lookup(username)
        except KeyError:
            raise exceptions.LoginError, self._('Invalid login')

        # verify the password
        if not self.verifyPassword(self.client.userid, password):
            raise exceptions.LoginError, self._('Invalid login')

        # Determine whether the user has permission to log in.
        # Base behaviour is to check the user has "Web Access".
        if not self.hasPermission("Web Access"):
            raise exceptions.LoginError, self._(
                "You do not have permission to login")

    def verifyPassword(self, userid, password):
        '''Verify the password that the user has supplied'''
        stored = self.db.user.get(userid, 'password')
        if password == stored:
            return 1
        if not password and not stored:
            return 1
        return 0

class ExportCSVAction(Action):
    name = 'export'
    permissionType = 'View'

    def handle(self):
        ''' Export the specified search query as CSV. '''
        # figure the request
        request = templating.HTMLRequest(self.client)
        filterspec = request.filterspec
        sort = request.sort
        group = request.group
        columns = request.columns
        klass = self.db.getclass(request.classname)

        # full-text search
        if request.search_text:
            matches = self.db.indexer.search(
                re.findall(r'\b\w{2,25}\b', request.search_text), klass)
        else:
            matches = None

        h = self.client.additional_headers
        h['Content-Type'] = 'text/csv; charset=%s' % self.client.charset
        # some browsers will honor the filename here...
        h['Content-Disposition'] = 'inline; filename=query.csv'

        self.client.header()

        if self.client.env['REQUEST_METHOD'] == 'HEAD':
            # all done, return a dummy string
            return 'dummy'

        wfile = self.client.request.wfile
        if self.client.charset != self.client.STORAGE_CHARSET:
            wfile = codecs.EncodedFile(wfile,
                self.client.STORAGE_CHARSET, self.client.charset, 'replace')

        writer = csv.writer(wfile)
        self.client._socket_op(writer.writerow, columns)

        # and search
        for itemid in klass.filter(matches, filterspec, sort, group):
            row = []
            for name in columns:
                # check permission to view this property on this item
                if not self.hasPermission('View', itemid=itemid,
                        classname=request.classname, property=name):
                    raise exceptions.Unauthorised, self._(
                        'You do not have permission to view %(class)s'
                    ) % {'class': request.classname}
                row.append(str(klass.get(itemid, name)))
            self.client._socket_op(writer.writerow, row)

        return '\n'


class Bridge(BaseAction):
    """Make roundup.actions.Action executable via CGI request.

    Using this allows users to write actions executable from multiple frontends.
    CGI Form content is translated into a dictionary, which then is passed as
    argument to 'handle()'. XMLRPC requests have to pass this dictionary
    directly.
    """

    def __init__(self, *args):

        # As this constructor is callable from multiple frontends, each with
        # different Action interfaces, we have to look at the arguments to
        # figure out how to complete construction.
        if (len(args) == 1 and
            hasattr(args[0], '__class__') and
            args[0].__class__.__name__ == 'Client'):
            self.cgi = True
            self.execute = self.execute_cgi
            self.client = args[0]
            self.form = self.client.form
        else:
            self.cgi = False

    def execute_cgi(self):
        args = {}
        for key in self.form.keys():
            args[key] = self.form.getvalue(key)
        self.permission(args)
        return self.handle(args)

    def permission(self, args):
        """Raise Unauthorised if the current user is not allowed to execute
        this action. Users may override this method."""

        pass

    def handle(self, args):

        raise NotImplementedError

# vim: set filetype=python sts=4 sw=4 et si :

blob
mark :617
data 6001
#
# Copyright (C) 2007 Stefan Seefeld
# All rights reserved.
# For license terms see the file COPYING.txt.
#

from roundup import hyperdb
from roundup.cgi.exceptions import *
from roundup.exceptions import UsageError
from roundup.date import Date, Range, Interval
from roundup import actions
from SimpleXMLRPCServer import *

def translate(value):
    """Translate value to becomes valid for XMLRPC transmission."""

    if isinstance(value, (Date, Range, Interval)):
        return repr(value)
    elif type(value) is list:
        return [translate(v) for v in value]
    elif type(value) is tuple:
        return tuple([translate(v) for v in value])
    elif type(value) is dict:
        return dict([[translate(k), translate(value[k])] for k in value])
    else:
        return value


def props_from_args(db, cl, args, itemid=None):
    """Construct a list of properties from the given arguments,
    and return them after validation."""

    props = {}
    for arg in args:
        if arg.find('=') == -1:
            raise UsageError, 'argument "%s" not propname=value'%arg
        l = arg.split('=')
        if len(l) < 2:
            raise UsageError, 'argument "%s" not propname=value'%arg
        key, value = l[0], '='.join(l[1:])
        if value:
            try:
                props[key] = hyperdb.rawToHyperdb(db, cl, itemid,
                                                  key, value)
            except hyperdb.HyperdbValueError, message:
                raise UsageError, message
        else:
            props[key] = None

    return props

class RoundupInstance:
    """The RoundupInstance provides the interface accessible through
    the Python XMLRPC mapping."""

    def __init__(self, db, actions, translator):

        self.db = db
        self.actions = actions
        self.translator = translator

    def list(self, classname, propname=None):
        cl = self.db.getclass(classname)
        if not propname:
            propname = cl.labelprop()
        result = [cl.get(itemid, propname)
                  for itemid in cl.list()
                  if self.db.security.hasPermission('View', self.db.getuid(),
                                                    classname, propname, itemid)
                  ]
        return result

    def filter(self, classname, search_matches, filterspec,
               sort=[], group=[]):
        cl = self.db.getclass(classname)
        result = cl.filter(search_matches, filterspec, sort=sort, group=group)
        return result

    def display(self, designator, *properties):
        classname, itemid = hyperdb.splitDesignator(designator)
        cl = self.db.getclass(classname)
        props = properties and list(properties) or cl.properties.keys()
        props.sort()
        for p in props:
            if not self.db.security.hasPermission('View', self.db.getuid(),
                                                  classname, p, itemid):
                raise Unauthorised('Permission to view %s of %s denied'%
                                   (p, designator))
            result = [(prop, cl.get(itemid, prop)) for prop in props]
        return dict(result)

    def create(self, classname, *args):
        
        if not self.db.security.hasPermission('Create', self.db.getuid(), classname):
            raise Unauthorised('Permission to create %s denied'%classname)

        cl = self.db.getclass(classname)

        # convert types
        props = props_from_args(self.db, cl, args)

        # check for the key property
        key = cl.getkey()
        if key and not props.has_key(key):
            raise UsageError, 'you must provide the "%s" property.'%key

        for key in props:
            if not self.db.security.hasPermission('Edit', self.db.getuid(), classname,
                                                  property=key):
                raise Unauthorised('Permission to create %s denied'%classname)

        # do the actual create
        try:
            result = cl.create(**props)
        except (TypeError, IndexError, ValueError), message:
            raise UsageError, message
        return result

    def set(self, designator, *args):

        classname, itemid = hyperdb.splitDesignator(designator)
        cl = self.db.getclass(classname)
        props = props_from_args(self.db, cl, args, itemid) # convert types
        for p in props.iterkeys():
            if not self.db.security.hasPermission('Edit', self.db.getuid(),
                                                  classname, p, itemid):
                raise Unauthorised('Permission to edit %s of %s denied'%
                                   (p, designator))
        try:
            return cl.set(itemid, **props)
        except (TypeError, IndexError, ValueError), message:
            raise UsageError, message


    builtin_actions = {'retire': actions.Retire}

    def action(self, name, *args):
        """Execute a named action."""
        
        if name in self.actions:
            action_type = self.actions[name]
        elif name in self.builtin_actions:
            action_type = self.builtin_actions[name]
        else:
            raise Exception('action "%s" is not supported %s' % (name, ','.join(self.actions.keys())))
        action = action_type(self.db, self.translator)
        return action.execute(*args)


class RoundupDispatcher(SimpleXMLRPCDispatcher):
    """RoundupDispatcher bridges from cgi.client to RoundupInstance.
    It expects user authentication to be done."""

    def __init__(self, db, actions, translator,
                 allow_none=False, encoding=None):

        SimpleXMLRPCDispatcher.__init__(self, allow_none, encoding)
        self.register_instance(RoundupInstance(db, actions, translator))
                 

    def dispatch(self, input):
        return self._marshaled_dispatch(input)

    def _dispatch(self, method, params):

        retn = SimpleXMLRPCDispatcher._dispatch(self, method, params)
        retn = translate(retn)
        return retn
    

commit refs/remotes/svn/gsoc-2009
mark :618
author stefan <stefan@57a73879-2fb5-44c3-a270-3262357dd7e2> 1245204127 +0000
committer stefan <stefan@57a73879-2fb5-44c3-a270-3262357dd7e2> 1245204127 +0000
data 148
Merge from trunk.

git-svn-id: https://svn.roundup-tracker.org/svnroot/roundup/roundup/branches/gsoc-2009@4223 57a73879-2fb5-44c3-a270-3262357dd7e2
from :614
M 100644 :615 roundup/actions.py
M 100755 :616 roundup/cgi/actions.py
M 100644 :617 roundup/xmlrpc.py

blob
mark :619
data 18325
<tal:block metal:define-macro="frame">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
 <head>
  <title metal:define-slot="head_title">title goes here</title>
  <link rel="stylesheet" type="text/css" href="@@file/style.css" />
  <meta http-equiv="Content-Type"
        tal:attributes="content string:text/html;; charset=${request/client/charset}" />
  <script tal:replace="structure request/base_javascript"></script>
  <metal:x define-slot="more-javascript" />
 </head>
 <body tal:attributes="class request/classname"
       tal:define="kw_create python:request.user.hasPermission('Create', 'keyword');
                   bug_columns string:id,activity,title,creator,status;
                   bug_columns_showall string:id,activity,title,creator,assignee,status;
                   bug_status_notclosed string:-1,1,2,4;

                   task_columns string:id,activity,title,creator,status;
                   task_columns_showall string:id,activity,title,creator,assignee,status;
                   task_status_notclosed string:-1,1,2,4;

                   milestone_columns string:id,activity,title,creator,status;
                   milestone_columns_showall string:id,activity,title,creator,assignee,status;
                   milestone_status_notclosed string:-1,1,2,4;">
  <div class="header">
   <h1><a href="/">Roundup Demo Tracker</a></h1>
   <div id="searchbox">
    <form name="searchform" method="get" action="bug" id="searchform">
     <div id="search">
      <input type="hidden" name="@columns"
             tal:attributes="value bug_columns_showall"/>
      <input type="hidden" name="@sort" value="-activity" />
      <input type="hidden" name="@group" value="priority" />
      <input type="hidden" name="@filter" value="status"/>
      <input type="hidden" name="status" tal:attributes="value bug_status_notclosed"/>
      <input class="input-text" id="search-text" name="@search_text" size="10" />
      <input type="submit" id="submit" value="search in open bugs" name="submit" class="input-button"/>
     </div>
    </form>
   </div> <!-- searchbox -->
  </div> <!-- header -->
  <div class="navigation">
   <div class="menu">
    <ul>
     <li class="current"><a href="/" i18n:translate="">Bugs</a>
      <ul tal:condition="python:request.user.hasPermission('View', 'bug')">
       <li tal:condition="python:request.user.hasPermission('Create', 'bug')">
        <a href="bug?@template=item" i18n:translate="">Create New</a>
       </li>
       <li>
        <a href="#"
           tal:attributes="href python:request.indexargs_url('bug', {
                                '@sort': '-activity',
                                '@group': 'priority',
                                '@filter': 'status',
                                '@columns': bug_columns_showall,
                                '@search_text': '',
                                'status': bug_status_notclosed,
                                '@dispname': i18n.gettext('Show All'),
                                '@startwith': 0,
                                })"
                i18n:translate="">Show Open</a>
       </li>
       <li><a href="#"
              tal:attributes="href python:request.indexargs_url('bug', {
                                '@sort': '-activity',
                                '@group': 'priority',
                                '@filter': 'status,assignee',
                                '@columns': bug_columns,
                                '@search_text': '',
                                'status': bug_status_notclosed,
                                'assignee': '-1',
                                '@dispname': i18n.gettext('Show Unassigned'),
                                '@startwith': 0,
                                })"
                i18n:translate="">Show Unassigned</a>
       </li>
       <li>
        <a href="bug?@template=search&status=1" i18n:translate="">Search</a>
       </li>
       <li>
        <form method="post" action="#">
         <input type="submit" class="form-small" value="Show bug:" i18n:attributes="value"/>
         <input class="form-small" size="4" type="text" name="@number"/>
         <input type="hidden" name="@type" value="bug"/>
         <input type="hidden" name="@action" value="show"/>
        </form>
       </li>
      </ul>
     </li>
     <li class="current"><a href="/" i18n:translate="">Tasks</a>
      <ul tal:condition="python:request.user.hasPermission('View', 'task')">
       <li tal:condition="python:request.user.hasPermission('Create', 'task')">
        <a href="task?@template=item" i18n:translate="">Create New</a>
       </li>
       <li>
        <a href="#" tal:attributes="href python:request.indexargs_url('task', {
                                '@sort': '-activity',
                                '@group': 'priority',
                                '@filter': 'status',
                                '@columns': task_columns_showall,
                                '@search_text': '',
                                'status': task_status_notclosed,
                                '@dispname': i18n.gettext('Show All'),
                                '@startwith': 0,
                                })"
                i18n:translate="">Show Open</a>
       </li>
       <li>
        <a href="#" tal:attributes="href python:request.indexargs_url('task', {
                                '@sort': '-activity',
                                '@group': 'priority',
                                '@filter': 'status,assignee',
                                '@columns': task_columns,
                                '@search_text': '',
                                'status': task_status_notclosed,
                                'assignee': '-1',
                                '@dispname': i18n.gettext('Show Unassigned'),
                                '@startwith': 0,
                                })"
                i18n:translate="">Show Unassigned</a>
       </li>
       <li>
        <a href="task?@template=search&status=1" i18n:translate="">Search</a>
       </li>
       <li>
        <form method="post" action="#">
         <input type="submit" class="form-small" value="Show task:" i18n:attributes="value"/>
         <input class="form-small" size="4" type="text" name="@number"/>
         <input type="hidden" name="@type" value="task"/>
         <input type="hidden" name="@action" value="show"/>
        </form>
       </li>
      </ul>
     </li>
     <li class="current"><a href="milestone" i18n:translate="">Milestones</a>
      <ul tal:condition="python:request.user.hasPermission('View', 'milestone')">
       <li tal:condition="python:request.user.hasPermission('Create', 'milestone')">
        <a href="milestone?@template=item" i18n:translate="">Create New</a>
       </li>
       <li>
        <a href="#" tal:attributes="href python:request.indexargs_url('milestone', {
                                '@filter': 'status',
                                'status': milestone_status_notclosed,
                                '@dispname': i18n.gettext('Show Open'),
                                '@startwith': 0,
                                })"
                i18n:translate="">Show Open</a>
       </li>
      </ul>
     </li>
    </ul>
    <ul class="user">
     <li tal:condition="python:request.user.username=='anonymous'" class="submenu">
      <b i18n:translate="">User</b>
      <form method="post" action="#">
       <ul>
        <li>
         <tal:span i18n:translate="">Login</tal:span><br/>
         <input size="10" name="__login_name"/><br/>
         <input size="10" type="password" name="__login_password"/><br/>
         <input type="hidden" name="@action" value="Login"/>
         <input type="checkbox" name="remember" id="remember"/>
         <label for="remember" i18n:translate="">Remember me?</label><br/>
         <input class="form-small" type="submit" value="Login" i18n:attributes="value"/><br/>
         <input type="hidden" name="__came_from" tal:attributes="value string:${request/env/PATH_INFO}"/>
         <span tal:replace="structure request/indexargs_form" />
        </li>
        <li>
         <a href="user?@template=register"
            tal:condition="python:request.user.hasPermission('Create', 'user')"
            i18n:translate="">Register</a>
        </li>
        <li>
         <a href="user?@template=forgotten" i18n:translate="">Lost&nbsp;your&nbsp;login?</a>
        </li>
       </ul>
      </form>
     </li>
     <li tal:condition="python:request.user.username != 'anonymous'" class="submenu">
      <p class="label"><b tal:replace="request/user/username">username</b></p>
      <ul>
       <li>
        <a href="#" tal:attributes="href python:request.indexargs_url('bug', {
                                     '@sort': '-activity',
                                     '@group': 'priority',
                                     '@filter': 'status,assignee',
                                     '@columns': bug_columns,
                                     '@search_text': '',
                                     'status': bug_status_notclosed,
                                     'assignee': request.user.id,
                                     '@dispname': i18n.gettext('Bugs assigned to you'),
                                     '@startwith': 0})"
                    i18n:translate="">Bugs assigned to you</a>
       </li>
       <li>
        <a tal:attributes="href string:user${request/user/id}" i18n:translate="">Your Details</a>
       </li>
       <li>
        <a tal:attributes="href python:request.indexargs_url('', {'@action':'logout'})" 
           i18n:translate="">Logout</a>
       </li>
       <li class="" tal:condition="python:request.user.hasPermission('View', 'query')">
        <span i18n:translate=""><b>Your Queries</b> (<a class="nomargin" href="query?@template=edit">edit</a>)</span><br/>
        <ul tal:repeat="qs request/user/queries">
         <li>
          <a tal:attributes="href string:${qs/klass}?${qs/url}&@dispname=${qs/name}" tal:content="qs/name">link</a>
         </li>
        </ul>
       </li>
       <li class="" tal:condition="python:request.user.hasPermission('View', 'user')">
        <b i18n:translate="">Administration</b>
        <ul>
         <li tal:condition="python:request.user.hasPermission('Edit', None)">
          <a href="home?@template=classlist" i18n:translate="">Class List</a>
         </li>
         <li tal:condition="python:request.user.hasPermission('View', 'user')
                            or request.user.hasPermission('Edit', 'user')">
          <a href="user?@sort=username"  i18n:translate="">User List</a>
         </li>
         <li tal:condition="python:request.user.hasPermission('Create', 'user')">
          <a href="user?@template=item" i18n:translate="">Add User</a>
         </li>
         <li tal:condition="python:request.user.hasPermission('Edit', 'keyword')">
          <a href="keyword" i18n:translate="">Edit Keywords</a>
         </li>
        </ul>
       </li>
      </ul>
     </li>
    </ul> <!-- user -->
   </div> <!-- menu -->
  </div> <!-- navigation -->
  <div class="content">
   <h1 id="breadcrumb"><span metal:define-slot="body_title">body title</span></h1>
   <p tal:condition="options/error_message | nothing" class="error-message"
      tal:repeat="m options/error_message" tal:content="structure m" />
   <p tal:condition="options/ok_message | nothing" class="ok-message">
    <span tal:repeat="m options/ok_message" tal:content="structure string:$m <br/ > " />
    <a class="form-small" tal:attributes="href request/current_url" i18n:translate="">clear this message</a>
   </p>
   <tal:block metal:define-slot="content">Page content goes here</tal:block>
  </div> <!-- content -->
  <div class="footer">
<!-- Created: Wed Jan 14 11:55:38 EST 2009 -->
<!-- hhmts start -->
Last modified: Wed Jun  3 00:02:37 EDT 2009
<!-- hhmts end -->
  </div> <!-- footer -->
  <pre tal:condition="request/form/deissue | nothing" tal:content="request"></pre>
 </body>
</html>
</tal:block>

<!--
The following macros are intended to be used in search pages.

The invoking context must define a "name" variable which names the
property being searched.

See issue.search.html in the classic template for examples.
-->

<!-- creates a th and a label: -->
<th metal:define-macro="th_label"
    tal:define="required required | python:[]"
    tal:attributes="class python:(name in required) and 'required' or nothing">
  <label tal:attributes="for name" tal:content="label" i18n:translate="">text</label>
	<metal:x define-slot="behind_the_label" />
</th>

<td metal:define-macro="search_input">
  <input tal:attributes="value python:request.form.getvalue(name) or nothing;
                         name name;
                         id name"/>
</td>

<td metal:define-macro="search_date">
  <input tal:attributes="value python:request.form.getvalue(name) or nothing;
                         name name;
                         id name"/>
  <a class="classhelp"
	 tal:attributes="href python:'''javascript:help_window('task?@template=calendar&property=%s&form=itemSynopsis', 300, 200)'''%name">(cal)</a>
</td>

<td metal:define-macro="search_popup">
  <!--
    context needs to specify the popup "columns" as a comma-separated
    string (eg. "id,title" or "id,name,description") as well as name
  -->
  <input tal:attributes="value python:request.form.getvalue(name) or nothing;
                         name name;
                         id name"/>
  <span tal:replace="structure python:db.task.classhelp(columns,
                                      property=name)" />
</td>

<td metal:define-macro="search_select">
  <select tal:attributes="name name; id name"
          tal:define="value python:request.form.getvalue(name)">
    <option value="" i18n:translate="">don't care</option>
    <metal:slot define-slot="extra_options" />
    <option value="" i18n:translate="" disabled="disabled">------------</option>
    <option tal:repeat="s python:db[db_klass].list()"
            tal:attributes="value s/id; selected python:value == s.id"
            tal:content="python:s[db_content]"></option>
  </select>
</td>

<!-- like search_select, but translates the further values.
Could extend it (METAL 1.1 attribute "extend-macro")
-->
<td metal:define-macro="search_select_translated">
  <select tal:attributes="name name; id name"
          tal:define="value python:request.form.getvalue(name)">
    <option value="" i18n:translate="">don't care</option>
    <metal:slot define-slot="extra_options" />
    <option value="" i18n:translate="" disabled="disabled">------------</option>
    <option tal:repeat="s python:db[db_klass].list()"
            tal:attributes="value s/id; selected python:value == s.id"
						tal:content="python:s[db_content]"
						i18n:translate=""></option>
  </select>
</td>

<!-- currently, there is no convenient API to get a list of all roles -->
<td metal:define-macro="search_select_roles"
	  tal:define="onchange onchange | nothing">
  <select name="roles" id="roles" tal:attributes="onchange onchange">
    <option value="" i18n:translate="">don't care</option>
    <option value="" i18n:translate="" disabled="disabled">------------</option>
    <option value="User">User</option>
    <option value="Developer">Developer</option>
    <option value="Coordinator">Coordinator</option>
  </select>
</td>

<td metal:define-macro="search_multiselect">
  <input tal:attributes="value python:request.form.getvalue(name) or nothing;
                         name name;
                         id name"/>
  <span tal:replace="structure python:db[db_klass].classhelp(db_content,
                                        property=name, width='600')" />
</td>

<td metal:define-macro="search_checkboxes">
 <ul class="search-checkboxes"
     tal:define="value python:request.form.getvalue(name);
                 values python:value and value.split(',') or []">
 <li tal:repeat="s python:db[db_klass].list()">
  <input type="checkbox" tal:attributes="name name; id string:$name-${s/id};
    value s/id; checked python:s.id in values" />
  <label tal:attributes="for string:$name-${s/id}"
         tal:content="python:s[db_content]" />
 </li>
 <li metal:define-slot="no_value_item">
  <input type="checkbox" value="-1" tal:attributes="name name;
     id string:$name--1; checked python:value == '-1'" />
  <label tal:attributes="for string:$name--1" i18n:translate="">no value</label>
 </li>
 </ul>
</td>

<td metal:define-macro="column_input">
  <input type="checkbox" name="@columns"
         tal:attributes="value name;
                         checked python:name in cols"/>
</td>

<td metal:define-macro="sort_input">
  <input type="radio" name="@sort"
         tal:attributes="value name;
                         checked python:name == sort_on"/>
</td>

<td metal:define-macro="group_input">
  <input type="radio" name="@group"
         tal:attributes="value name;
                         checked python:name == group_on"/>
</td>

<!--
The following macros are intended for user editing.

The invoking context must define a "name" variable which names the
property being searched; the "edit_ok" variable tells whether the
current user is allowed to edit.

See user.item.html in the classic template for examples.
-->
<script metal:define-macro="user_utils" type="text/javascript" src="@@file/user_utils.js"></script>

<!-- src: value will be re-used for other input fields -->
<input metal:define-macro="user_src_input"
    type="text" tal:attributes="onblur python:edit_ok and 'split_name(this)';
    id name; name name; value value; readonly not:edit_ok"
    value="heinz.kunz"/>
<!-- normal: no re-using -->
<input metal:define-macro="user_normal_input" type="text"
    tal:attributes="id name; name name; value value; readonly not:edit_ok"
    value="heinz"/>
<!-- password: type; no initial value -->
    <input metal:define-macro="user_pw_input" type="password"
    tal:attributes="id name; name name; readonly not:edit_ok" value=""/>
    <input metal:define-macro="user_confirm_input" type="password"
    tal:attributes="id name; name string:@confirm@$name; readonly not:edit_ok" value=""/>


commit refs/remotes/svn/gsoc-2009
mark :620
author stefan <stefan@57a73879-2fb5-44c3-a270-3262357dd7e2> 1245204199 +0000
committer stefan <stefan@57a73879-2fb5-44c3-a270-3262357dd7e2> 1245204199 +0000
data 198
Fix validity issue.  This is a test Subversion cookie: [[SVN:4216]]

git-svn-id: https://svn.roundup-tracker.org/svnroot/roundup/roundup/branches/gsoc-2009@4224 57a73879-2fb5-44c3-a270-3262357dd7e2
from :618
M 100644 :619 share/roundup/templates/devel/html/page.html

blob
mark :1
data 53
#!/ysr/bin/env python
#
# rs - a repository surgeon.

reset refs/tags/lightweight-sample
commit refs/tags/lightweight-sample
mark :2
author Eric S. Raymond <esr@thyrsus.com> 1287754582 -0400
committer Eric S. Raymond <esr@thyrsus.com> 1287754582 -0400
data 107
The adventure begins.

Example subversion cookie from map file [[SVN:4224]].
Example mark cookie: [[:618]]
M 100644 :1 rs

