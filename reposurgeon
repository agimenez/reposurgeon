#!/usr/bin/env python
#
# rs - a repository surgeon.
#
# By ESR, October 2010.  BSD terms apply.
#
import sys, os, getopt, commands, cStringIO, cmd, tempfile
import readline, time, calendar, re, signal, shutil, copy, shlex
import email.message, email.parser, email.utils

# TO DO
#
# * Delete blobs when deleting commits.
#
# * Implement undo, expunge, coalesce, cut.
#
# * Dates in specification expressions.
#
# * Test hg and bzr methods.

# All knowledge about specific version-control systems lives in the
# following dictionary. The key is the subdirectory name that tells us
# we have a given VCS active.  The values in the tuple are,
# respectively:
#
# * Name of the SCM for diagnostic messages
# * Command to export from the SCM to the interchange format
# * Command to initialize a new repo
# * Command to import from the interchange format
# * Command to check out working copies of the repo files.
# * Command to view the repo.
#
# Note that some of the commands used here are plugins or extensions
# that are not part of the basic VCS. Thus these may fail when called;
# we need to be prepared to cope with that.
#
# Subversion/RCS/CVS aren't in this table because exporting from them
# requires fixups of usernames in the committer information to full
# email addresses.  Trying to handle that entirely inside this tool
# would be excessively messy, so we don't. Instead we let the user
# transform dump files and cope with the export/import himself.
#
version="1.0"

vcstypes = {
    "git" : (".git",
             "git fast-export -M -C --all >%s",
             "git init",
             "git fast-import <%s",
             "git checkout",
             "gitk"),
     # FIXME: hg and bzr methods are untested
    "hg" : (".hg",
            "hg-fast-export.sh %s",   # Not part of stock hg
            "hg init",
            "hg fast-import %s",      # Not part of stock hg
            "hg checkout",
            "hg view"),
    "bzr" : (".bzr",
             "bzr-fast-export --plain %s",
             "bzr init",
             "bzr fast-import %s",
             "bzr checkout",
             None),    # FIXME: there probably is something...
    }

verbose = 0

class Baton:
    "Ship progress indications to stderr."
    def __init__(self, prompt, endmsg='done'):
        self.stream = sys.stderr
        self.stream.write(prompt + "...")
        if os.isatty(self.stream.fileno()):
            self.stream.write(" \010")
        self.stream.flush()
        self.count = 0
        self.endmsg = endmsg
        self.time = time.time()
        return

    def twirl(self, ch=None):
        if self.stream is None:
            return
        if os.isatty(self.stream.fileno()):
            if ch:
                self.stream.write(ch)
            else:
                self.stream.write("-/|\\"[self.count % 4])
                self.stream.write("\010")
            self.stream.flush()
        self.count = self.count + 1
        return

    def end(self, msg=None):
        if msg == None:
            msg = self.endmsg
        if self.stream:
            self.stream.write("...(%2.2f sec) %s.\n" % (time.time() - self.time, msg))
        return

class RepoSurgeonEmail(email.message.Message):
    "Specialized email message with a distinguishing starter."
    def __init__(self, **kwargs):
        email.message.Message.__init__(self, **kwargs)        
        self.set_unixfrom(78 * "-")
    @staticmethod
    def readmsg(fp):
        msg = ''
        firstline = fp.readline()
        if not firstline:
            return None
        elif not firstline.startswith(78 * "-"):
            msg = firstline
        while True:
            line = fp.readline()
            if not line:
                break
            if line.startswith(78 * "-"):
                break
            msg += line
        return msg

    def __str__(self):
        return email.message.Message.__str__(self).replace("\n--", "\n.--")

def iso8601_from_unixtime(secs_since_epoch, tzoff=""):
    "Make an ISO8601 timestamp frm Unix time."
    return time.strftime("%Y-%m-%dT%H:%M:%S", time.gmtime(secs_since_epoch)) + tzoff

def rfc822_from_unixtime(secs_since_epoch, tzoff=""):
    "Make an RFC822 timestamp from Unix time."
    if tzoff:
        tzoff = " " + tzoff
    return time.strftime("%a %d %b %Y %H:%M:%S", time.gmtime(secs_since_epoch)) + tzoff

def gitdate_from_unixtime(secs_since_epoch, tzoff):
    "Make a git timestamp from Unix time."
    return str(secs_since_epoch) + " " + tzoff

def parse_date_or_die(text):
    "Recognize date formats that exporters or Email programs might emit."
    # OK, here is where we try to be as robust as possible in
    # recognizing dates. First, look for git's preferred format.
    # We can leave this unchanged.
    text = text.strip() 
    if re.match(r"[0-9]+\s*[+-][0-9]+$", text):
        (unixtime, timezone) = text.split()
        unixtime = int(unixtime)
        return (text, unixtime, timezone)
    # If that didn't work, look for an RFC822 date, which git also
    # accepts. Note, there could be edge cases that Python's parser
    # handles but git doesn't.
    rfcdate = email.utils.parsedate_tz(text) 
    if rfcdate:
        (tm_year, tm_mon, tm_mday, tm_hour, tm_min,
               tm_sec, tm_wday, tm_yday, tim_isdst, timezone) = rfcdate
        unixtime = email.utils.mktime_tz(rfcdate)
        timezone = (timezone or "+0000")
        #text = gitdate_from_unixtime(unixtime, timezone)
        return (text, unixtime, timezone)
    # Also accept IS8601 dates in Zulu time, just becasuse I
    # like them.  These we'll canonicalize to git format.
    # Someday we should accept ISO8601 with [+-]nnnn timezone. 
    try:
        iso860date = time.strptime(text, "%Y-%m-%dT%H:%M:%SZ")
        unixtime = calendar.timegm(iso860date)
        timezone = "+0000"
        text = gitdate_from_unixtime(unixtime, timezone)
        return  (text, unixtime, timezone)
    except ValueError:
        # time.strptime() throws this
        # "time data 'XXXX' does not match format '%Y-%m-%dT%H:%M:%S'" 
        pass
    # Date format not recognized
    raise RepoSurgeonException("'%s' is not a valid timestamp" % text)

class Attribution:
    "Represents an attribution of a repo action to a person and time."
    def __init__(self, person):
        # First, validity-check the email address
        (self.name, self.email) = email.utils.parseaddr(person)
        if not self.name or not self.email:
            RepoSurgeonException("can't recognize address in attribution")
        # Attribution format is actually stricter than RFC822;
        # needs to have a following date in the right place.
        person = person.replace(" <", "|").replace("> ", "|")
        try:
            self.when = person.strip().split("|")[2]
        except (ValueError, IndexError):
            raise RepoSurgeonException("malformed attribution %s" % person)
        (self.when, self.unixtime, self.timezone) = parse_date_or_die(self.when)
    def isodate(self):
        "Return ISO format for time/date of this action."
        return iso8601_from_unixtime(self.unixtime, self.timezone)
    def rfc822date(self):
        "Return RFC822 format for time/date of this action."
        return rfc822_from_unixtime(self.unixtime, self.timezone)
    def gitdate(self):
        "Return git internal format for time/date of this action."
        return gitdate_from_unixtime(self.unixtime, self.timezone)
    def email_out(self, msg, hdr):
        "Update an RC822 message object with a representation of this."
        msg[hdr] = self.name + " <" + self.email + ">"
        msg[hdr + "-Date"] = self.rfc822date()
    def __eq__(self, other):
        "Compare attributions after canonicalization."
        return (self.name == other.name and self.email == other.email
                and self.unixtime == other.unixtime
                and self.timezone == other.timezone)
    def __str__(self):
        return self.name + " <" + self.email + "> " + self.when

class Blob:
    "Represent a detached blob of data referenced by a mark."
    def __init__(self, subdir):
        self.mark = None
        self.subdir = os.path.abspath(subdir)
        self.path = None      # First in-repo path associated with this blob
    def blobfile(self):
        return self.subdir + "/blob-" + self.mark
    def __str__(self):
        dp = open(self.blobfile())
        content = dp.read()
        dp.close()
        return "blob\nmark %s\ndata %d\n%s\n" % (self.mark, len(content), content)

class Tag:
    "Represents an annotated tag."
    def __init__(self, name, committish, tagger, content):
        self.name = name
        self.committish = committish
        self.tagger = tagger
        self.comment = content
    def email_out(self, eventnum):
        "Enable do_mailbox_out() to report these."
        msg = RepoSurgeonEmail()
        msg["Event-Number"] = str(eventnum+1)
        msg["Tag-Name"] = self.name
        self.tagger.email_out(msg, "Tagger")
        msg.set_payload(self.comment)
        return str(msg)
    def email_in(self, msg):
        "Update this Tag from a parsed email message."
        if "Tag-Name" not in msg or "Tagger" not in msg:
            raise RepoSurgeonException("update to tag %s is malformed" %
                                       self.name)
        modified = False
        newname = msg["Tag-Name"]
        if self.name != newname:
            self.name = newname
            modified = True
        (newname, newemail) = email.utils.parseaddr(msg["Tagger"])
        if not newname or not newemail:
            raise RepoSurgeonException("can't recognize address in Tagger")
        else:
            if self.tagger.name != newname or self.tagger.email != newemail:
                (self.tagger.name, self.tagger.email) = (newname, newemail)
                modified = True
        (text, unixtime, timezone) = parse_date_or_die(msg["Tagger-Date"])
        if unixtime!=self.tagger.unixtime or timezone!=self.tagger.timezone:
            self.tagger.unixtime = unixtime
            self.tagger.timezone = timezone
            modified = True
        newcomment = msg.get_payload().strip() + "\n"
        if newcomment != self.comment:
            modified = True
        self.comment = newcomment
        return modified
    def __str__(self):
        return "tag %s\nfrom %s\ntagger %s\ndata %d\n%s\n" \
             % (self.name, self.committish, self.tagger, len(self.comment), self.comment)

class Reset:
    "Represents a branch creation."
    def __init__(self):
        self.ref = None
        self.committish = None
    def __str__(self):
        st = "reset %s\n" % self.ref
        if self.committish:
            st += "from %s\n\n" % self.committish
        return st

class FileOp:
    "Represent a primitive operation on a file."
    def __init__(self, opline):
        if opline.startswith("M"):
            (self.op, self.mode, self.ref, self.path) = shlex.split(opline)
        elif opline[0] == "D":
            (self.op, self.path) = shlex.split(opline)
        elif opline[0] in ("R", "C"):
            (self.op, self.source, self.target) = shlex.split(opline)
        elif opline == "deleteall":
            self.op = "deleteall"
        else:
            raise RepoSureonException("unexpected fileop %s while parsing" % opline)
    def paths(self):
        "return the set of all paths touched by this file op."
        if self.op == "M":
            return set([self.ref])
        elif self.op in ("D", "R", "C"):
            return set([source, self.target])
    def relevant(self, other):
        "Do two fileops touch the same file(s)?"
        if self.op or other.op == "deleteall":
            return True
        else:
            return self.paths().intersect(other.paths)
    def compose(self, other):
        "Compose two relevant fileops."
        # Here's what the fields in the return value mean:
        # 0: Was this a modification
        # 1: Op to replace the first with (None means delete)
        # 2: Op to replace the second with (None means delete)
        # 3: If not None, a warning to emit
        # 4: Case number, for coverage analysis
        pair = (self.op, other.op)
        #
        # First op M
        #
        if pair == ("M", "M"):
            # Leve these in place, they get handled later.
            return (False, self, other, None, 0)
        # Modify X followed by delete X is equivalent to delete X 
        if self.op == "M" and other.op in "D":
            return (True, other, None, None, 1)
        if self.op == "M" and other.op in ("R", "C"):
            # Commute R and C ops with M so they fall towards start oof list
            if self.path == other.source:
                self.path = other.target
                return (True, other, self, None, 2)
            # The copy or rename undoes the modification
            elif self.path == other.target:
                return(True, other, None, None, 3)
        #
        # First op D or deleteall
        #
        # Delete followed by modify undoes delete, since M carries whole files 
        if pair == ("D", "M"):
            return (True, other, None, None, 4)
        # But we have to leave deletealls in place, since they affect other ops
        if pair == ("deleteall", "M"):
            return (False, self, other, None, 5)
        # These cases should be impossible
        if self.op == "deleteall" and other.op != "M":
            return (False, self, other,
                    "operation other than M after deleteall?", -1)
        if self.op == "D" and other.op == "D":
            return (False, self, other, "Two Ds of %?" % self.path, -2)
        if self.op == "D" and other.op in ("R", "C"):
            if self.path == other.source:
                return (False, self, other,
                        "R or C of %s after deletion?" % self.path, -3)
            else:
                return (False, self, other, None, 6)
        #
        # First op R
        #
        if pair == ("R", "D"):
            if self.target == other.path:
                # Rename followed by delete of target composes to nothing
                return (True, None, None, None, 7)
            else:
                # On followed by delete of source discard the delete
                # but user should be warned. 
                return (False, self, None,
                        "delete of %s after renaming to %s?" % (other.path, self.source), -4)
        # Rename followed by deleteall shouldn't be possible
        if pair == ("R", "deleteall") and self.target == other.path:
            return (False, None, other,
                    "rename before deletall not removed?", -5)
        # Leave rename or copy followed by modify alone
        if pair == ("R", "M") or pair == ("C", "M"):
            return (False, self, other, None, 7)
        # Compose renames and copies where possible
        if self.op == "R" and other.op in ("R", "C"):
            if self.target == other.source:
                self.target = other.target
                return (True, source, None, None, 8)
            else:
                return (False, source, other,
                        "R %s %s is inconsistent with following operation" \
                        % (self.source, self.target), -6)
        #
        # First op C
        #
        if pair == ("C", "D"):
            if self.source == target.path:
                # Copy followed by delete of the source is a rename.
                self.op = "R"
                return (True, self, None, None, 9)
            elif self.target == target.path:
                # This delete undoes the copy
                return (True, None, None, None, 10)
        if pair == ("C", "R"):
            if self.source == other.source:
                # No reduction
                return (False, self, other, None, 11)
            else:
                # Copy followed by a rename of the target reduces to single copy
                if self.target == other.source:
                    self.target = other.target
                    return (True, self, None, None, 12)
        if pair == ("C", "C"):
            # No reduction
            return (False, self, other, None, 13)
        #
        # Case not covered
        #
        raise RepoSurgeonException("can't compose op '%s' and '%s'" % (self, other))
    def __str__(self):
        if self.op == "M":
            st = " ".join((self.op, self.mode, self.ref)) + " "
            if len(self.path.split()) > 1:
                st += '"' + self.path + '"'
            else:
                st += self.path
            if self.ref == 'inline':
                fp = open(op.copyname)
                content = fp.read()
                fp.close()
                st += "data %d\n%s\n" % (len(content), content)
        elif self.op in ("D", "R", "C"):
            st = '%s "%s" "%s"' %  (self.op, self.source, self.target)
        elif self.op == "deleteall":
            st = self.op
        else:
            raise RepoSureonException("unexpected fileop %s while writing" % opline)
        return st

class Commit:
    "Generic commit object."
    def __init__(self, repo):
        self.repo = repo
        self.mark = None             # Mark name of commit (may be None)
        self.author = None           # Author of commit
        self.committer = None        # Person responsible for committing it.
        self.comment = None          # Commit comment
        self.parents = []            # List of parent nodes
        self.branch = None           # branch name
        self.fileops = []            # blob and file operation list
        self.pushed_to = False       # Flagged for resolution after delete
    def lister(self, eventnum):
        "Enable do_list() to report these."
        topline = self.comment.split("\n")[0]
        return "%6d %s %-50s" % \
                      (eventnum+1, self.committer.isodate()[:-5], topline[:50]) 
    def email_out(self, eventnum):
        "Enable do_mailbox_out() to report these."
        msg = RepoSurgeonEmail()
        msg["Event-Number"] = str(eventnum+1)
        self.author.email_out(msg, "Author")
        self.committer.email_out(msg, "Committer")
        msg.set_payload(self.comment)
        return str(msg)
    def email_in(self, msg):
        "Update this commit from a parsed email message."
        if "Author" not in msg or "Committer" not in msg or "Author-Date" not in msg or "Committer-Date" not in msg:
            idme = self.mark or "unmarked"
            raise RepoSurgeonException("update to commit %s is malformed" %
                                       idme)
        modified = False
        (newname, newemail) = email.utils.parseaddr(msg["Author"])
        if not newname or not newemail:
            raise RepoSurgeonException("can't recognize address in Author")
        else:
            if self.author.name != newname or self.author.email != newemail:
                (self.author.name, self.author.email) = (newname, newemail)
                modified = True
        (text, unixtime, timezone) = parse_date_or_die(msg["Author-Date"])
        if unixtime!=self.author.unixtime or timezone!=self.author.timezone:
            self.author.unixtime = unixtime
            self.author.timezone = timezone
            modified = True
        (newname, newemail) = email.utils.parseaddr(msg["Committer"])
        if not newname or not newemail:
            raise RepoSurgeonException("can't recognize address in Committer")
        else:
            if self.committer.name != newname or self.committer.email != newemail:
                (self.committer.name, self.committer.email) = (newname, newemail)
                modified = True
        (text, unixtime, timezone) = parse_date_or_die(msg["Committer-Date"])
        if unixtime!=self.committer.unixtime or timezone!=self.committer.timezone:
            self.committer.unixtime = unixtime
            self.committer.timezone = timezone
            modified = True
        newcomment = msg.get_payload().strip() + "\n"
        if newcomment != self.comment:
            modified = True
        self.comment = newcomment
        return modified
    def children(self):
        "Get a list of this commit's children."
        return filter(lambda e: self.mark in e.parents, self.repo.commits()) 
    def canonicalize(self, warnhook):
        "Canonicalize the list of file operations in this commit."
        coverage = set([])
        # Handling deletall ioerations is simple
        lastdeleteall = None
        for (i, a) in enumerate(self.fileops):
            if a.op == "deleteall":
                lastdeleteall = i
        if i is not None:
            if verbose >= 2:
                print "reposurgeon: removing all before rightmost deleteall"
            self.fileops = self.fileops[lastdeleteall:]
        # Composition in the general case is trickier.
        while True:
            # Keep making passes until nothing mutates
            mutated = False
            for (i, a) in enumerate(self.fileops):
                if a is None:
                    continue
                for (i, b) in enumerate(self.fileops):
                    if b is None:
                        continue
                    if a.relevant(b):
                        (modified, newa, newb, warn, case) = a.compose(b)
                        if modified:
                            mutated = True
                            self.fileops[i] = newa
                            self.fileops[j] = newb
                            if warn:
                                warnhook(warn)
                            coverage.add(case)
            if not mutated:
                break
        self.fileops = filter(lambda x: x is not None, self.fileops) 
        return coverage
    def cliques(self):
        "Return a dictionary mapping filenames to associated M cliques."
        cliques = {}
        for (i, fileop) in enumerate(self.fileops):
            if fileop.op == "M":
                if fileop.path not in cliques:
                    cliques[fileop.path] = []
                cliques[fileop.path].append(i)
        return cliques
    def __str__(self):
        st = "commit %s\n" % self.branch
        if self.mark:
            st += "mark %s\n" % self.mark
        if self.author:
            st += "author %s\n" % self.author
        if self.committer:
            st += "committer %s\n" % self.committer
        st += "data %d\n%s" % (len(self.comment), self.comment) 
        if self.parents:
            st += "from %s\n" % self.parents[0]
        for ancestor in self.parents[1:]:
            st += "merge %s\n" % self.parents[0]
        for op in self.fileops:
            st += str(op) + "\n"
        return st + "\n"

class Passthrough:
    "Represents a passthrough line."
    def __init__(self, line):
        self.text = text
    def email_out(self, eventnum):
        "Enable do_mailbox_out() to report these."
        msg = RepoSurgeonEmail()
        msg["Event-Number"] = str(eventnum+1)
        msg.set_payload(self.comment)
        return str(msg)
    def __str__(self):
        return self.text

class RepoSurgeonException:
    def __init__(self, msg):
        self.msg = msg

class Repository:
    "Generic repository object."
    def __init__(self):
        self.name = None
        self.readtime = None
        self.readsize = 0
        self.type = None
        self.sourcedir = None
        self.events = []    # A list of the events encountered, in order
        self.nmarks = 0
        self.branches = set([])
        self.blob_refcount = {}
        self.import_line = 0
        self.restore_set = set([])
        self.case_coverage = set([])
    def cleanup(self):
        cmd = "rm -fr %s" % (self.subdir(),)
        if verbose:
            print "Repository cleanup calls " + cmd
        os.system(cmd)
    def subdir(self, name=None):
        if name is None:
            name = self.name
        if not name:
            return ".rs"
        else:
            return ".rs-" + name 
    def error(self, msg, atline=True):
        if atline:
            raise RepoSurgeonException(msg + " at line " + `self.import_line`)
        else:
            raise RepoSurgeonException(msg)
    def warn(self, msg, atline=True):
        if atline:
            print "reposurgeon: " + msg + " at line " + `self.import_line`
        else:
            raise "reposurgeon: " + msg
    def fast_import(self, fp, baton=None):
        "Initialize repo object from fast-import stream."
        try:
            cmd = "rm -fr %s; mkdir %s" % (self.subdir(), self.subdir())
            if verbose >= 2:
                print "Repository fast import calls " + cmd
            os.system(cmd)
        except OSError:
            self.error("can't create operating directory", atline=False)
        self.import_line = 0
        linebuffers = []
        ncommits = 0
        def read_data(dp, line=None):
            if not line:
                line = readline()
            if line.startswith("data <<"):
                delim = line[7:]
                while True:
                    dataline = fp.readline()
                    if dataline == delim:
                        break
                    elif not dataline:
                        raise RepoSurgeonException("EOF while reading blob")
            elif line.startswith("data"):
                try:
                    count = int(line[5:])
                    dp.write(fp.read(count))
                except ValueSelf.Error:
                    raise self.error("bad count in data")
            else:
                raise self.error("malformed data header %s" % `line`)
            return dp
        def readline():
            if linebuffers:
                line = linebuffers.pop()
            else:
                self.import_line += 1
                line = fp.readline()
                self.readsize += len(line)
            return line
        def pushback(line):
            linebuffers.append(line)
        while True:
            line = readline()
            if not line:
                break
            elif not line.strip():
                continue
            elif line.startswith("blob"):
                blob = Blob(self.subdir())
                line = readline()
                if line.startswith("mark"):
                    blob.mark = line[5:].strip()
                    read_data(open(blob.blobfile(), "w")).close()
                    self.nmarks += 1
                else:
                    self.error("missing mark after blob")
                self.events.append(blob)
                if baton:
                    baton.twirl()
            elif line.startswith("data"):
                self.error("unexpected data object")
            elif line.startswith("commit"):
                commitbegin = self.import_line
                commit = Commit(self)
                commit.branch = line.split()[1]
                self.branches.add(commit.branch)
                ncommits += 1
                inlinecount = 0
                while True:
                    line = readline()
                    if not line:
                        self.error("EOF after commit")
                    elif line.startswith("mark"):
                        commit.mark = line[5:].strip()
                        self.nmarks += 1
                    elif line.startswith("author"):
                        try:
                            commit.author = Attribution(line[7:])
                        except ValueError:
                            self.error("malformed author line")
                    elif line.startswith("committer"):
                        try:
                            commit.committer = Attribution(line[10:])
                        except ValueError:
                            self.error("malformed committer line")
                    elif line.startswith("data"):
                        dp = read_data(cStringIO.StringIO(), line)
                        commit.comment = dp.getvalue()
                        dp.close()
                    elif line.startswith("from") or line.startswith("merge"):
                        commit.parents.append(line.split()[1])
                    # Handling of file ops begins.
                    elif line[0] in ("C", "D", "R"):
                        commit.fileops.append(FileOp(line))
                    elif line == "filedeletall\n":
                        commit.fileops.append(FileOp("filedeleteall"))
                    elif line[0] == "M":
                        fileop = FileOp(line)
                        commit.fileops.append(fileop)
                        if fileop.ref[0] == ':':
                            fileop.copyname = self.subdir() + "/blob-" + fileop.ref
                            self.blob_refcount[fileop.ref] = self.blob_refcount.get(fileop.ref, 0)+1
                            for obj in self.events:
                                if isinstance(obj, Blob) and obj.mark == fileop.ref:
                                    obj.path = fileop.path
                                    break
                            else:
                                self.error("no blob matches commit reference to %s" % fileop.ref)
                        elif fileop.ref[0] == 'inline':
                            fileop.copyname = self.subdir() + "/inline-" + `inline_count`
                            self.read_data(open(fileop.copyname, "w")).close()
                            inline_count += 1
                        else:
                            self.error("unknown content type in filemodify")
                    # Handling of file ops ends.
                    else:
                        pushback(line)
                        break
                if not (commit.mark and commit.author and commit.committer):
                    self.import_line = commitbegin
                    self.error("missing required fields in commit")
                self.events.append(commit)
                if baton:
                    baton.twirl()
            elif line.startswith("reset"):
                reset = Reset()
                reset.ref = line[6:].strip()
                line = readline()
                if line.startswith("from"):
                    reset.committish = line[5:].strip()
                else:
                    pushback(line)
                self.events.append(reset)
                if baton:
                    baton.twirl()
            elif line.startswith("tag"):
                tagname = line[4:].strip()
                line = readline()
                if line.startswith("from"):
                    referent = line[5:].strip()
                else:
                    self.error("missing from after tag")
                line = readline()
                if line.startswith("tagger"):
                        try:
                            tagger = Attribution(line[7:])
                        except ValueError:
                            self.error("malformed tagger line")
                else:
                    self.error("missing tagger after from in tag")
                dp = read_data(cStringIO.StringIO())
                self.events.append(Tag(tagname,
                                       referent, tagger, dp.getvalue()))
                if baton:
                    baton.twirl()
            else:
                # Simply pass through any line we don't understand.
                self.events.append(line)
        if baton:
            baton.end()
        self.readtime = time.time()
        for blob in self.blob_refcount:
            if self.blob_refcount[blob] != 1:
                self.warn("%d references to blob %s" % (self.blob_refcount[blob], blob))
    def fast_export(self, fp, baton=None):
        "Dump the repo object in fast-export format."
        for command in self.events:
            if baton:
                baton.twirl()
            fp.write(str(command))
        if baton:
            baton.end()
    def restore(self, filename):
        "Add a path to the restore set, to be copied back on rebuild."
        if os.path.exists(filename):
            self.restore_set.add(filename)
        else:
            self.error("%s doesn't exist" % filename, atline=False)
    def unrestore(self, filename):
        "Remove a path from the restore set."
        if filename in self.restorable:
            self.restore_set.remove(filename)
        else:
            self.error("%s doesn't exist" % filename, atline=False)
    def restorable(self):
        "Return the repo's restore set."
        return self.restore_set
    def rename(self, newname):
        "Rename the repo."
        try:
            # Can fail if the target directory exists.
            if verbose >= 2:
                print "Repository rename calls os.rename(%s, %s)" % (self.subdir(), self.subdir(newname))
            os.rename(self.subdir(), self.subdir(newname))
            self.name = newname
            for event in self.events:
                if isinstance(event, Blob):
                    event.subdir = os.path.abspath(self.subdir())
        except OSError, e:
            raise RepoSurgeonException("repo rename %s -> %s failed"
                                       % (self.subdir(), self.subdir(newname)))
    def commits(self):
        "Return a list of the repository commit objects."
        return filter(lambda e: isinstance(e, Commit), self.events)
    def delete(self, selected, policy):
        "Delete commits, handling multiple Ms on a file with specified policy"
        if not policy:
            policy = "complain"
        # Make sure we do deletions from gretest commit number to least
        selected = copy.copy(selected)
        selected.sort(lambda x, y: cmp(y, x))
        if verbose >= 2:
            print "Deletion list is %s" % selected
        # Here are the deletions
        for ei in selected:
            event = self.events[ei]
            if event.__class__ in (Reset, Tag, Passthrough):
                self.events.pop(d)
            elif isinstance(event, Blob):
                raise RepoSurgeonException("attempt to directly delete blob")
            elif isinstance(event, Commit):
                for child in event.children():
                    # Reparent each child
                    child.parents.remove(event.mark)
                    child.parents += event.parents
                    # Push a copy of the parent's file ops to it
                    # and mark it as needing resolution
                    child.fileops = copy.copy(event.fileops) + child.fileops
                    child.pushed_to = True
                # Remove tags referring to this event
                self.events = filter(lambda t: not isinstance(t, Tag) \
                                          or t.committish != event.mark,
                                          self.events)
                # And remove it
                self.events.pop(ei)
            else:
                raise RepoSurgeonException("unexpected object in event array")
        # Canonicalize all the commits that got ops pushed to them
        for (i, event) in enumerate(self.events):
            if not isinstance(event, Commit):
                continue
            elif event.pushed_to:
                if verbose >= 2:
                    print "Commit %d, before canonicalization:" % (i + 1,)
                    for op in event.fileops:
                        print str(op)
                self.case_coverage |= event.canonicalize(lambda m: self.warn(m, atline=False))
                if verbose >= 2:
                    print "Commit %d, after canonicalization:" % (i +1,)
                    for op in event.fileops:
                        print str(op)
                # Now apply policy in the mutiple-M case
                for (path, oplist) in event.cliques().items():
                    if len(oplist) == 1:
                        continue
                    if not policy or policy == "complain" or verbose >= 2:
                        print "Commit %d has multiple Ms for %s" % (i+1, path)
                    func = getattr(self, 'policy_' + policy)
                    func(event, oplist)
                    if verbose >= 2:
                        print "Commit %d, after applying policy:" % (i +1,)
                        for op in event.fileops:
                            print str(op)
        # Clear everybody's problem flag
        for commit in self.commits():
            commit.pushed_to = False
    # Deletion policy hooks
    def policy_complain(self, commit, oplist):
        "Bitch but nothing else." 
        pass
    def policy_coalesce(self, commit, oplist):
        "Remove all but the last M."
        while len(oplist) > 1:
            commit.fileops.pop(oplist.pop(0))
    # Container emulation methods
    def __len__(self):
        return len(self.events)
    def __getitem__(self, i):
        return self.events[i]
    def __setitem__(self, i, v):
        self.events[i] = v

def complain(msg):
    print >>sys.stderr, "reposurgeon:", msg

def read_repo(source, preferred):
    "Read a repository using fast-import."
    if source == '-':
        repo = Repository()
        repo.fast_import(sys.stdin, verbose and Baton("reposurgeon: from stdin"))
    elif not os.path.exists(source):
        complain("%s does not exist" % source)
        return None
    elif not os.path.isdir(source):
        repo = Repository()
        repo.fast_import(open(source), verbose and Baton("reposurgeon: from %s" % os.path.relpath(source)))
    else:
        if verbose > 1:
            if preferred:
                print "reposurgeon: looking for a %s repo..." % preferred
            else:
                print "reposurgeon: looking for any repo..."
        hitcount = 0
        for (name, (dirname, exporter, initializer, importer, checkout, viewer)) in vcstypes.items():
            if preferred and name != preferred:
                continue
            subdir = os.path.join(source, dirname)
            if os.path.exists(subdir) and os.path.isdir(subdir):
                (foundname, foundexporter) = (name, exporter)
                hitcount += 1
        if hitcount == 0:
            complain("couldn't find a repo under %s" % os.path.relpath(source))
            return None
        elif hitcount > 1:
            complain("too many repos under %s" % os.path.relpath(source))
            return None
        try:
            repo = Repository()
            repo.type = foundname
            repo.sourcedir = source
            (tfdesc, tfname) = tempfile.mkstemp()
            # A FIFO version wouldn't block our reads until
            # the entire file is written - faster, and makes our baton
            # spinner useful -- if it worked.
            #tfname = os.path.join("/tmp/reposurgeon"+`os.getpid()`)
            #os.mkfifo(tfname)
            cmd = ""
            if source != '.':
                cmd += "cd %s >/dev/null;" % source
            cmd += foundexporter % tfname
            act(cmd)
            tp = open(tfname)
            repo.fast_import(tp, verbose and Baton("reposurgeon: from %s repo at '%s'" % (foundname, os.path.relpath(source))));
            tp.close()
        finally:
            os.remove(tfname)
    return repo

class CriticalRegion:
    "Encapsulate operations to try and make us un-interruptible."
    # This number is magic. Python sets a much higher signal.NSIG
    # value, but under Linux the signal calls start to trigger
    # runtime errors at this value and above.
    NSIG = 32
    def __init__(self):
        "Begin critical region."
        # Alas that we lack sigblock support
        self.handlers = [None]*(CriticalRegion.NSIG+1)
        for sig in range(1, CriticalRegion.NSIG):
            if not sig in (signal.SIGKILL, signal.SIGSTOP):
                self.handlers[sig] = signal.signal(sig, signal.SIG_IGN)
    def __del__(self):
        "End critical region."
        for sig in range(1, CriticalRegion.NSIG):
            if not sig in (signal.SIGKILL, signal.SIGSTOP):
                signal.signal(sig, self.handlers[sig])

def rebuild_repo(repo, target, preferred):
    "Rebuild a repository from the captured state."
    if not target and repo.sourcedir:
        target = repo.sourcedir
    if target:
        target = os.path.abspath(target)
    else:
        complain("no default destination for rebuild")
        return
    if not preferred:
        complain("please prefer a repo type first")
        return

    # Create a new empty directory to do the rebuild in
    staging = target + "-stage" + str(os.getpid())
    assert(os.path.isabs(target) and os.path.isabs(staging))
    try:
        os.mkdir(staging)
    except OSError:
        complain("staging directory creation failed")
        return
    # Try the rebuild in the empty staging directory 
    (repodir,exporter,initializer,importer,checkout,viewer) = vcstypes[preferred]
    here = os.getcwd()
    try:
        os.chdir(staging)
        if os.system(initializer):
            complain("repo initialization failed")
            return
        (tfdesc, tfname) = tempfile.mkstemp()
        tp = open(tfname, "w")
        repo.fast_export(tp, verbose and Baton("reposurgeon: exporting"))
        tp.close()
        if os.system(importer % tfname):
            complain("repo import failed")
            return
        if os.system(checkout):
            complain("repo checkout failed")
            return
        if verbose:
            print "reposurgeon: rebuild is complete."

        os.chdir(here)
        # Rebuild succeeded - make an empty backup directory
        backupcount = 1
        while True:
            savedir = target + (".~%d~" % backupcount)
            if os.path.exists(savedir):
                backupcount += 1
            else:
                break
        os.mkdir(savedir)
        assert(os.path.abspath(savedir))

        # This is a critical region.  Ignore all signals until we're done.
        if verbose:
            complain("build critical region begins...")
        critical = CriticalRegion()

        # Move the unmodified repo contents in target to the backup directory.
        # Then move the staging contents to the target directory.
        # Finally, restore designated files from backup to target.
        for sub in os.listdir(target):
            os.rename(os.path.join(target, sub),
                      os.path.join(savedir, sub))
        if verbose:
            complain("repo backed up to %s" % os.path.relpath(savedir))
        for sub in os.listdir(staging):
            os.rename(os.path.join(staging, sub),
                      os.path.join(target, sub))
        for file in repo.restore:
            shutil.copytree(os.path.join(savedir, sub),
                            os.path.join(target, sub))
        if verbose:
            complain("build critical region ends. Success.")
        del critical
    finally:
        os.chdir(here)
        os.remove(tfname)
        os.system("rm -fr " + staging)

def act(cmd):
    (err, out) = commands.getstatusoutput(cmd)
    if err:
        complain("'%s' failed" % cmd)
        return False
    else:
        return True

def fatal(msg):
    print >>sys.stderr, "reposurgeon:", msg
    raise SystemExit, 1

class RepoSurgeon(cmd.Cmd):
    "Repository surgeon command interpreter."
    def __init__(self):
        cmd.Cmd.__init__(self)
        self.use_rawinput = True
        self.repeat = 0
        self.prompt = "reposurgeon% "
        self.repo = None
        self.preferred = None
        self.selection = []
        self.name_to_repo = {}
    #
    # Housekeeping hooks.
    #
    def postcmd(self, stop, line):
        if line == "EOF":
            return True
    def emptyline(self):
        pass
    def precmd(self, line):
        "Pre-command hook."
        if self.repeat:
            sys.stdout.write(line)
        return line
    def do_shell(self, line):
        "Execute a shell command."
        os.system(line)
    def do_EOF(self, line):
        "Terminate reposurgeon."
        self.cleanup()
        return True
    def cleanup(self):
        "Tell all the repos we're holding to clean up."
        for repo in self.name_to_repo.values():
            repo.cleanup()
    #
    # The selection-language parsing code starts here.
    #
    def set_selection_set(self, line, default=None):
        "Implement object-selection syntax."
        # Returns the line with the selection removed
        self.selection = []
        if not self.repo:
            return line
        self.line = line
        try:
            self.selection = list(self.eval_expression())
            if self.line == line:
                self.selection = default
            else:
                self.selection.sort()
        except RepoSurgeonException, e:
            print >>sys.stderr, "reposurgeon:", e.msg
            self.selection = []
        return self.line
    def peek(self):
        return self.line and self.line[0]
    def pop(self):
        if not self.line:
            return ''
        else:
            c = self.line[0]
            self.line = self.line[1:]
            return c
    def push(c):
        self.line = c + self.line[0]
    def eval_expression(self):
        if verbose >= 2:
            print "eval_expression(%s)" % self.line
        self.line = self.line.lstrip()
        value = self.eval_disjunct()
        c = self.peek()
        if c and not c.isspace() and not c.isalpha():
            raise RepoSurgeonException("trailing junk on selection: %s" % `self.line`)
        if verbose >= 2:
            print "%s <- eval_expression(), left = %s" % (value, `self.line`)
        return value
    def eval_disjunct(self):
        "Evaluate a disjunctive expression (| has lowest precedence)" 
        if verbose >= 2:
            print "eval_disjunct(%s)" % self.line
        self.line = self.line.lstrip()
        disjunct = set([])
        while True:
            conjunct = self.eval_conjunct()
            if conjunct is None:
                break
            else:
                disjunct |= conjunct
            self.line = self.line.lstrip()
            if self.peek() == '|':
                self.pop()
            else:
                break
        if verbose >= 2:
            print "%s <- eval_disjunct(), left = %s" % (disjunct, `self.line`)
        return disjunct
    def eval_conjunct(self):
        "Evaluate a conjunctive expression (& has higher precedence)" 
        if verbose >= 2:
            print "eval_conjunct(%s)" % self.line
        self.line = self.line.lstrip()
        conjunct = set(range(0, len(self.repo)))
        while True:
            term = self.eval_term()
            if term is None:
                break
            else:
                conjunct = conjunct & term
            self.line = self.line.lstrip()
            if self.peek() == '&':
                self.pop()
            else:
                break
        if verbose >= 2:
            print "%s <- eval_conjunct(), left = %s" % (conjunct, `self.line`)
        return conjunct
    def eval_term(self):
        if verbose >= 2:
            print "eval_term(%s)" % self.line
        self.line = self.line.lstrip()
        if self.peek() == '{':
            self.pop()
            term = self.eval_disjunct()
            self.line = self.line.lstrip()
            if self.peek() != '}':
                raise RepoSurgeonException("trailing junk on inner expression")
            else:
                self.pop()
        else:
            term = self.eval_visibility()
            if term is None:
                term = self.eval_polyrange()
                if term is None:
                    term = self.eval_textsearch()
        if verbose >= 2:
            print "%s <- eval_term(), left = %s" % (term, `self.line`)
        return term
    def eval_visibility(self):
        "Parse a visibility spec."
        if verbose >= 2:
            print "eval_visibility(%s)" % self.line
        self.line = self.line.lstrip()
        if not self.peek() == "=":
            visibility = None
        else:
            typeletters = {
                "B" : Blob,
                "C" : Commit,
                "T" : Tag,
                "R" : Reset,
                "P" : Passthrough,
                }
            visible = set([])
            modmode = None
            self.pop()
            while self.peek() in tuple(typeletters.keys()):
                c = self.pop()
                if c in typeletters:
                    visible.add(typeletters[c])
            # We need a special check here because these expressions
            # could otherwise run onto the text part of the command.
            if self.peek() not in "()|& ":
                raise RepoSurgeonException("garbled type mask at %s" % `self.line`)
            if verbose >= 2:
                print "reposurgeon: visibility set is %s with %s left" % (map(lambda x: x.__name__, visible), `self.line`)
            selected = []
            for (i, event) in enumerate(self.repo):
                if event.__class__ in visible:
                    selected.append(i)
            visibility = set(selected)
        if verbose >= 2:
            print "%s <- eval_visibility(), left = %s" % (visibility, `self.line`)
        return visibility
    def eval_polyrange(self):
        "Parse a polyrange specification (list of intervals)."
        if verbose >= 2:
            print "eval_polyrange(%s)" % self.line
        self.line = self.line.lstrip()
        polyrange_initials = (":","0","1","2","3","4","5","6","7","8","9","$", "@")
        if not self.peek() in polyrange_initials:
            polyrange = None
        else:
            selection = []
            while self.peek() in polyrange_initials + (".", ","):
                # First, literal command numbers (1-origin)
                match = re.match("[0-9]+", self.line)
                if match:
                    number = match.group()
                    selection.append(int(number)-1)
                    self.line = self.line[len(number):]
                    continue
                # Next, mark references
                match = re.match(":[0-9]+", self.line)
                if match:
                    markref = match.group()
                    self.line = self.line[len(markref):]
                    for (i, cmd) in enumerate(self.repo):
                        if hasattr(cmd, "mark") and cmd.mark == markref:
                            selection.append(i)
                            break
                        elif hasattr(cmd, "committish") and cmd.committish == markref:
                            selection.append(i)
                            break
                    else:
                        raise RepoSurgeonException("mark %s not found." % markref)
                    continue
                # $ means last commit, a la ed(1).
                if self.peek() == "$":
                    selection.append(len(self.repo)-1)
                    self.pop()
                    continue
                # Comma just delimits a location spec
                if self.peek() == ",":
                    self.pop()
                    continue
                # Following ".." means a span
                if self.line[:2] == "..":
                    if selection:
                        selection.append("..")
                        self.line = self.line[2:]
                        continue
                    else:
                        raise RepoSurgeonException("start of span is missing")
                if self.peek() == "@":
                    self.pop()
                    matched = False
                    # First, search branches
                    branchlist = list(self.repo.branches)
                    branchlist.sort(lambda x, y: len(x)-len(y)) # longest name first
                    for symbol in branchlist:
                        if self.line.startswith(os.path.basename(symbol)):
                            self.line = self.line[len(symbol):]
                            loc = None
                            # Find the last commit with this branchname
                            for (i, event) in enumerate(self.repo):
                                if isinstance(event, Commit):
                                    if event.branch == symbol:
                                        loc = i
                            if loc is None:
                                raise RepoSurgeonException("branch name %s points to hyperspace" % symbol)
                            else:
                                matched = True
                                selection.append(loc)
                    # Next, search tags
                    taglist = filter(lambda e: isinstance(e, Tag), self.repo.events)
                    taglist.sort(lambda x, y: len(x.name)-len(y.name))
                    for tag in taglist:
                        if self.line.startswith(tag.name):
                            self.line = self.line[len(tag.name):]
                            for (i, event) in enumerate(self.repo):
                                if isinstance(event, Commit) and event.mark == tag.mark:
                                    matched = True
                                    selection.append(i)
                            else:
                                raise RepoSurgeonException("tag name %s points to hyperspace" % tag.name)
                    if not matched:
                        raise RepoSurgeonException("couldn't match a name at @%s" % self.line)
            if verbose >= 2:
                print "reposurgeon: location list is %s with %s left" % (selection, `self.line`)
            # Resolve spans
            resolved = []
            spanning = last = 0
            for elt in selection:
                if elt == '..':
                    spanning = True
                else:
                    if spanning:
                        resolved += range(last+1, elt+1)
                        spanning = False
                    else:
                        resolved.append(elt)
                    last = elt
            selection = resolved
            if verbose >= 2:
                print "reposurgeon: resolved list is %s with %s left" % (selection, `self.line`)
            # Sanity checks
            if spanning:
                raise RepoSurgeonException("incomplete range expression.")
            for elt in selection:
                if elt < 0 or elt > len(self.repo)-1:
                    raise RepoSurgeonException("event number %s out of range" % elt)
            polyrange = set(selection)
        if verbose >= 2:
            print "%s <- eval_polyrange(), left = %s" % (polyrange, `self.line`)
        return polyrange
    def eval_textsearch(self):
        "Parse a text search specification."
        if verbose >= 2:
            print "eval_textsearch(%s)" % self.line
        self.line = self.line.lstrip()
        if not self.peek() == '/':
            textsearch = None
        elif '/' not in self.line[1:]:
            raise RepoSurgeonException("malformed text search specifier")
        else:
            assert(self.pop() == '/')
            endat = self.line.index('/')
            regex = re.compile(self.line[:endat])
            self.line = self.line[endat+1:]
            matchers = []
            for (i, cmd) in enumerate(self.repo):
                # This catches commits and tags
                if hasattr(cmd, "comment") and regex.search(cmd.comment):
                    matchers.append(i)
                # And this catches passthroughs
                elif hasattr(cmd, "text") and regex.search(cmd.text):
                    matchers.append(i)
                # We don't do blobs because it would be too slow
                # and not very useful.
            if verbose >= 2:
                print "%s <- eval_textsearch(), left = %s" % (matchers, `self.line`)
            return set(matchers)
    #
    # Helpers
    #
    def report_select(self, line, method):
        "Generate a repository report on all objects with a specified method."
        if not self.repo:
            complain("no repo is loaded.")
            return
        default = map(lambda x: x[0], filter(lambda (n, o): hasattr(o, method), enumerate(self.repo)))
        line = self.set_selection_set(line, default)
        outfile = line.strip()
        if outfile and outfile != '-':
            fp = open(outfile, "w")
        else:
            fp = sys.stdout
        for i in self.selection:
            event = self.repo.events[i]
            if hasattr(event, method):
                fp.write(getattr(event, method)(i) + "\n")
        if outfile:
            fp.close()

    def uniquify(self, name):
        "Uniquify a repo name in the repo list."
        if name not in self.name_to_repo:
            return name
        else:
            # repo "foo" is #1
            seq = 2
            while name + str(seq) in self.name_to_repo:
                seq += 1
            return name + str(seq)
    #
    # On-line help and instrumentation
    #
    def help_help(self):
        print "Show help for a command. Follow with a space and the command name"
    def do_verbose(self, line):
        global verbose
        try:
            verbose = int(line)
        except ValueError:
            print "reposurgeon: verbosity value must be an integer"
        if verbose:
            print "reposurgeon: verbose %d" % verbose
    def help_verbose(self):
        print """
'verbose 1' enables progress messages, 'verbose 0' disables them. Higher levels
of verbosity are available but intended for developers only.
"""
    def do_repeat(self, line):
        "Set or clear repeating commands before processing (for regression tests)"
        try:
            self.repeat = int(line)
        except ValueError:
            print "reposurgeon: repeat value must be an integer"
        if verbose:
            print "reposurgeon: repeat %d" % self.repeat
    def do_version(self, line):
        "Report the program version and supported version-control systems."
        print "reposurgeon " + version + " supporting " + " ".join(map(lambda x: x[0], vcstypes.keys()))
    def do_resolve(self, line):
        "Display the set of event numbers generated by a section set."
        self.set_selection_set(line)
        if self.selection is None:
            print "No selection"
        elif type(self.selection) == type([]):
            print map(lambda x: x+1, self.selection)
        else:
            complain("resolve did't expect a selection of %s" % self.selection)
    def help_resolve(self):
        print """
Does nothing but resolve a selection-set expression
and report the resulting event-number set to standard
output. Implemented mainly for recression testing, but may be useful
for exploring the selection-set language.
"""
    def do_names(self, line):
        "List all known symbolic names of branches and tags."
        for branch in self.repo.branches:
            print "branch %s" % branch
        for event in self.repo:
            if isinstance(event, Tag):
                print "tag    %s" % event.name
    def do_script(self, line):
        "Read and execute commands from a named file."
        if not line:
            complain("script requires a file argument")
            return
        try:
            for cmdline in open(line):
                interpreter.onecmd(interpreter.precmd(cmdline))
        except IOError:
            complain("failed to open script %s" % line)
    #
    # Information-gathering
    #
    def do_stats(self, line):
        "Report on the loaded repository infrmation"
        if self.repo:
            def count(otype):
                return len(filter(lambda x: isinstance(x,otype), self.repo.events))
            print "Repository '%s' was read at %s" % (self.repo.name, iso8601_from_unixtime(self.repo.readtime))
            if self.repo.sourcedir:
                print "Loaded from", self.repo.sourcedir
            print "%.0fK, %d commands, %d blobs, %d commits, %d tags, %d resets, %d marks." % \
                  (self.repo.readsize / 1000.0, len(self.repo),
                   count(Blob), count(Commit), count(Tag), count(Reset),
                   self.repo.nmarks)
            if self.repo.type:
                print "         Type:", self.repo.type
                for (legend, command) in zip(("Subdirectory:", "Exporter:", "Initializer:", "Importer:", "Checkout:", "Viewer:"), vcstypes[self.repo.type]):
                    print "%14s %s" % (legend, command)
        else:
            print "reposurgeon: no repository loaded."
    def help_stats(self):
        print """
Report size statistics and import/export method information after reading
a repo or stream.
"""
    def do_view(self, line):
        "View a repo through its GUI."
        if not self.preferred:
            complain("prefer a repo type first.")
            return
        gui = vcstypes[self.preferred][5]
        if not gui:
            complain("no GUI is available.")
            return
        os.system(gui)
    def do_index(self, line):
        "Generate a summary listing of objects."
        if not self.repo:
            complain("no repo is loaded.")
            return
        # We could do all this logic using report_select() and index() methods
        # in the objects, but that would have two disavadntages.  First, we'd
        # get a default-set computation we don't want.  Second, for this
        # function it's helpful to have the method strings close together so
        # we can maintain columnation.
        default = map(lambda x: x[0], filter(lambda (n, o): not isinstance(o, Blob), enumerate(self.repo)))
        self.set_selection_set(line, default)
        for i in self.selection:
            event = self.repo.events[i]
            if isinstance(event, Blob):
                print "%6d blob   %6s    %s" % (i+1, event.mark,event.path)
                continue
            if isinstance(event, Commit):
                print "%6d commit %6s    %s" % (i+1, event.mark or '-', event.branch) 
                continue
            if isinstance(event, Tag):
                print "%6d tag      -       %4s" % (i+1, event.name,) 
                continue
            if isinstance(event, Reset):
                print "%6d branch %6s    %s" % (i+1, event.committish or '-', event.ref) 
                continue
            else:
                print "?      -      %s" % (event,) 
    def help_index(self):
        print """
Display four columns of info on selected objects: their number, their
type, the associate mark (or '-' if no mark) and a summary field
varying by type.  For a branch or tag it's the reference; for a commit
it's the commit branch; for a blob it's the repository path of the
file in the blob.
"""
    def do_list(self, line):
        "Generate a human-friendly listing of objects."
        self.report_select(line, "lister")
    def help_list(self):
        print """
Display commits in a human-friendly format; the first column is raw
event numbers, the second a timestamp, and the third the leading text
of the comment.  If there is a second argument, or the first is not
recognized as a selection set, it will be taken as the name of the
file to report to; no argument, or one of '-'; writes to standard
output.
"""
    #
    # Housekeeping
    #
    def do_prefer(self, line):
        "Report or select the preferred repository type."
        if line:
            known = " ".join(vcstypes.keys())
            if line.lower() in map(lambda x: x.lower(), vcstypes.keys()):
                self.preferred = line
            else:
                complain("known types are %s.") % known
        if verbose:
            if not self.preferred:
                print "reposurgeon: no preferred type has been set."
            else:
                print "reposurgeon: %s is the preferred type." % self.preferred
    def help_prefer(self):
        print """
Report or set (with argument) the preferred type of repository. This
will have two effects.  First, if there are multiple repositories in a
directory you do a read on, reposurgeon will read the preferred one
(otherwise it will complain that it can't choose among them).
Secondly, if you do a write to a directory, it will build a repo of
the preferred type.

If no preferred type has been explicitly selected, reading in a
repository (but not a fast-import stream) will implicitly set it
to the type of that repository.
"""
    def do_choose(self, line):
        "Choose a named repo on which to operate."
        if line:
            if line in self.name_to_repo:
                self.repo = self.name_to_repo[line]
            else:
                complain("no such repo")
        repolist = map(lambda n: (n, self.name_to_repo[n].readtime),
                       self.name_to_repo.keys())
        repolist.sort(lambda x, y: cmp(x[1], y[1]))
        for (name, readtime) in repolist:
            print "%s %s" % (iso8601_from_unixtime(readtime), name)
    def help_choose(self):
        print """
Choose a named repo on which to operate.  The name of a repo is
normally the basename of the directory or file it was loaded from, but
repos loaded from standard input are 'unnamed'. The program will add
a disambiguating suffix if there have been multiple reads from the
same source.

With no argument, lists the names of the currently stored repositories
and their load times.
"""
    def do_rename(self, line):
        "Rename a repository."
        if line in self.name_to_repo:
            complain("there is already a repo named %s" % line)
        else:
            del self.name_to_repo[self.repo.name]
            self.name_to_repo[line] = self.repo
            self.repo.rename(line)
    def help_rename():
        print """
Rename the currently chosen repo; requires an argument.  Won't do it
if there is already one by the new name.
"""
    def do_restore(self, line):
        "Add files and subdirectories to the restore set."
        for filename in line.split():
            self.repo.restore(filename)
        print self.repo.restorable()
    def help_restore(self):
        print """
Add (presumably untracked) files or directories to the repo's list of
paths to be restored from the backup directory after a rebuild. Each
argument, if any, is interpreted as a pathname.  The current restore
list is displayed afterwards.
"""
    def do_unrestore(self, line):
        "Remove files and subdirectories from the restore set."
        for filename in line.split():
            self.repo.unrestore(filename)
        print self.repo.restorable()
    def help_unrestore(self):
        print """
Remove (presumably untracked) files or directories to the repo's list
of paths to be restored from the backup directory after a
rebuild. Each argument, if any, is interpreted as a pathname.  The
current restore list is displayed afterwards.
"""
    #
    # Serialization and de-serialization.
    #
    def do_read(self, line):
        "Read in a repository for surgery."
        self.preferred = None 
        if not line or line == '.':
            line = os.getcwd();
        self.repo = read_repo(line, self.preferred)
        if self.repo:
            if self.repo.type:
                self.preferred = self.repo.type
            name = self.uniquify(os.path.basename(self.repo.sourcedir or "unnamed"))
            self.repo.rename(name)
            self.name_to_repo[name] = self.repo 
    def help_read(self):
        print """
A read command with no arguments is treated as 'read .', operating on the
current directory.
 
With a directory-name argument, this command attempts to read in the
contents of a repository in any supported version-control system under
that directory.

If the argument is the name of a plain file, it will be read in as a
fast-import stream.

With an argument of <quote>-</quote>, this command reads a fast-import
stream from standard input (this will be useful in filters constructed
with command-line arguments).
"""
    def do_write(self, line):
        "Stream out the results of repo surgery."
        if not self.repo:
            complain("no repo is loaded.")
            return
        if not line:
            line = '-'
        if line == '-':
            self.repo.fast_export(sys.stdout)
        else:
            try:
                out = open(line, "w")
                self.repo.fast_export(out)
                out.close()
            except OSError:
                print "reposurgeon: open of %s for write failed.\n" % line
    def help_write(self):
        print """
Dump a fast-import stream representing the repostory to standard output
(if argument is empty or '-') or a file.  Fails if the argument exists
and is a directory or anything other than a plain file.
"""
    def do_rebuild(self, line):
        "Rebuild a repository from the edited state."
        rebuild_repo(self.repo, line, self.preferred)
    def help_rebuild(self):
        print """
Rebuild a repository from the state held by reposurgeon.  The argument
specifies the target directory in which to do the rebuild; if the
repository read was from a repo directory (and not a git-import stream), it
defaults to that directory.  If the target directory is nonempty
its contents are backed up to a save directory.
"""
    def help_rebuild(self):
        print """
View a repo through the default GUI browser for its version control system.
Note that this does not show the in-core state; it is mainly useful for
doing a quick eyeball check ofter a rebuild command.
"""
    #
    # Editing commands
    #
    def do_mailbox_out(self, line):
        "Generate a mailbox file representing object metadata."
        self.report_select(line, "email_out")
    def help_mailbox_out(self):
        print """
Emit a mailbox file of messages in RFC822 format representing the
contents of repository metadata. Takes a selection set; members of the set
other than commits, annotated tags, and passthroughs are ignored (that
is, presently, blobs and resets).  If there is a second argument, or
the first is not recognized as a selection set, it will be taken as
the name of the file to report to; no argument, or one of '-'; writes
to standard output.
"""
    def do_mailbox_in(self, line):
        "Accept a mailbox file representing object metadata and update from it."
        infile = line.strip()
        if infile and infile != '-':
            fp = open(infile)
        else:
            fp = sys.stdin
        update_list = []
        while True:
            msg = RepoSurgeonEmail.readmsg(fp)
            if not msg:
                break
            update_list.append(email.message_from_string(msg))
        if infile:
            fp.close()
        # First, a validation pass
        for (i, message) in enumerate(update_list):
            if "Event-Number" not in message:
                raise RepoSurgeonError("missing event number in update %d" % i)
            eventnum = int(message["Event-Number"]) - 1
            if eventnum < 0 or eventnum >= len(self.repo):
                raise RepoSurgeonException("event number %d out of range in update %d" % (eventnum, i+1))
            event = self.repo[eventnum]
            if not hasattr(event, "email_in"):
                raise RepoSurgeonException("event %d cannot be modified" % (eventnum+1,))
        # Now apply the updates
        modified = []
        for update in update_list:
            eventnum = int(update["Event-Number"]) - 1
            event = self.repo[eventnum]
            if event.email_in(update):
                modified.append(eventnum+1)
        if verbose:
            if not modified:
                print "reposurgeon: no events modified."
            else:
                print "reposurgeon: modified events are %s." % (modified,)

    def help_mailbox_in(self):
        print """
Accept a mailbox file of messages in RFC822 format representing the
contents of the metadata in selected commits and annotated tags. Takes
no selection set.  If there is an argument it will be taken as the
name of a mailbox file to read from; no argument, or one of '-'; reads
from standard output.

Users should be aware that modifying an Event-Number field will change
which event the update from that message is applied to.  This is
unlikely to have good results.

Event updates are atomic; if reposurgeon throws an error while in this
command events updated before the error will keep their changed state,
but no event will be partially modified. Event numbers are validated
before any individual event is updated.

At present only the comment fields of commits and tags are updated from
the mailbox contents; commit and tag metadata cannot be altered. This
may change in a future release.
"""
    def do_edit(self, line):
        "Edit metadata interactively."
        if not self.repo:
            complain("no repo is loaded")
            return
        default = map(lambda x: x[0], filter(lambda (n, o): hasattr(o, "email_out"), enumerate(self.repo)))
        line = self.set_selection_set(line, default)
        editor = line or os.getenv("EDITOR")
        if not editor:
            complain("you have not specified an editor and $EDITOR is not set")
            return
        # Special case: user selected a single blob
        if len(self.selection) == 1:
            singleton = self.repo[self.selection[0]]
            if isinstance(singleton, Blob):
                os.system(editor + " " + singleton.blobfile())
                return
        # Otherwise, mailboxize and edit the non-blobs in the selection
        try:
            (tfdesc, tfname) = tempfile.mkstemp()
            tfp = open(tfname, "w")
            for i in self.selection:
                event = self.repo[i]
                if hasattr(event, "email_out"):
                    tfp.write(event.email_out(i))
            tfp.close()
            if os.system(editor + " " + tfname):
                complain("%s returned a failure status" % editor)
            self.do_mailbox_in(tfname)
        finally:
            os.remove(tfname)
    def help_edit(self):
        print """
Report the selection set of events to a tempfile as mailbox_out does,
call an editor on it, and update from the result as mailbox_in does.
If you do not specify an editor name as second argument, it will be
taken from the $EDITOR variable in your environment.

Normally this command ignores blobs because mailbox_out does.
However, if you specify a selection set consisting of a single
blob, your editor will be called on the blob file.
"""
    def do_delete(self, line):
        "Delete events in the specified selection set."
        if not self.repo:
            complain("no repo is loaded")
            return
        self.set_selection_set(line, [])
        if not hasattr(self.repo, "policy_" + line):
            complain("no such deletion policy as " + line)
            return
        self.repo.delete(self.selection, self.line)
    def help_delete(self):
        print """
Delete a selection set of commits (and their associated blobs, if
any).  The default selection set for this command is empty.  Tags
pointing at the commits are also removed.

Note that applying this command to a commit with a modify operation will
*not* remove changes made by that commit from later versions.  It will
have the effect of retracting the modifications only when they are the
final ones on the commit's branch.
"""


if __name__ == '__main__':
    try:
        interpreter = RepoSurgeon()
        interpreter.use_rawinput = False
        if not sys.argv[1:]:
            sys.argv.append("-")
        try:
            for arg in sys.argv[1:]:
                for cmd in arg.split(";"):
                    if cmd == '-':
                        interpreter.use_rawinput = True
                        interpreter.verbose = 1
                        interpreter.cmdloop()
                        interpreter.use_rawinput = False
                    else:
                        interpreter.onecmd(interpreter.precmd(cmd))
        finally:
            interpreter.cleanup()
    except RepoSurgeonException, e:
        fatal(e.msg)
    except KeyboardInterrupt:
        print ""
# end
