<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC 
   "-//OASIS//DTD DocBook XML V4.1.2//EN"
   "docbook/docbookx.dtd">
<refentry id='reposurgeon.1'>
<refmeta>
<refentrytitle>reposurgeon</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class='date'>Aug 24 1994</refmiscinfo>
<refmiscinfo class='productname'>reposurgeon</refmiscinfo>
<refmiscinfo class='source'>reposurgeon</refmiscinfo>
<refmiscinfo class='manual'>Development Tools</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>reposurgeon</refname>
<refpurpose>surgical operations on repositories</refpurpose>
</refnamediv>
<refsynopsisdiv id='synopsis'>

<cmdsynopsis>
  <command>reposurgeon</command>
  <arg choice='opt' rep='repeat'><replaceable>command</replaceable></arg>
</cmdsynopsis>
</refsynopsisdiv>

<refsect1 id='description'><title>DESCRIPTION</title>

<para>The purpose of <application>reposurgeon</application> is to
enable risky operations that version-control systems don't want to let
you do, such as (a) editing past comments and metadata, (b) excising
commits, (c) coalescing commits, and (d) removing files and subtrees
from repo history. The original motivation for
<application>reposurgeon</application> was to clean up artifacts
created by repository conversions.</para>

<para>To keep <application>reposurgeon</application> simple and
flexible, it does not do its own repository reading and writing.
Instead, it relies on being able to parse and emit the repo-command
streams created by git-fast-export and read by git-fast-import.  This
means that it can be used on any version-control system that that has
both fast-export and fast-import utilities.  This set includes git
itself, hg, and bzr.</para>
</refsect1>

<refsect1 id='options'><title>OPERATION</title>
<para>The program can be run in one of two modes, either as an interactive
command interpreter or to execute commands given as arguments on the
<application>reposurgeon</application> invocation line. The only difference
between these modes is that the interactive one begins by turning on the
'verbose 1' option.</para>

<para>A git-fast-import stream consists of a sequence of commands
which must be executed in the specified sequence to build the repo;
to avoiid confusion with <application>reposurgeon</application> commands
we will refer to the stream commands here as <emphasis>events</emphasis>.
These events are implicitly numbered from 1 upwards.  Most commands
require specifying a selection of event sequence numbers so
<application>reposurgeon</application> will know which events to
modify or delete.</para>

<para>When a command takes a selection-set argument, it will
immediately follow the command keyword; other arguments will
follow. It is often possible to omit the selection-set argument and
have it default to something reasonable.</para>

<para>Here are some motivating examples.  The commands will be
explained in more detail after the description of selection
syntax.</para>

<programlisting>
edit :15                     ;; edit the object associated with mark :15

index 29..71                 ;; list summary index of events 20..71

delete =t &amp; 1..:97           ;; delete tags from event 1 to mark 15
</programlisting>

<para>The selection-set specification syntax is an expression-oriented 
minilanguage.  The most basic term in this language is a 
<firstterm>location</firstterm>. The following sorts of primitive locations
are supported:</para>

<variablelist>
<varlistentry>
<term><firstterm>event numbers</firstterm></term>
<listitem><para>A plain numeric literal is interpreted as a 1-origin
event-sequence number.</para></listitem>
</varlistentry>
<varlistentry>
<term><firstterm>marks</firstterm></term>
<listitem><para>A numeric literal preceded by a colon is interpreted
as a mark; see the format documentation for explanation of the 
semantics of marks.</para></listitem>
</varlistentry>
</variablelist>

<para>These may be grouped into sets in the following ways:</para>

<variablelist>
<varlistentry>
<term><firstterm>ranges</firstterm></term>
<listitem><para>A range is two locations separated by "..", and is
the set of events begining at the left-hand location and ending at the
right-hand location (inclusive).</para></listitem>
</varlistentry>
<varlistentry>
<term><firstterm>lists</firstterm></term>
<listitem><para>Comma-separated lists of locations and ranges are 
accepted, with the obvious meaning.</para></listitem>
</varlistentry>
</variablelist>

<para>There are some other ways to construct event sets:</para>

<variablelist>
<varlistentry>
<term><firstterm>visibility sets</firstterm></term>
<listitem>
<para>A visibility set is an expression specifying a set of event
types. It will consist of a leading plus, minus, or equal sign,
followed by type letters. These are the type letters:</para>

<informaltable pgwide='0' frame='all'>
  <tgroup cols='3' align='center'>
    <colspec colname='c1'/>
    <colspec colname='c2'/>
    <colspec colname='c3'/>
    <tbody>
      <row>
        <entry align='center'>B</entry>
        <entry align='center'>blobs</entry>
	<entry><para>Most default selection sets exclude blobs; they
	have to be manipulated through the commits they are attached
	to.</para></entry>
      </row>
      <row>
        <entry align='center'>C</entry>
        <entry align='center'>commits</entry>
	<entry><para>&nbsp;</para></entry>
      </row>
      <row>
        <entry align='center'>T</entry>
        <entry align='center'>tags</entry>
	<entry><para>&nbsp;</para></entry>
      </row>
      <row>
        <entry align='center'>R</entry>
        <entry align='center'>resets</entry>
	<entry><para>&nbsp;</para></entry>
      </row>
      <row>
        <entry align='center'>U</entry>
        <entry align='center'>Unknown</entry>
	<entry><para>All event types types simply passed through,
	including comments, <command>progress</command> commands, 
        and <command>checkpoint</command> commands.</para></entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

<para>The = prefix specifies exactly the set of types following; the +
prefix adds to the default set for the command; and the - prefix
subtracts from that set.</para>

</listitem>
</varlistentry>
</variablelist>

<para>Set expressions bay be combined with the operators | and &amp;;
these are, respectively, set uniomn and intersection.</para>

<para>Here are the available and planned surgical commands:</para>

<variablelist>
<varlistentry>
<term><cmdsynopsis><command>index</command></cmdsynopsis></term>
<listitem>
<para>Display four columns of info on objects in the selection set:
their number, their type, the associate mark (or '-' if no mark) and a
summary field varying by type.  For a branch or tag it's the
reference; for a commit it's the commit branch; for a blob it's the
repository path of the file in the blob.</para>

<para>The default selection set for this command is =CTRU, all objects
except blobs.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>delete</command></cmdsynopsis></term>
<listitem>
<para>Delete a selection set of commits.  The default selection set
for this command is empty.</para>
<!-- document handling of tags, branches, renames, deletes, copies. --> 
<para>NOT YET IMPLEMENTED.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>expunge</command></cmdsynopsis></term>
<listitem>
<para>Expunge a file from the repo history. Does not take a selection
set.</para>
<!-- document handling of tags, branches, renames, deletes, copies. --> 
<para>NOT YET IMPLEMENTED.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>coalesce</command></cmdsynopsis></term>
<listitem>
<para>Scan the selection set for runs of commits with identical
comments close to each other in time (this is a common form of scar
tissues in repository up-conversions from older file-oriented
version-control systems).  Merge these cliques.</para>

<para>The optional second argument, if present, is a maximum time
separation in seconds; the default is 90 seconds.</para>

<para>The default selection set for this command is =C, all
commits. Occasionally you may want to restrict it, for example to
avoid coalescing unrelated "*** empty log message ***" commits from
CVS lifts.</para>
<!-- document handling of tags, branches, renames, deletes, copies. --> 
<para>NOT YET IMPLEMENTED.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>edit</command></cmdsynopsis></term>
<listitem>
<para>Edit a selection set of events.</para>
<para>NOT YET IMPLEMENTED.</para>
</listitem>
</varlistentry>
</variablelist>

<para>These are backed up by the following housekeeping commands, none of 
which take a selection set:</para>

<variablelist>
<varlistentry>
<term><cmdsynopsis><command>help</command></cmdsynopsis></term>
<listitem><para>Get help on the interpreter commands. Optionally follow with
whitespace and a command name; with no argument, lists all commands. '?'
also invokes this.
</para></listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>resolve</command></cmdsynopsis></term>
<listitem><para>Does nothing but resolve a selection-set expression
and echo the resulting event-number set to standard
output. Implemented mainly for recression testing, but may be useful
for exploring the selection-set language.</para></listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>version</command></cmdsynopsis></term>
<listitem><para>Report the version of <application>reposurgeon</application>
and the list of version-control systems it directly supports.
</para></listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>verbose</command></cmdsynopsis></term>
<listitem><para>'verbose 1' enables progress and messages,
'verbose 0' disables them. Higher levels of verbosity are available
but intended for developers only.</para></listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>shell</command></cmdsynopsis></term>
<listitem><para>Execute the shell command given in the remainder of the line.
'!' also invokes this.  
</para></listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>prefer</command></cmdsynopsis></term>
<listitem>
<para>Report or set (with argument) the preferred type of repository. This
will have two effects.  First, if there are multiple repositories in a
directory you do a read on, reposurgeon will read the preferred one
(otherwise it will complain that it can't choose among them).
Secondly, if you do a write to a directory, it will build a repo of
the preferred type.</para>

<para>If no preferred type has been explicitly selected, reading in a
repository (but not a fast-import stream) will implicitly set it
to the type of that repository.</para>
</listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>read</command></cmdsynopsis></term>
<listitem><para>With a directory-name argument, this command attempts
to read in the contents of a repository in any supported
version-control system under that directory; read with no
arguments does this in the current directory. If the argument is the
name of a plain file, it will be read in as a fast-import stream. With
an argument of <quote>-</quote>, this command reads a fast-import
stream from standard input (this will be useful in filters constructed
with command-line arguments).</para></listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>stats</command></cmdsynopsis></term>
<listitem><para>
Report size statistics and import/export method information after reading
a repo or stream.
</para></listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>write</command></cmdsynopsis></term>
<listitem><para>
Dump a fast-import stream representing the edited repostory to standard output
(if argument is empty or '-') or a file.  Fails if the argument exists
and is a directory or anything other than a plain file.
</para></listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>rebuild</command></cmdsynopsis></term>
<listitem><para>
Rebuild a repository from the state held by
<application>reposurgeon</application>.  The argument specifies the
target directory in which to do the rebuild; if the repository read
was from a repo directory (and not a git-import stream), it defaults
to that directory.  If the target directory is nonempty its contents
are backed up to a save directory.
</para></listitem>
</varlistentry>
<varlistentry>
<term><cmdsynopsis><command>view</command></cmdsynopsis></term>
<listitem><para>
View a repo through the default GUI browser for its version control
system.  Note that this does not show the edited state held by
<application>reposurgeon</application> in core; it is mainly useful
for doing a quick eyeball check ofter a rebuild command.
</para></listitem>
</varlistentry>
</variablelist>
</refsect1>

<refsect1 id='limitations'><title>LIMITATIONS AND GUARANTEES</title>

<para>Guarantee: <application>reposurgeon</application> never modifies
the contents of a repository it reads or deletes any repository. The
results of surgery are always expressed in a new repository </para>

<para>Guarantee: Any line in a fast-import stream that is not a part
of a command <application>reposurgeon</application> parses and
understands will be passed through unaltered.  At present the set of
potential passthroughs is known to include the
<command>progress</command>, the <command>options</command>, and
<command>checkpoint</command> commands as well as comments led by
#.</para>

<para>Guarantee: All <application>reposurgeon</application> operations either
preserve all repository state they are not explicitly told to modify
or warn you when they cannot do so.</para>

<para>Limitation: Because <application>reposurgeon</application>
relies on other programs to generate and imterpret the fast-import command
stream, it is subject to bugs in those prograns.</para>

<para>Limitation: Under version-control systems other than git,
fast-import format may not capture the entire repository
state. Presently the only known limitations are:</para>

<itemizedlist>
<listitem>
<para>Under bzr, dumps do not capture information about (a) multiple-author 
commits, (b) bzr custom commit properties (e.g. branch-nick and bugs 
fixed by this change), or (c) empty directories.</para>
</listitem>
</itemizedlist>

<para>Limitation: Subversion/RCS/CVS aren't directly supported because exporting
from them requires fixups of usernames in the committer information to
full email addresses.  Trying to handle that entirely inside this tool
would be excessively messy, so we don't. Instead we let the user
transform repo-command streams and cope with the export/import
separately.</para>

<para>Guarantee: As version-control systems add support for the
fast-import format, their repositories will become editable by
<application>reposurgeon</application>. See the <ulink
url="https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools">Git
Wiki tools page</ulink> for a large collection of such tools.</para>
</refsect1>

<refsect1 id='author'><title>AUTHOR</title>

<para>Eric S. Raymond <email>esr@snark.thyrsus.com</email>; project
page at <ulink
url='http://www.catb.org/~esr/reposurgeon'>http://www.catb.org/~esr/reposurgeon</ulink>).</para>
</refsect1>
</refentry>

