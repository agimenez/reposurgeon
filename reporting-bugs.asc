= How to report bugs =

reposurgeon is an extremely algorithmically complex program.  It may
still have bugs when dealing with strange corner cases in older
repositories.

It is often extremely difficult or impossible to reproduce those bugs
without a copy of the history on which they occurred. When you find a
bug, please send me:

(a) An exact description of how observed behavior differed from expected
behavior.  If reposurgeon died, include the backtrace.

(b) A git fast-import or Subversion dump file of the repository you
were operating on, or a pointer to where I can pull it from. 

(c) A script containing the sequence of reposurgeon commands that
revealed the bug.

There are some tactics you can use to reduce the bulk of the test case you
send me. Doing this will speed up my debugging process so you can get
an answer more quickly.  Also, a well-reduced dump can become a
regression test to ensure the bug does not recur.

The commands you will use for this are reposurgeon and, on Subversion
dumps, svncutter.  The svncutter tool lives in the Subversion contrib
directory.  It is publicly available at this URL:

https://svn.apache.org/repos/asf/subversion/trunk/contrib/server-side/svncutter/svncutter

First, replace the content blobs in the dump with stubs.

The subcommand in both tools is 'strip'; it will usually cut the size
of the dump by more than a factor of 10. Check that the bug still
reproduces on the stripped dump; if it doesn't, that would be
unprecedented and interesting in itself.

Second, try to truncate the dump to the shortest leading section that
reproduces the bug. 

A reposurgeon error message will normally include a mark, event
number, or (when reading a Subversion dump) a Subversion revision
number.  Use a selection-set argument to reposurgeon's 'write'
command, or the 'select' subcommand of svncutter, to pare down the
dump so that it ends just after the error is triggered.  Again, check
to ensure that the bug reproduces on the truncated dump.

Third, topologically reduce the dump, throwing out boring commits that are
unlikely to be related to your problem. 

If a commit has all file modifications (no additions or deletions or
copies or renames) and has exactly one ancestor and one descendant,
then it may be boring. In a Subversion dump it also has to not have
any property changes; in a git dump it must not be referred to by any
tag or reset.  Interesting commits are not boring, or have a
not-boring parent or not-boring child. 

Try using the 'reduce' subcommand of svncutter to strip boring commits
out of a Subversion dump. For a git dump, look at "strip reduce".
This is the simplification least unlikely to make your bug vanish, so
check that carefully.

If you need emergency help, go to the #reposurgeon IRC channel listed
on the project web page.  Be aware, however, that I am too busy to
babysit difficult repository conversions unless I have explicitly
volunteered for one or someone is paying me to care about it.  For
explanation, see http://esr.ibiblio.org/?p=5087[Your money or your
spec]

//end


