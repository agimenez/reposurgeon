= Reposurgeon Theory of Operation =
Eric S. Raymond <esr@thyrsus.com>

The purpose of reposurgeon is to enable risky operations that
version-control systems don't want to let you do, such as (a) editing
past comments and metadata, (b) excising commits, (c) coalescing
commits, and (d) removing files and subtrees from repo history. The
original motivation for reposurgeon was to clean up artifacts
created by repository conversions.

To keep reposurgeon simple and flexible, it does not do its own
repository reading and writing.  Instead, it relies on being able to
parse and emit the dump format created by git-fast-export and read by
git-fast-import.  This means that it can be used on any
version-control system that that has both fast-export and fast-import
utilities.  This set includes git itself, hg, and bzr. 

Subversion/RCS/CVS aren't directly supported because exporting from
them requires fixups of usernames in the committer information to full
email addresses.  Trying to handle that entirely inside this tool
would be excessively messy, so we don't. Instead we let the user
transform dump files and cope with the export/import himself.

As version-control systems add support for the fast-import format,
their repositories will automatically become editable by reposurgeon
see the
https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools[Git
Wiki tools page] for a large collection of such tools.

It is a design constraint that all reposurgeon operations either
preserve all repository state they are not explicitly told to modify
or warn you when they cannot do so.  Users should, however, be aware
of limitations in the ability of the fast-import format to capture 
repository state. Presently the most significant such known 
limitations are:

* Under bzr, dumps do not capture information about (a) multiple-author 
commits, (b) bzr custom commit properties (e.g. branch-nick and bugs 
fixed by this change), or (c) empty directories.




