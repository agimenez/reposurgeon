#!/bin/bash
#
# repotool - query multiple repository types in a uniform way.
#
# export: Run this from within a repository directory (for CVS, within
# a module directory).  In all cases but Subversion this generates a
# git-fast-export file to standard output. For Subversion it emits a
# Subversion dump file.  The export commands should bekept
# synchronized with the table of front ends in reposurgeon.
#
# mirror: Initially requires a single argument, either an SVN URL (e.g
# something like svn://svn.hercules-390.org/hercules or
# svn://svn.debian.org/nut), or a CVS URL (e.g. something like
# cvs://rfk.cvs.sourceforge.net/cvsroot/rfk#robotfindskitten), or
# the name of a local mirror directory created by a previous run.
# The first run creates a local mirror of the repository in a directory named
# after the last segment of the URL: that is, the second example
# above would be unpacked into a local directory named 'nut-mirror'.
# Later runs can update the local mirror by giving the mirror directory name.
#
# tags: Run this from within a repository directory (for CVS, within
# a module directory). Return a list of release tags in the repository.
#
# checkout: Run this from within a repository directory (for CVS, within
# a module directory). First arg is a directory to perform the checkout to.
# Second arg, if presemt, is a revision or tag spec. Without the spec, the
# checkout is of the tip trevision on the mainline or master branch
#
operation=$1
shift;

case $operation in
export)
    if [ -f *,v ]
    then
	    find . -name '*,v' | cvs-fast-export --reposurgeon 
    elif [ -d locks ]
    then
	    svnadmin dump .
    elif [ -d .git ]
    then
	    git fast-export --all
    elif [ -d .bzr ]
    then
	    bzr fast-export --no-plain .
    elif [ -d .hg ]
    then
	    hg-fast-export.py --marks /dev/null --mapping /dev/null --heads /dev/null --status /dev/null --repo .
    elif [ -d _darcs ]
    then
	    darcs fastconvert export
    else
	echo "repotool: does not look like a repository directory of known type."
	exit 1
    fi
    ;;
mirror)
    operand=$1

    if [ `expr "$operand" : "svn://"` = 6 \
	-o `expr "$operand" : "svn+ssh://"` = 10 \
	-o `expr "$operand" : "https://"` = 8 \
	-o `expr "$operand" : "http://"` = 7 ]
    then
	local=`basename $operand`-mirror
	svnadmin create $local
	cat >$local/hooks/pre-revprop-change <<EOF
#!/bin/sh
exit 0;
EOF
	chmod a+x $local/hooks/pre-revprop-change
	svnsync init file://${PWD}/$local $operand
	svnsync synchronize file://${PWD}/$local
    elif [ -d "$operand/locks" ]
    then
	svnsync synchronize file://${PWD}/$operand
    elif [ `expr "$operand" : "cvs://"` = 6 ]
    then
	local=`echo basename $operand | sed -e /.*#/s///`-mirror
	mkdir $local
	cvssync -o $local "$operand"
	echo "$operand" >$local/.cvssync
    elif [ -f $operand/.cvssync ]
    then
	cvssync -o $operand `cat $operand/.cvssync`
    else
	echo "repotool: $operand does not look like a Subversion or CVS repository."
	exit 1
    fi
    ;;
tags)
    set -- `echo *,v`
    if [ -f $1 ]
    then
        # Will screw up if any tag is not common to all files
	module=`basename ${PWD}`
	cd ..
	cvs -Q -d:local:${PWD} rlog -h $module 2>&1 \
	| sed -n "/^\t/s/\t\([^:]*\).*/\1/p" | sort -u
    elif [ -d locks ]
    then
	    svn ls "^/tags"
    elif [ -d .git ]
    then
	    git tag -l
    elif [ -d .bzr ]
    then
	    bzr tags
    elif [ -d .hg ]
    then
	    hg tags
    elif [ -d _darcs ]
    then
	    darcs show tags
    else
        echo "repotool: tags listing not supported for this repository type."
        exit 1
    fi
    ;;
checkout)
    outdir=$1
    if [ -z "$outdir" ]
    then
	echo "repotool: target directory is required for checkout."
	exit 1
    else
	outdir=`realpath $1`
    fi
    shift
    rev=$1
    set -- `echo *,v`
    if [ -f $1 ]
    then
	module=`basename ${PWD}`
	cd ..
	if [ "$rev" ]
	then
	    rev="-d $rev"
	fi
	# By choosing -kb we get binary files right, but won't
	# suppress any expanded keywords that might be lurking
	# in masters.   
	cvs -Q -d:local:${PWD} co -P $rev -d $outdir -kb $module
    elif [ -d locks ]
    then
	if [ "$rev" ]
	then
	    rev="-d $rev"
	fi
	svn co $rev file://${PWD} $outdir
    elif [ -d .git ]
    then
	git clone --shared --no-checkout . $outdir
	cd $outdir
	git checkout $rev
	rm -rf .git
    elif [ -d .bzr ]
    then
	echo "Not yet supported."
	exit 1
    elif [ -d .hg ]
    then
	echo "Not yet supported."
	exit 1
    elif [ -d _darcs ]
    then
	echo "Not yet supported."
	exit 1
    else
        echo "repotool: tags listing not supported for this repository type."
        exit 1
    fi
    ;;
*)
    echo "repotool: unknown action '$operation'."
esac

exit 0

# end
