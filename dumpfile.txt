= How to interpret Subversion dumpfiles =
Eric S. Raymond <esr@thyrsus.com>
v0.2, 2011-12-13

== Introduction ==

The Subversion dumpfile format was first documented at

https://svn.apache.org/repos/asf/subversion/trunk/notes/dump-load-format.txt

but there are a number of points on which that document is incomplete
or vague.  This document incorporates those notes, expands them, and
is intended to replace them.  The goal is that is be sufficient for
people writing dumpfile interpreters.

Below, [? ?] flags assertions I am using but relatively unsure
of. These need to be checked further.

== Syntax ==

=== Encoding and delimiters ===

Subversion dumpfiles are plain byte streams. The structural parts are
ASCII.  Text sections and property key/value pairs may be interpreted
as binary data in any encoding by client tools.

A dumpfile consists of four kinds of records.  A record is a group of
RFC822-style header lines (each consisting of a key, followed by a
colon, followed by text data to end of line), followed by an empty
spacer line, followed optionally by a body section.  If the body
section is present, another empty spacer line separates it from the
following record.

For forward compatibility, unrecognized headers are ignored.

=== Record types ===

Dumpfiles include four record types.  Two, the version stamp and UUID
record, consist of single header lines. The bulk of a dumpfile
consists of Revision and Node records.

A version stamp record is always the first line of the file and
looks like this:

-------------------------------------------------------------------
SVN-fs-dump-format-version: <N>\n
-------------------------------------------------------------------

where <n> is replaced by the dump format version. Except where 
specified, the descriptions in this document aapply to all
versions of the format.

Versions 2 and later may have a UUID record following the version
stamp. It is of the form 

-------------------------------------------------------------------
UUID: <hex-string>
-------------------------------------------------------------------

where the <hex-string> is the UUID of the originating repository.
An example UUID is "7bf7a5ef-cabf-0310-b7d4-93df341afa7e".

A Revision record has three headers and is always followed by a
property section.  Expect the following form and sequence:

-------------------------------------------------------------------
Revision-number: <N>
Prop-content-length: <P>
Content-length: <L>
!
-------------------------------------------------------------------

with the Revision-number header always first and the '!' indicating
a mandatory empty spacer line.  <P> gives the length in bytes of the
following property section. <L> gives the body length of the entire
Revision record.  These two numbers will be *identical* for a Revision
record; the Content-length header is added for the benefit of software
that can parse RFC-822 messages.

A revision record is followed by one or more Node records (see below).

=== Property sections ==

A Revision record must have a property section, and a Node record may
have a property section. Every record with a property section has 
a Prop-content-length header.

A property section consists of pairs of key and value records and
is ended by a fixed trailer.  Here is an example attached to a
Revision record:

-------------------------------------------------------------------
Revision-number: 1422
Prop-content-length: 80
Content-length: 80

K 6
author
V 7
sussman
K 3
log
V 33
Added two files, changed a third.
PROPS-END
-------------------------------------------------------------------

The fixed trailer is "PROPS-END\n" and its length is included in the
Prop-content-length. Before it, each K and V record consists of a
header line giving the length of the key or value content in bytes.  
The content follows.  The content is itself always followed by \n.

In version 3 of the format, a third type 'D' of property record is
introduced to describe property deletion. This feature will be
described later, in the specification of delta dumps.

=== Node records ===

Each Revision record is followed by one or more Node records.
Node records have the following sequence of header lines:

-------------------------------------------------------------------
Node-path: path/to/node/in/filesystem
[Node-kind: {file | dir}]
Node-action: {change | add | delete | replace}
[Node-copyfrom-rev: <rev>]
[Node-copyfrom-path: <path> ]
[Text-copy-source-md5: <blob>]
[Text-content-md5: <blob>]
[Text-content-length: <T>]
[Prop-content-length: <P>]
[Content-length: Y]
!
-------------------------------------------------------------------

Dump decoders should be prepared for the optional lines after
Node-action to be in any order, except that Content-length is 
always last if it present.

A Node record describes an action on a path relative to the repository
root, and always begins with the Node-path specification.

The Node-kind line indicates whether the path is a file or directory.
It may be (and usually is) absent if the node action is a delete.  

The Node-action line is always present and specifies the type of
operation for this node.  The operations will be described in
detail later in this document.

Either both the Node-copyfrom-rev and Node-copyfrom-path lines will be
present, or neither will be.  They pair to describe a copy source for
the node; copy-source semantics will be described in detail later in
this document.

The Text-content-md5 and Text-copy-source-md5 lines are hash integety
checks and will be present only if Text-content-length and the copfyrom
pair (respectively) are also present. A decoder may use them to verify
that the source content they refer to has not been corrupted.

Text-content-length will be present only when there is a text section.
Zero is a legal value for this length, indicating an empty file.

Prop-content-length will be present only when there is a properties section.

Content-length will be present if there is either a text or a
properties section.  This is not always the case.  In particular, 
a delete operation cannot have either.  Some other operations that use
copyfrom sources may also not have either.

Again, the '!' stands in for a mandatory empty line following the
RFC822-style headers. A body may follow

== Semantics ==

=== The kinds of things ===

There are four kinds of things described by a dumpfile: paths,
properties, content, and flows.  The distinctions among content,
paths, and flows matter for understanding some operations.

A path is a filesystem location.  There are two kinds of paths
in a dumpfile; node paths and copy sources.

Properties are key-value pairs associated with revisions or paths.
Subversion interprets and reserves some properties, those beginning
with "svn:". Others are not interpreted by Subversion; they may 
may be set and read for the convenience of other applications, such
as repository browsers or translators.

A flow is a sequence of revisions of a file or directory path that is
considered to be a unit of history for change-tracking purposes.
Creating a flow tells Subversion that you want to track the history of
the path or paths it contains. Destroying a flow breaks the chain of
history; changes will not be tracked across the break, even if another
flow is created at the same path.

Content is what file paths point at. It is the payload of program
source code, documents, images, and so forth that a version control
system actually manages.

=== The kinds of operations ===

.File operations
|======================================================================
|                           |   add    | delete | replace  |  change  |
|Can have text section?     | optional |   no   | optional | optional |
|Can have property section? | optional |   no   | optional | optional |
|Can have copy source?      | optional |   no   | optional | optional |
|======================================================================

.Directory operations
|======================================================================
|                           |   add    | delete | replace  |  change  |
|Can have text section?     |    no    |   no   |   no     |    no    |
|Can have property section? | optional |   no   | optional | required |
|Can have copy source?      | optional |   no   | optional |    no    |
|======================================================================

A node represents an operation that does one of four things: add,
delete, change, or replace.

Nodes can carry content in one (or both!)  of two ways: from a text
section or from a copy source (that is, a copy-path and copy-revision
pair). Giving a copy source appends the node to the flow of which that
source is part.

An add operation creates a new flow for a file or directory.
The initial content for the new flow may come from a text section
attached to the node, or from a copy source.  A node representing an
add operation may have a property section.  Directory adds never have
text content, but may have a copyfrom source; file adds always have
one or the other, but not both.

A delete operation deletes a flow and its content.  A delete
node may not have text, properties, or a copy source.  A subsequent
add at the same path will create a new and different flow with
its own history.

A change operation changes properties on a file or directory path.  A
change node must have properties, and may not have text or a copy
source.

A replace operation behaves exactly like a delete followed by an add
(destroying an old flow, producing a new one) when it has no copy
source. When a replace has a copy source, it produces a new flow
with history extending back through the copy source. A node
representing a replace operation may have a property section.

It is even possible to have a replace with a copyfrom source *and*
text, such as would result from this on the client side:
 
-------------------------------------------------------------------
$ svn rm dir/file.txt
$ svn cp otherdir/otherfile.txt dir/file.txt
$ echo "Replacement text" > dir/file.txt
$ svn ci -m "Replace dir/file.txt with a copy of otherdir/otherfile.txt and replace its text, too."
-------------------------------------------------------------------
 
[? Can an add have both kinds of sources, too?  If so, what does
that mean? ?]

==== Properties and persistence ===

The properties section of a Revision record consists of some subset
of the three reserved per-commit properties: svn:author, svn:date,
and svn.log. These properties do not persist to later revisions.

The key thing to know about Node properties is that they are 
persistent, once set, until modified by a future property 
section on the same path.

Normally, a dumpfile re-lists the entire property set for a directory
or file in every node record that changes any part of it. (But see
the material on delta dumps for an exception.)

This implies that to delete a given property from a path, a dumpfile
generator will issue a node with all other properties listed in it;
to delete all properties from a path, the dumpfile generator will
simply issue a node with an empty properties section. Note that this
is different from an *absent* properties section, which will change
no properties and will be associated with a change to content!




===================================================================

Text sections work the same way.  When present, a text section on a
file node changes the contents of the file; an absent text section
means only the file properties change.

Interpreting copyfrom_path for file copies is straightforward; the
target pathname gets the contents of the source pathname.

Directory copies (the primitive beneath branching and tagging) are
tricky.  For each source path under the source directory, a new path
is generated by removing the head segment of the pathname that is
the source directory.  That new path under the target directory gets
the content of the source path.

A single revision may include multiple copyfrom nodes, even multiple
copyfroms to the same directory, even mixed directory and file copies
to the same directory; [?Subversion client tools never generate such
mixed copies, but?] I have seen the results of cvs2svn doing it. 
